
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006250  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  08006438  08006438  00016438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ee0  08006ee0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ee0  08006ee0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000007c  08006f64  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08006f64  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000832b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000199c  00000000  00000000  000283d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  00029d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f78  00000000  00000000  0002aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075be  00000000  00000000  00044a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096156  00000000  00000000  0004c026  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e217c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002310  00000000  00000000  000e21f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	08006420 	.word	0x08006420

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	08006420 	.word	0x08006420

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000ba2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ba6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <MX_FSMC_Init+0xf4>)
 8000bac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c04:	230f      	movs	r3, #15
 8000c06:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c10:	2310      	movs	r3, #16
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c14:	2311      	movs	r3, #17
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c20:	230f      	movs	r3, #15
 8000c22:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000c24:	2303      	movs	r3, #3
 8000c26:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c30:	2311      	movs	r3, #17
 8000c32:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000c38:	463a      	mov	r2, r7
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000c42:	f003 fbe5 	bl	8004410 <HAL_SRAM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8000c4c:	f002 fc47 	bl	80034de <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_FSMC_Init+0xf8>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <MX_FSMC_Init+0xf8>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	61d3      	str	r3, [r2, #28]

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000a8 	.word	0x200000a8
 8000c68:	a0000104 	.word	0xa0000104
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_FSMC_MspInit+0x78>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d129      	bne.n	8000ce0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_FSMC_MspInit+0x78>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_FSMC_MspInit+0x7c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <HAL_FSMC_MspInit+0x7c>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9c:	6153      	str	r3, [r2, #20]
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_FSMC_MspInit+0x7c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000caa:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000cae:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_FSMC_MspInit+0x80>)
 8000cc0:	f002 fe3a 	bl	8003938 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cc4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000cc8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_FSMC_MspInit+0x84>)
 8000cda:	f002 fe2d 	bl	8003938 <HAL_GPIO_Init>
 8000cde:	e000      	b.n	8000ce2 <HAL_FSMC_MspInit+0x72>
    return;
 8000ce0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40011800 	.word	0x40011800
 8000cf4:	40011400 	.word	0x40011400

08000cf8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d00:	f7ff ffb6 	bl	8000c70 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a3f      	ldr	r2, [pc, #252]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d38:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a39      	ldr	r2, [pc, #228]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b34      	ldr	r3, [pc, #208]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d56:	f043 0320 	orr.w	r3, r3, #32
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0320 	and.w	r3, r3, #32
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a2d      	ldr	r2, [pc, #180]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_GPIO_Init+0x118>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000da0:	f002 ff34 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2120      	movs	r1, #32
 8000da8:	4820      	ldr	r0, [pc, #128]	; (8000e2c <MX_GPIO_Init+0x120>)
 8000daa:	f002 ff2f 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481b      	ldr	r0, [pc, #108]	; (8000e30 <MX_GPIO_Init+0x124>)
 8000dc4:	f002 fdb8 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000de2:	f002 fda9 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000de6:	2308      	movs	r3, #8
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <MX_GPIO_Init+0x11c>)
 8000dfa:	f002 fd9d 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000dfe:	2320      	movs	r3, #32
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_GPIO_Init+0x120>)
 8000e16:	f002 fd8f 	bl	8003938 <HAL_GPIO_Init>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	40010c00 	.word	0x40010c00
 8000e30:	40011000 	.word	0x40011000

08000e34 <SetXY>:
void DelayMicro(uint32_t micros){
    micros *=(SystemCoreClock/1000000)/5;
    while (micros--);
}

void SetXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8000e34:	b490      	push	{r4, r7}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	4603      	mov	r3, r0
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	803b      	strh	r3, [r7, #0]
	if (orient==LANDSCAPE){
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <SetXY+0xd4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d11d      	bne.n	8000e96 <SetXY+0x62>
		swap(uint16_t, x1, y1);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	81fb      	strh	r3, [r7, #14]
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	80fb      	strh	r3, [r7, #6]
 8000e62:	89fb      	ldrh	r3, [r7, #14]
 8000e64:	80bb      	strh	r3, [r7, #4]
		swap(uint16_t, x2, y2)
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	81bb      	strh	r3, [r7, #12]
 8000e6a:	883b      	ldrh	r3, [r7, #0]
 8000e6c:	807b      	strh	r3, [r7, #2]
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	803b      	strh	r3, [r7, #0]
		y1=disp_y_size-y1;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <SetXY+0xd8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	80bb      	strh	r3, [r7, #4]
		y2=disp_y_size-y2;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <SetXY+0xd8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	883b      	ldrh	r3, [r7, #0]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	803b      	strh	r3, [r7, #0]
		swap(uint16_t, y1, y2)
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	817b      	strh	r3, [r7, #10]
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	897b      	ldrh	r3, [r7, #10]
 8000e94:	803b      	strh	r3, [r7, #0]
	}
	ADDR_CMD = 0x2a;
 8000e96:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e9a:	222a      	movs	r2, #42	; 0x2a
 8000e9c:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = x1>>8;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <SetXY+0xdc>)
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = x1;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <SetXY+0xdc>)
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = x2>>8;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <SetXY+0xdc>)
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = x2;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <SetXY+0xdc>)
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
    ADDR_CMD = 0x2b;
 8000ec6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000eca:	222b      	movs	r2, #43	; 0x2b
 8000ecc:	701a      	strb	r2, [r3, #0]
    ADDR_DATA = y1>>8;
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <SetXY+0xdc>)
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	701a      	strb	r2, [r3, #0]
    ADDR_DATA = y1;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <SetXY+0xdc>)
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
    ADDR_DATA = y2>>8;
 8000ee2:	883b      	ldrh	r3, [r7, #0]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <SetXY+0xdc>)
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
    ADDR_DATA = y2;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <SetXY+0xdc>)
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]
    ADDR_CMD = 0x2c;
 8000ef6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000efa:	222c      	movs	r2, #44	; 0x2c
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc90      	pop	{r4, r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	60020000 	.word	0x60020000

08000f14 <clrXY>:

void clrXY(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	if (orient==PORTRAIT)
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <clrXY+0x3c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10a      	bne.n	8000f36 <clrXY+0x22>
		SetXY(0,0,disp_x_size,disp_y_size);
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <clrXY+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <clrXY+0x44>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff ff80 	bl	8000e34 <SetXY>
	else
		SetXY(0,0,disp_y_size,disp_x_size);
}
 8000f34:	e009      	b.n	8000f4a <clrXY+0x36>
		SetXY(0,0,disp_y_size,disp_x_size);
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <clrXY+0x44>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <clrXY+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff ff75 	bl	8000e34 <SetXY>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004

08000f5c <LCD_clrScr>:
	uint32_t i;
	for (i=0; i<((disp_x_size+1)*(disp_y_size+1)); i++)
		ADDR_DATA16 = color;
}

void LCD_clrScr(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	clrXY();
 8000f62:	f7ff ffd7 	bl	8000f14 <clrXY>
	for (uint32_t i=0; i<((disp_x_size+1)*(disp_y_size+1)); i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	e005      	b.n	8000f78 <LCD_clrScr+0x1c>
		ADDR_DATA16 = VGA_BLACK;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <LCD_clrScr+0x3c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	801a      	strh	r2, [r3, #0]
	for (uint32_t i=0; i<((disp_x_size+1)*(disp_y_size+1)); i++)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <LCD_clrScr+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <LCD_clrScr+0x44>)
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	3201      	adds	r2, #1
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3ee      	bcc.n	8000f6c <LCD_clrScr+0x10>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	60020000 	.word	0x60020000
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <setColorRGB>:
	}
	DelayMicro(150);//stabilization time
	return id;
}

void setColorRGB(uint8_t r, uint8_t g, uint8_t b){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	717b      	strb	r3, [r7, #5]
	f_color = ((r&248)<<8)|((g&252)<<3)|(b&248)>>3;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	797b      	ldrb	r3, [r7, #5]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <setColorRGB+0x50>)
 8000fe6:	801a      	strh	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000f2 	.word	0x200000f2

08000ff8 <setBackColorRGB>:

uint16_t getColor(){
	return f_color;
}

void setBackColorRGB(uint8_t r, uint8_t g, uint8_t b){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
	b_color = ((r&248)<<8)|((g&252)<<3)|(b&248)>>3;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21b      	sxth	r3, r3
 8001010:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001014:	f023 0307 	bic.w	r3, r3, #7
 8001018:	b21a      	sxth	r2, r3
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	b21b      	sxth	r3, r3
 8001020:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21a      	sxth	r2, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <setBackColorRGB+0x54>)
 800103a:	801a      	strh	r2, [r3, #0]
	_transparent=false;
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <setBackColorRGB+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200000f0 	.word	0x200000f0
 8001050:	200000f4 	.word	0x200000f4

08001054 <fillScr>:

void fillScr(uint16_t color){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	long i;

	clrXY();
 800105e:	f7ff ff59 	bl	8000f14 <clrXY>
	for (i=0; i<((disp_x_size+1)*(disp_y_size+1)); i++)	{
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e005      	b.n	8001074 <fillScr+0x20>
		ADDR_DATA16 = color;
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <fillScr+0x40>)
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	8013      	strh	r3, [r2, #0]
	for (i=0; i<((disp_x_size+1)*(disp_y_size+1)); i++)	{
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3301      	adds	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <fillScr+0x44>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <fillScr+0x48>)
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	3201      	adds	r2, #1
 8001080:	fb02 f203 	mul.w	r2, r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	429a      	cmp	r2, r3
 8001088:	d8ee      	bhi.n	8001068 <fillScr+0x14>
		}
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	60020000 	.word	0x60020000
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004

080010a0 <setPixel>:
		return disp_y_size+1;
	else
		return disp_x_size+1;
}

void setPixel(uint16_t color){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	ADDR_DATA16 = color;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <setPixel+0x1c>)
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	8013      	strh	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	60020000 	.word	0x60020000

080010c0 <drawPixel>:

void drawPixel(int x, int y){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	SetXY(x, y, x, y);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	b298      	uxth	r0, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b299      	uxth	r1, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f7ff feab 	bl	8000e34 <SetXY>
	setPixel(f_color);
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <drawPixel+0x34>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ffdc 	bl	80010a0 <setPixel>
	clrXY();
 80010e8:	f7ff ff14 	bl	8000f14 <clrXY>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000f2 	.word	0x200000f2

080010f8 <drawHLine>:

void drawHLine(int x, int y, int l){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	if (l<0){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	da06      	bge.n	8001118 <drawHLine+0x20>
		l = -l;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	425b      	negs	r3, r3
 800110e:	607b      	str	r3, [r7, #4]
		x -= l;
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]
	}
	SetXY(x, y, x+l, y);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	b298      	uxth	r0, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	b299      	uxth	r1, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4413      	add	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	b29b      	uxth	r3, r3
 8001130:	f7ff fe80 	bl	8000e34 <SetXY>
	for (int i=0; i<l+1; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e006      	b.n	8001148 <drawHLine+0x50>
		ADDR_DATA16 = f_color;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <drawHLine+0x68>)
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <drawHLine+0x6c>)
 800113e:	8812      	ldrh	r2, [r2, #0]
 8001140:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<l+1; i++){
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbf3      	blt.n	800113a <drawHLine+0x42>
	}
	clrXY();
 8001152:	f7ff fedf 	bl	8000f14 <clrXY>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	60020000 	.word	0x60020000
 8001164:	200000f2 	.word	0x200000f2

08001168 <drawVLine>:

void drawVLine(int x, int y, int l){
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	if (l<0){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	da06      	bge.n	8001188 <drawVLine+0x20>
		l = -l;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	425b      	negs	r3, r3
 800117e:	607b      	str	r3, [r7, #4]
		y -= l;
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	60bb      	str	r3, [r7, #8]
	}
	SetXY(x, y, x, y+l);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b298      	uxth	r0, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	b299      	uxth	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	b29c      	uxth	r4, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4622      	mov	r2, r4
 80011a2:	f7ff fe47 	bl	8000e34 <SetXY>
	for (int i=0; i<l+1; i++){
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e006      	b.n	80011ba <drawVLine+0x52>
		ADDR_DATA16 = f_color;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <drawVLine+0x68>)
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <drawVLine+0x6c>)
 80011b0:	8812      	ldrh	r2, [r2, #0]
 80011b2:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<l+1; i++){
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3301      	adds	r3, #1
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf3      	blt.n	80011ac <drawVLine+0x44>
	}
	clrXY();
 80011c4:	f7ff fea6 	bl	8000f14 <clrXY>
}
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	60020000 	.word	0x60020000
 80011d4:	200000f2 	.word	0x200000f2

080011d8 <drawLine>:

void drawLine(int x1, int y1, int x2, int y2){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
	if (y1==y2)
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d108      	bne.n	8001200 <drawLine+0x28>
		drawHLine(x1, y1, x2-x1);
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff ff7d 	bl	80010f8 <drawHLine>
 80011fe:	e096      	b.n	800132e <drawLine+0x156>
	else if (x1==x2)
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	d108      	bne.n	800121a <drawLine+0x42>
		drawVLine(x1, y1, y2-y1);
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff ffa8 	bl	8001168 <drawVLine>
 8001218:	e089      	b.n	800132e <drawLine+0x156>
	else{
		unsigned int	dx = (x2 > x1 ? x2 - x1 : x1 - x2);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	429a      	cmp	r2, r3
 8001220:	dd03      	ble.n	800122a <drawLine+0x52>
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	e002      	b.n	8001230 <drawLine+0x58>
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	61fb      	str	r3, [r7, #28]
		short			xstep =  x2 > x1 ? 1 : -1;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	dd01      	ble.n	800123e <drawLine+0x66>
 800123a:	2301      	movs	r3, #1
 800123c:	e001      	b.n	8001242 <drawLine+0x6a>
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	837b      	strh	r3, [r7, #26]
		unsigned int	dy = (y2 > y1 ? y2 - y1 : y1 - y2);
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	dd03      	ble.n	8001254 <drawLine+0x7c>
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	e002      	b.n	800125a <drawLine+0x82>
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
		short			ystep =  y2 > y1 ? 1 : -1;
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	429a      	cmp	r2, r3
 8001262:	dd01      	ble.n	8001268 <drawLine+0x90>
 8001264:	2301      	movs	r3, #1
 8001266:	e001      	b.n	800126c <drawLine+0x94>
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	827b      	strh	r3, [r7, #18]
		int				col = x1, row = y1;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28

		if (dx < dy){
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	429a      	cmp	r2, r3
 800127c:	d22b      	bcs.n	80012d6 <drawLine+0xfe>
			int t = - (dy >> 1);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
			while (1){
				SetXY (col, row, col, row);
 8001286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001288:	b298      	uxth	r0, r3
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	b299      	uxth	r1, r3
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	b29a      	uxth	r2, r3
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	b29b      	uxth	r3, r3
 8001296:	f7ff fdcd 	bl	8000e34 <SetXY>
				ADDR_DATA16 = f_color;
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <drawLine+0x168>)
 800129c:	4a29      	ldr	r2, [pc, #164]	; (8001344 <drawLine+0x16c>)
 800129e:	8812      	ldrh	r2, [r2, #0]
 80012a0:	801a      	strh	r2, [r3, #0]
				if (row == y2)
 80012a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d044      	beq.n	8001334 <drawLine+0x15c>
					return;
				row += ystep;
 80012aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
				t += dx;
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
				if (t >= 0){
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dbe1      	blt.n	8001286 <drawLine+0xae>
					col += xstep;
 80012c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c8:	4413      	add	r3, r2
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					t   -= dy;
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
				SetXY (col, row, col, row);
 80012d4:	e7d7      	b.n	8001286 <drawLine+0xae>
				}
			}
		}
		else{
			int t = - (dx >> 1);
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	425b      	negs	r3, r3
 80012dc:	623b      	str	r3, [r7, #32]
			while (1){
				SetXY (col, row, col, row);
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	b298      	uxth	r0, r3
 80012e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e4:	b299      	uxth	r1, r3
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f7ff fda1 	bl	8000e34 <SetXY>
				ADDR_DATA16 = f_color;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <drawLine+0x168>)
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <drawLine+0x16c>)
 80012f6:	8812      	ldrh	r2, [r2, #0]
 80012f8:	801a      	strh	r2, [r3, #0]
				if (col == x2)
 80012fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d01a      	beq.n	8001338 <drawLine+0x160>
					return;
				col += xstep;
 8001302:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001308:	4413      	add	r3, r2
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
				t += dy;
 800130c:	6a3a      	ldr	r2, [r7, #32]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	623b      	str	r3, [r7, #32]
				if (t >= 0){
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dbe1      	blt.n	80012de <drawLine+0x106>
					row += ystep;
 800131a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800131e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001320:	4413      	add	r3, r2
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
					t   -= dx;
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	623b      	str	r3, [r7, #32]
				SetXY (col, row, col, row);
 800132c:	e7d7      	b.n	80012de <drawLine+0x106>
				}
			}
		}
	}
	clrXY();
 800132e:	f7ff fdf1 	bl	8000f14 <clrXY>
 8001332:	e002      	b.n	800133a <drawLine+0x162>
					return;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <drawLine+0x162>
					return;
 8001338:	bf00      	nop
}
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	60020000 	.word	0x60020000
 8001344:	200000f2 	.word	0x200000f2

08001348 <drawRect>:

void drawRect(int x1, int y1, int x2, int y2){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
	if (x1>x2){
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dd05      	ble.n	800136a <drawRect+0x22>
		swap(int, x1, x2);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2){
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	dd05      	ble.n	800137e <drawRect+0x36>
		swap(int, y1, y2);
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	603b      	str	r3, [r7, #0]
	}
	drawHLine(x1, y1, x2-x1);
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	461a      	mov	r2, r3
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff feb5 	bl	80010f8 <drawHLine>
	drawHLine(x1, y2, x2-x1);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	461a      	mov	r2, r3
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fead 	bl	80010f8 <drawHLine>
	drawVLine(x1, y1, y2-y1);
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fedd 	bl	8001168 <drawVLine>
	drawVLine(x2, y1, y2-y1);
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff fed5 	bl	8001168 <drawVLine>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <drawRoundRect>:

void drawRoundRect(int x1, int y1, int x2, int y2){
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	603b      	str	r3, [r7, #0]
	if (x1>x2){
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dd05      	ble.n	80013e8 <drawRoundRect+0x22>
		swap(int, x1, x2);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2){
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dd05      	ble.n	80013fc <drawRoundRect+0x36>
		swap(int, y1, y2);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	603b      	str	r3, [r7, #0]
	}
	if ((x2-x1)>4 && (y2-y1)>4){
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b04      	cmp	r3, #4
 8001404:	dd4c      	ble.n	80014a0 <drawRoundRect+0xda>
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b04      	cmp	r3, #4
 800140e:	dd47      	ble.n	80014a0 <drawRoundRect+0xda>
		drawPixel(x1+1,y1+1);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f7ff fe50 	bl	80010c0 <drawPixel>
		drawPixel(x2-1,y1+1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1e5a      	subs	r2, r3, #1
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff fe48 	bl	80010c0 <drawPixel>
		drawPixel(x1+1,y2-1);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3b01      	subs	r3, #1
 8001438:	4619      	mov	r1, r3
 800143a:	4610      	mov	r0, r2
 800143c:	f7ff fe40 	bl	80010c0 <drawPixel>
		drawPixel(x2-1,y2-1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	1e5a      	subs	r2, r3, #1
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f7ff fe38 	bl	80010c0 <drawPixel>
		drawHLine(x1+2, y1, x2-x1-4);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1c98      	adds	r0, r3, #2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	3b04      	subs	r3, #4
 800145c:	461a      	mov	r2, r3
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	f7ff fe4a 	bl	80010f8 <drawHLine>
		drawHLine(x1+2, y2, x2-x1-4);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1c98      	adds	r0, r3, #2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	3b04      	subs	r3, #4
 8001470:	461a      	mov	r2, r3
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	f7ff fe40 	bl	80010f8 <drawHLine>
		drawVLine(x1, y1+2, y2-y1-4);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c99      	adds	r1, r3, #2
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	3b04      	subs	r3, #4
 8001484:	461a      	mov	r2, r3
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fe6e 	bl	8001168 <drawVLine>
		drawVLine(x2, y1+2, y2-y1-4);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c99      	adds	r1, r3, #2
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	3b04      	subs	r3, #4
 8001498:	461a      	mov	r2, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe64 	bl	8001168 <drawVLine>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <fillRect>:

void fillRect(int x1, int y1, int x2, int y2){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
	if (x1>x2){
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dd05      	ble.n	80014ca <fillRect+0x22>
		swap(int, x1, x2);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2){
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dd05      	ble.n	80014de <fillRect+0x36>
		swap(int, y1, y2);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	603b      	str	r3, [r7, #0]
	}
	if (orient==PORTRAIT){
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <fillRect+0xd8>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d124      	bne.n	8001530 <fillRect+0x88>
		for (int i=0; i<((y2-y1)/2)+1; i++){
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e016      	b.n	800151a <fillRect+0x72>
			drawHLine(x1, y1+i, x2-x1);
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	18d1      	adds	r1, r2, r3
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff fdfc 	bl	80010f8 <drawHLine>
			drawHLine(x1, y2-i, x2-x1);
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	461a      	mov	r2, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff fdf2 	bl	80010f8 <drawHLine>
		for (int i=0; i<((y2-y1)/2)+1; i++){
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	0fda      	lsrs	r2, r3, #31
 8001522:	4413      	add	r3, r2
 8001524:	105b      	asrs	r3, r3, #1
 8001526:	3301      	adds	r3, #1
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	429a      	cmp	r2, r3
 800152c:	dbde      	blt.n	80014ec <fillRect+0x44>
		for (int i=0; i<((x2-x1)/2)+1; i++){
			drawVLine(x1+i, y1, y2-y1);
			drawVLine(x2-i, y1, y2-y1);
		}
	}
}
 800152e:	e023      	b.n	8001578 <fillRect+0xd0>
		for (int i=0; i<((x2-x1)/2)+1; i++){
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e016      	b.n	8001564 <fillRect+0xbc>
			drawVLine(x1+i, y1, y2-y1);
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	18d0      	adds	r0, r2, r3
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	461a      	mov	r2, r3
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	f7ff fe0f 	bl	8001168 <drawVLine>
			drawVLine(x2-i, y1, y2-y1);
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad0      	subs	r0, r2, r3
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	461a      	mov	r2, r3
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	f7ff fe05 	bl	8001168 <drawVLine>
		for (int i=0; i<((x2-x1)/2)+1; i++){
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	3301      	adds	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	0fda      	lsrs	r2, r3, #31
 800156c:	4413      	add	r3, r2
 800156e:	105b      	asrs	r3, r3, #1
 8001570:	3301      	adds	r3, #1
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbde      	blt.n	8001536 <fillRect+0x8e>
}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000008 	.word	0x20000008

08001584 <fillRoundRect>:

void fillRoundRect(int x1, int y1, int x2, int y2){
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
	if (x1>x2){
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dd05      	ble.n	80015a6 <fillRoundRect+0x22>
		swap(int, x1, x2);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2){
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dd05      	ble.n	80015ba <fillRoundRect+0x36>
		swap(int, y1, y2);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	603b      	str	r3, [r7, #0]
	}
	if ((x2-x1)>4 && (y2-y1)>4){
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	dd60      	ble.n	8001686 <fillRoundRect+0x102>
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	dd5b      	ble.n	8001686 <fillRoundRect+0x102>
		for (int i=0; i<((y2-y1)/2)+1; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e04e      	b.n	8001672 <fillRoundRect+0xee>
		{
			switch(i){
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <fillRoundRect+0x5c>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d019      	beq.n	8001612 <fillRoundRect+0x8e>
 80015de:	e031      	b.n	8001644 <fillRoundRect+0xc0>
			case 0:
				drawHLine(x1+2, y1+i, x2-x1-4);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1c98      	adds	r0, r3, #2
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	18d1      	adds	r1, r2, r3
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	3b04      	subs	r3, #4
 80015f2:	461a      	mov	r2, r3
 80015f4:	f7ff fd80 	bl	80010f8 <drawHLine>
				drawHLine(x1+2, y2-i, x2-x1-4);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	1c98      	adds	r0, r3, #2
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	1ad1      	subs	r1, r2, r3
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	3b04      	subs	r3, #4
 800160a:	461a      	mov	r2, r3
 800160c:	f7ff fd74 	bl	80010f8 <drawHLine>
				break;
 8001610:	e02c      	b.n	800166c <fillRoundRect+0xe8>
			case 1:
				drawHLine(x1+1, y1+i, x2-x1-2);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1c58      	adds	r0, r3, #1
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	18d1      	adds	r1, r2, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	3b02      	subs	r3, #2
 8001624:	461a      	mov	r2, r3
 8001626:	f7ff fd67 	bl	80010f8 <drawHLine>
				drawHLine(x1+1, y2-i, x2-x1-2);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1c58      	adds	r0, r3, #1
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	1ad1      	subs	r1, r2, r3
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	3b02      	subs	r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	f7ff fd5b 	bl	80010f8 <drawHLine>
				break;
 8001642:	e013      	b.n	800166c <fillRoundRect+0xe8>
			default:
				drawHLine(x1, y1+i, x2-x1);
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	18d1      	adds	r1, r2, r3
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	461a      	mov	r2, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fd50 	bl	80010f8 <drawHLine>
				drawHLine(x1, y2-i, x2-x1);
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1ad1      	subs	r1, r2, r3
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	461a      	mov	r2, r3
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fd46 	bl	80010f8 <drawHLine>
		for (int i=0; i<((y2-y1)/2)+1; i++)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3301      	adds	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	0fda      	lsrs	r2, r3, #31
 800167a:	4413      	add	r3, r2
 800167c:	105b      	asrs	r3, r3, #1
 800167e:	3301      	adds	r3, #1
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	429a      	cmp	r2, r3
 8001684:	dba6      	blt.n	80015d4 <fillRoundRect+0x50>
			}
		}
	}
}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <drawCircle>:
void drawCircle(int x, int y, int radius){
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	int f = 1 - radius;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f1c3 0301 	rsb	r3, r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	623b      	str	r3, [r7, #32]
	int ddF_y = -2 * radius;
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	07db      	lsls	r3, r3, #31
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
	int x1 = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
	int y1 = radius;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	617b      	str	r3, [r7, #20]

	SetXY(x, y + radius, x, y + radius);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	b298      	uxth	r0, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b299      	uxth	r1, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	b29c      	uxth	r4, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4622      	mov	r2, r4
 80016de:	f7ff fba9 	bl	8000e34 <SetXY>
	ADDR_DATA16 = f_color;
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <drawCircle+0xe4>)
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <drawCircle+0xe8>)
 80016e6:	8812      	ldrh	r2, [r2, #0]
 80016e8:	801a      	strh	r2, [r3, #0]
	SetXY(x, y - radius, x, y - radius);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	b298      	uxth	r0, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	b299      	uxth	r1, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	b29c      	uxth	r4, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	4622      	mov	r2, r4
 800170c:	f7ff fb92 	bl	8000e34 <SetXY>
	ADDR_DATA16 = f_color;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <drawCircle+0xe4>)
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <drawCircle+0xe8>)
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	801a      	strh	r2, [r3, #0]
	SetXY(x + radius, y, x + radius, y);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b298      	uxth	r0, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	b299      	uxth	r1, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b29a      	uxth	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f7ff fb7c 	bl	8000e34 <SetXY>
	ADDR_DATA16 = f_color;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <drawCircle+0xe4>)
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <drawCircle+0xe8>)
 8001740:	8812      	ldrh	r2, [r2, #0]
 8001742:	801a      	strh	r2, [r3, #0]
	SetXY(x - radius, y, x - radius, y);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b298      	uxth	r0, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	b299      	uxth	r1, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	b29b      	uxth	r3, r3
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	b29b      	uxth	r3, r3
 8001764:	f7ff fb66 	bl	8000e34 <SetXY>
	ADDR_DATA16 = f_color;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <drawCircle+0xe4>)
 800176a:	4a03      	ldr	r2, [pc, #12]	; (8001778 <drawCircle+0xe8>)
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	801a      	strh	r2, [r3, #0]
	while(x1 < y1){
 8001770:	e113      	b.n	800199a <drawCircle+0x30a>
 8001772:	bf00      	nop
 8001774:	60020000 	.word	0x60020000
 8001778:	200000f2 	.word	0x200000f2
		if(f >= 0){
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	db09      	blt.n	8001796 <drawCircle+0x106>
			y1--;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3b01      	subs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3302      	adds	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 800178e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x1++;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	3301      	adds	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	3302      	adds	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	4413      	add	r3, r2
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
		SetXY(x + x1, y + y1, x + x1, y + y1);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	b298      	uxth	r0, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	b299      	uxth	r1, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b29c      	uxth	r4, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4622      	mov	r2, r4
 80017dc:	f7ff fb2a 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <drawCircle+0x320>)
 80017e2:	4a74      	ldr	r2, [pc, #464]	; (80019b4 <drawCircle+0x324>)
 80017e4:	8812      	ldrh	r2, [r2, #0]
 80017e6:	801a      	strh	r2, [r3, #0]
		SetXY(x - x1, y + y1, x - x1, y + y1);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b298      	uxth	r0, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	b299      	uxth	r1, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	b29a      	uxth	r2, r3
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	b29b      	uxth	r3, r3
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29c      	uxth	r4, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	b29a      	uxth	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4413      	add	r3, r2
 8001816:	b29b      	uxth	r3, r3
 8001818:	4622      	mov	r2, r4
 800181a:	f7ff fb0b 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 800181e:	4b64      	ldr	r3, [pc, #400]	; (80019b0 <drawCircle+0x320>)
 8001820:	4a64      	ldr	r2, [pc, #400]	; (80019b4 <drawCircle+0x324>)
 8001822:	8812      	ldrh	r2, [r2, #0]
 8001824:	801a      	strh	r2, [r3, #0]
		SetXY(x + x1, y - y1, x + x1, y - y1);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	b29a      	uxth	r2, r3
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b298      	uxth	r0, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	b29b      	uxth	r3, r3
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b299      	uxth	r1, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	b29a      	uxth	r2, r3
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b29c      	uxth	r4, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	b29a      	uxth	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	b29b      	uxth	r3, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	b29b      	uxth	r3, r3
 8001856:	4622      	mov	r2, r4
 8001858:	f7ff faec 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 800185c:	4b54      	ldr	r3, [pc, #336]	; (80019b0 <drawCircle+0x320>)
 800185e:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <drawCircle+0x324>)
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	801a      	strh	r2, [r3, #0]
		SetXY(x - x1, y - y1, x - x1, y - y1);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	b29a      	uxth	r2, r3
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	b29b      	uxth	r3, r3
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	b298      	uxth	r0, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	b29a      	uxth	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b29b      	uxth	r3, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b299      	uxth	r1, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	b29a      	uxth	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	b29b      	uxth	r3, r3
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b29c      	uxth	r4, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	b29a      	uxth	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	b29b      	uxth	r3, r3
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	4622      	mov	r2, r4
 8001896:	f7ff facd 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 800189a:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <drawCircle+0x320>)
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <drawCircle+0x324>)
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	801a      	strh	r2, [r3, #0]
		SetXY(x + y1, y + x1, x + y1, y + x1);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b298      	uxth	r0, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	b299      	uxth	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b29c      	uxth	r4, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4622      	mov	r2, r4
 80018d4:	f7ff faae 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <drawCircle+0x320>)
 80018da:	4a36      	ldr	r2, [pc, #216]	; (80019b4 <drawCircle+0x324>)
 80018dc:	8812      	ldrh	r2, [r2, #0]
 80018de:	801a      	strh	r2, [r3, #0]
		SetXY(x - y1, y + x1, x - y1, y + x1);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b298      	uxth	r0, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b299      	uxth	r1, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b29c      	uxth	r4, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	b29a      	uxth	r2, r3
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4413      	add	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	4622      	mov	r2, r4
 8001912:	f7ff fa8f 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <drawCircle+0x320>)
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <drawCircle+0x324>)
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	801a      	strh	r2, [r3, #0]
		SetXY(x + y1, y - x1, x + y1, y - x1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	b29a      	uxth	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b298      	uxth	r0, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	b29a      	uxth	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	b29b      	uxth	r3, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b299      	uxth	r1, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b29a      	uxth	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b29c      	uxth	r4, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	b29a      	uxth	r2, r3
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	4622      	mov	r2, r4
 8001950:	f7ff fa70 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <drawCircle+0x320>)
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <drawCircle+0x324>)
 8001958:	8812      	ldrh	r2, [r2, #0]
 800195a:	801a      	strh	r2, [r3, #0]
		SetXY(x - y1, y - x1, x - y1, y - x1);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	b29a      	uxth	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	b29b      	uxth	r3, r3
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b298      	uxth	r0, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	b29a      	uxth	r2, r3
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29b      	uxth	r3, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b299      	uxth	r1, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	b29a      	uxth	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	b29b      	uxth	r3, r3
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	b29c      	uxth	r4, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	b29a      	uxth	r2, r3
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	b29b      	uxth	r3, r3
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	4622      	mov	r2, r4
 800198e:	f7ff fa51 	bl	8000e34 <SetXY>
		ADDR_DATA16 = f_color;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <drawCircle+0x320>)
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <drawCircle+0x324>)
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	801a      	strh	r2, [r3, #0]
	while(x1 < y1){
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	429a      	cmp	r2, r3
 80019a0:	f6ff aeec 	blt.w	800177c <drawCircle+0xec>
	}
	clrXY();
 80019a4:	f7ff fab6 	bl	8000f14 <clrXY>
}
 80019a8:	bf00      	nop
 80019aa:	372c      	adds	r7, #44	; 0x2c
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	60020000 	.word	0x60020000
 80019b4:	200000f2 	.word	0x200000f2

080019b8 <fillCircle>:

void fillCircle(int x, int y, int radius){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	for(int y1=-radius; y1<=0; y1++)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	425b      	negs	r3, r3
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e038      	b.n	8001a3e <fillCircle+0x86>
		for(int x1=-radius; x1<=0; x1++)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	425b      	negs	r3, r3
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e02e      	b.n	8001a32 <fillCircle+0x7a>
			if(x1*x1+y1*y1 <= radius*radius)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	fb02 f203 	mul.w	r2, r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	6979      	ldr	r1, [r7, #20]
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dc1c      	bgt.n	8001a2c <fillCircle+0x74>
			{
				drawHLine(x+x1, y+y1, 2*(-x1));
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	18d0      	adds	r0, r2, r3
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	18d1      	adds	r1, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4613      	mov	r3, r2
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f7ff fb75 	bl	80010f8 <drawHLine>
				drawHLine(x+x1, y-y1, 2*(-x1));
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	18d0      	adds	r0, r2, r3
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad1      	subs	r1, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	07db      	lsls	r3, r3, #31
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	461a      	mov	r2, r3
 8001a26:	f7ff fb67 	bl	80010f8 <drawHLine>
				break;
 8001a2a:	e005      	b.n	8001a38 <fillCircle+0x80>
		for(int x1=-radius; x1<=0; x1++)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	ddcd      	ble.n	80019d4 <fillCircle+0x1c>
	for(int y1=-radius; y1<=0; y1++)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	ddc3      	ble.n	80019cc <fillCircle+0x14>
			}
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <printChar>:

void printChar(uint8_t c, int x, int y){
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b08b      	sub	sp, #44	; 0x2c
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch;
	uint16_t j;
	uint16_t temp;
	if (!_transparent){
 8001a5a:	4b98      	ldr	r3, [pc, #608]	; (8001cbc <printChar+0x270>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8102 	beq.w	8001c6e <printChar+0x222>
		if (orient==PORTRAIT){
 8001a6a:	4b95      	ldr	r3, [pc, #596]	; (8001cc0 <printChar+0x274>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d16c      	bne.n	8001b4c <printChar+0x100>
			SetXY(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	b298      	uxth	r0, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b299      	uxth	r1, r3
 8001a7a:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <printChar+0x278>)
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29c      	uxth	r4, r3
 8001a8c:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <printChar+0x278>)
 8001a8e:	795b      	ldrb	r3, [r3, #5]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4622      	mov	r2, r4
 8001aa0:	f7ff f9c8 	bl	8000e34 <SetXY>
			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <printChar+0x278>)
 8001aa8:	7992      	ldrb	r2, [r2, #6]
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4a85      	ldr	r2, [pc, #532]	; (8001cc4 <printChar+0x278>)
 8001ab0:	7912      	ldrb	r2, [r2, #4]
 8001ab2:	08d2      	lsrs	r2, r2, #3
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	4982      	ldr	r1, [pc, #520]	; (8001cc4 <printChar+0x278>)
 8001aba:	7949      	ldrb	r1, [r1, #5]
 8001abc:	b289      	uxth	r1, r1
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3304      	adds	r3, #4
 8001acc:	847b      	strh	r3, [r7, #34]	; 0x22
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ad2:	e02e      	b.n	8001b32 <printChar+0xe6>
				ch=pgm_read_byte(&cfont.font[temp]);
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <printChar+0x278>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	75fb      	strb	r3, [r7, #23]
				for(i=0;i<8;i++){
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ae6:	e01a      	b.n	8001b1e <printChar+0xd2>
					if((ch&(1<<(7-i)))!=0){
 8001ae8:	7dfa      	ldrb	r2, [r7, #23]
 8001aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	fa42 f303 	asr.w	r3, r2, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <printChar+0xbe>
						setPixel(f_color);
 8001afe:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <printChar+0x27c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff facc 	bl	80010a0 <setPixel>
 8001b08:	e004      	b.n	8001b14 <printChar+0xc8>
					}
					else{
						setPixel(b_color);
 8001b0a:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <printChar+0x280>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fac6 	bl	80010a0 <setPixel>
				for(i=0;i<8;i++){
 8001b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d9e0      	bls.n	8001ae8 <printChar+0x9c>
					}
				}
				temp++;
 8001b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b28:	3301      	adds	r3, #1
 8001b2a:	847b      	strh	r3, [r7, #34]	; 0x22
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++){
 8001b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b2e:	3301      	adds	r3, #1
 8001b30:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b34:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <printChar+0x278>)
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <printChar+0x278>)
 8001b40:	795b      	ldrb	r3, [r3, #5]
 8001b42:	fb03 f301 	mul.w	r3, r3, r1
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbc4      	blt.n	8001ad4 <printChar+0x88>
 8001b4a:	e121      	b.n	8001d90 <printChar+0x344>
			}
		}
		else{
			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <printChar+0x278>)
 8001b50:	7992      	ldrb	r2, [r2, #6]
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4a5b      	ldr	r2, [pc, #364]	; (8001cc4 <printChar+0x278>)
 8001b58:	7912      	ldrb	r2, [r2, #4]
 8001b5a:	08d2      	lsrs	r2, r2, #3
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	4958      	ldr	r1, [pc, #352]	; (8001cc4 <printChar+0x278>)
 8001b62:	7949      	ldrb	r1, [r1, #5]
 8001b64:	b289      	uxth	r1, r1
 8001b66:	fb01 f202 	mul.w	r2, r1, r2
 8001b6a:	b292      	uxth	r2, r2
 8001b6c:	fb02 f303 	mul.w	r3, r2, r3
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3304      	adds	r3, #4
 8001b74:	847b      	strh	r3, [r7, #34]	; 0x22
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8)){
 8001b76:	2300      	movs	r3, #0
 8001b78:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b7a:	e06b      	b.n	8001c54 <printChar+0x208>
				SetXY(x,y+(j/(cfont.x_size/8)),x+cfont.x_size-1,y+(j/(cfont.x_size/8)));
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	b298      	uxth	r0, r3
 8001b80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b82:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <printChar+0x278>)
 8001b84:	7912      	ldrb	r2, [r2, #4]
 8001b86:	08d2      	lsrs	r2, r2, #3
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b299      	uxth	r1, r3
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <printChar+0x278>)
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29c      	uxth	r4, r3
 8001baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bac:	4a45      	ldr	r2, [pc, #276]	; (8001cc4 <printChar+0x278>)
 8001bae:	7912      	ldrb	r2, [r2, #4]
 8001bb0:	08d2      	lsrs	r2, r2, #3
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	f7ff f936 	bl	8000e34 <SetXY>
				for (int zz=(cfont.x_size/8)-1; zz>=0; zz--){
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <printChar+0x278>)
 8001bca:	791b      	ldrb	r3, [r3, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	e02b      	b.n	8001c2e <printChar+0x1e2>
					ch=pgm_read_byte(&cfont.font[temp+zz]);
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <printChar+0x278>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	440a      	add	r2, r1
 8001be0:	4413      	add	r3, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	75fb      	strb	r3, [r7, #23]
					for(i=0;i<8;i++){
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bec:	e018      	b.n	8001c20 <printChar+0x1d4>
						if((ch&(1<<i))!=0){
 8001bee:	7dfa      	ldrb	r2, [r7, #23]
 8001bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf4:	fa42 f303 	asr.w	r3, r2, r3
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <printChar+0x1c0>
							setPixel(f_color);
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <printChar+0x27c>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fa4b 	bl	80010a0 <setPixel>
 8001c0a:	e004      	b.n	8001c16 <printChar+0x1ca>
						}
						else{
							setPixel(b_color);
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <printChar+0x280>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fa45 	bl	80010a0 <setPixel>
					for(i=0;i<8;i++){
 8001c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	d9e2      	bls.n	8001bee <printChar+0x1a2>
				for (int zz=(cfont.x_size/8)-1; zz>=0; zz--){
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dad0      	bge.n	8001bd6 <printChar+0x18a>
						}
					}
				}
				temp+=(cfont.x_size/8);
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <printChar+0x278>)
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c40:	4413      	add	r3, r2
 8001c42:	847b      	strh	r3, [r7, #34]	; 0x22
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8)){
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <printChar+0x278>)
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c50:	4413      	add	r3, r2
 8001c52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <printChar+0x278>)
 8001c58:	791b      	ldrb	r3, [r3, #4]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <printChar+0x278>)
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	fb03 f301 	mul.w	r3, r3, r1
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	db87      	blt.n	8001b7c <printChar+0x130>
 8001c6c:	e090      	b.n	8001d90 <printChar+0x344>
			}
		}
	}
	else{
		temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <printChar+0x278>)
 8001c72:	7992      	ldrb	r2, [r2, #6]
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <printChar+0x278>)
 8001c7a:	7912      	ldrb	r2, [r2, #4]
 8001c7c:	08d2      	lsrs	r2, r2, #3
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	b292      	uxth	r2, r2
 8001c82:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <printChar+0x278>)
 8001c84:	7949      	ldrb	r1, [r1, #5]
 8001c86:	b289      	uxth	r1, r1
 8001c88:	fb01 f202 	mul.w	r2, r1, r2
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3304      	adds	r3, #4
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22
		for(j=0;j<cfont.y_size;j++){
 8001c98:	2300      	movs	r3, #0
 8001c9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c9c:	e072      	b.n	8001d84 <printChar+0x338>
			for (int zz=0; zz<(cfont.x_size/8); zz++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	e05c      	b.n	8001d5e <printChar+0x312>
				ch=pgm_read_byte(&cfont.font[temp+zz]);
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <printChar+0x278>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	440a      	add	r2, r1
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	75fb      	strb	r3, [r7, #23]
				for(i=0;i<8;i++){
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cba:	e049      	b.n	8001d50 <printChar+0x304>
 8001cbc:	200000f4 	.word	0x200000f4
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	200000f8 	.word	0x200000f8
 8001cc8:	200000f2 	.word	0x200000f2
 8001ccc:	200000f0 	.word	0x200000f0
					SetXY(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b298      	uxth	r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b299      	uxth	r1, r3
 8001cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b29c      	uxth	r4, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4622      	mov	r2, r4
 8001d22:	f7ff f887 	bl	8000e34 <SetXY>
					if((ch&(1<<(7-i)))!=0){
 8001d26:	7dfa      	ldrb	r2, [r7, #23]
 8001d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d2c:	f1c3 0307 	rsb	r3, r3, #7
 8001d30:	fa42 f303 	asr.w	r3, r2, r3
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <printChar+0x2fa>
						setPixel(f_color);
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <printChar+0x350>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f9ad 	bl	80010a0 <setPixel>
				for(i=0;i<8;i++){
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	d9bb      	bls.n	8001cd0 <printChar+0x284>
			for (int zz=0; zz<(cfont.x_size/8); zz++){
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <printChar+0x354>)
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	db9a      	blt.n	8001ca4 <printChar+0x258>
					}
				}
			}
			temp+=(cfont.x_size/8);
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <printChar+0x354>)
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d7a:	4413      	add	r3, r2
 8001d7c:	847b      	strh	r3, [r7, #34]	; 0x22
		for(j=0;j<cfont.y_size;j++){
 8001d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <printChar+0x354>)
 8001d86:	795b      	ldrb	r3, [r3, #5]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d386      	bcc.n	8001c9e <printChar+0x252>
		}
	}
	clrXY();
 8001d90:	f7ff f8c0 	bl	8000f14 <clrXY>
}
 8001d94:	bf00      	nop
 8001d96:	372c      	adds	r7, #44	; 0x2c
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	200000f2 	.word	0x200000f2
 8001da0:	200000f8 	.word	0x200000f8
 8001da4:	00000000 	.word	0x00000000

08001da8 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg){
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b08c      	sub	sp, #48	; 0x30
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch;
	uint16_t temp;
	int newx,newy;
	double radian;
	radian=deg*0.0175;
 8001dba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001dbc:	f7fe fb8e 	bl	80004dc <__aeabi_i2d>
 8001dc0:	a38f      	add	r3, pc, #572	; (adr r3, 8002000 <rotateChar+0x258>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fbf3 	bl	80005b0 <__aeabi_dmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	e9c7 3408 	strd	r3, r4, [r7, #32]
	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	4a8c      	ldr	r2, [pc, #560]	; (8002008 <rotateChar+0x260>)
 8001dd6:	7992      	ldrb	r2, [r2, #6]
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4a8a      	ldr	r2, [pc, #552]	; (8002008 <rotateChar+0x260>)
 8001dde:	7912      	ldrb	r2, [r2, #4]
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	b292      	uxth	r2, r2
 8001de6:	4988      	ldr	r1, [pc, #544]	; (8002008 <rotateChar+0x260>)
 8001de8:	7949      	ldrb	r1, [r1, #5]
 8001dea:	b289      	uxth	r1, r1
 8001dec:	fb01 f202 	mul.w	r2, r1, r2
 8001df0:	b292      	uxth	r2, r2
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3304      	adds	r3, #4
 8001dfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(j=0;j<cfont.y_size;j++){
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e02:	e0ee      	b.n	8001fe2 <rotateChar+0x23a>
		for (int zz=0; zz<(cfont.x_size/8); zz++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e08:	e0d5      	b.n	8001fb6 <rotateChar+0x20e>
			ch=pgm_read_byte(&cfont.font[temp+zz]);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <rotateChar+0x260>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e12:	440a      	add	r2, r1
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++){
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e20:	e0c1      	b.n	8001fa6 <rotateChar+0x1fe>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001e22:	68b8      	ldr	r0, [r7, #8]
 8001e24:	f7fe fb5a 	bl	80004dc <__aeabi_i2d>
 8001e28:	4604      	mov	r4, r0
 8001e2a:	460d      	mov	r5, r1
 8001e2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	441a      	add	r2, r3
 8001e36:	4b74      	ldr	r3, [pc, #464]	; (8002008 <rotateChar+0x260>)
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	fb03 f301 	mul.w	r3, r3, r1
 8001e42:	4413      	add	r3, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb49 	bl	80004dc <__aeabi_i2d>
 8001e4a:	4680      	mov	r8, r0
 8001e4c:	4689      	mov	r9, r1
 8001e4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e52:	f003 f8d9 	bl	8005008 <cos>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe fba7 	bl	80005b0 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4690      	mov	r8, r2
 8001e68:	4699      	mov	r9, r3
 8001e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb34 	bl	80004dc <__aeabi_i2d>
 8001e74:	4682      	mov	sl, r0
 8001e76:	468b      	mov	fp, r1
 8001e78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e7c:	f003 f8fa 	bl	8005074 <sin>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4650      	mov	r0, sl
 8001e86:	4659      	mov	r1, fp
 8001e88:	f7fe fb92 	bl	80005b0 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4640      	mov	r0, r8
 8001e92:	4649      	mov	r1, r9
 8001e94:	f7fe f9d4 	bl	8000240 <__aeabi_dsub>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe f9d0 	bl	8000244 <__adddf3>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4621      	mov	r1, r4
 8001eac:	f7fe fe1a 	bl	8000ae4 <__aeabi_d2iz>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fb11 	bl	80004dc <__aeabi_i2d>
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460d      	mov	r5, r1
 8001ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb0a 	bl	80004dc <__aeabi_i2d>
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4689      	mov	r9, r1
 8001ecc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ed0:	f003 f89a 	bl	8005008 <cos>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4640      	mov	r0, r8
 8001eda:	4649      	mov	r1, r9
 8001edc:	f7fe fb68 	bl	80005b0 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	441a      	add	r2, r3
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <rotateChar+0x260>)
 8001ef4:	791b      	ldrb	r3, [r3, #4]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	fb03 f301 	mul.w	r3, r3, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe faeb 	bl	80004dc <__aeabi_i2d>
 8001f06:	4682      	mov	sl, r0
 8001f08:	468b      	mov	fp, r1
 8001f0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f0e:	f003 f8b1 	bl	8005074 <sin>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4650      	mov	r0, sl
 8001f18:	4659      	mov	r1, fp
 8001f1a:	f7fe fb49 	bl	80005b0 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4640      	mov	r0, r8
 8001f24:	4649      	mov	r1, r9
 8001f26:	f7fe f98d 	bl	8000244 <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f7fe f987 	bl	8000244 <__adddf3>
 8001f36:	4603      	mov	r3, r0
 8001f38:	460c      	mov	r4, r1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	f7fe fdd1 	bl	8000ae4 <__aeabi_d2iz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]

				SetXY(newx,newy,newx+1,newy+1);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	b298      	uxth	r0, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f7fe ff69 	bl	8000e34 <SetXY>

				if((ch&(1<<(7-i)))!=0){
 8001f62:	7ffa      	ldrb	r2, [r7, #31]
 8001f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f68:	f1c3 0307 	rsb	r3, r3, #7
 8001f6c:	fa42 f303 	asr.w	r3, r2, r3
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <rotateChar+0x1dc>
					setPixel(f_color);
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <rotateChar+0x264>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f88f 	bl	80010a0 <setPixel>
 8001f82:	e00b      	b.n	8001f9c <rotateChar+0x1f4>
				}
				else{
					if (!_transparent)
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <rotateChar+0x268>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <rotateChar+0x1f4>
						setPixel(b_color);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <rotateChar+0x26c>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f882 	bl	80010a0 <setPixel>
			for(i=0;i<8;i++){
 8001f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001faa:	2b07      	cmp	r3, #7
 8001fac:	f67f af39 	bls.w	8001e22 <rotateChar+0x7a>
		for (int zz=0; zz<(cfont.x_size/8); zz++){
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <rotateChar+0x260>)
 8001fb8:	791b      	ldrb	r3, [r3, #4]
 8001fba:	08db      	lsrs	r3, r3, #3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f6ff af21 	blt.w	8001e0a <rotateChar+0x62>
				}
			}
		}
		temp+=(cfont.x_size/8);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <rotateChar+0x260>)
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fd4:	4413      	add	r3, r2
 8001fd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(j=0;j<cfont.y_size;j++){
 8001fd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <rotateChar+0x260>)
 8001fe4:	795b      	ldrb	r3, [r3, #5]
 8001fe6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f4ff af0a 	bcc.w	8001e04 <rotateChar+0x5c>
	}
	clrXY();
 8001ff0:	f7fe ff90 	bl	8000f14 <clrXY>
}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	1eb851ec 	.word	0x1eb851ec
 8002004:	3f91eb85 	.word	0x3f91eb85
 8002008:	200000f8 	.word	0x200000f8
 800200c:	200000f2 	.word	0x200000f2
 8002010:	200000f4 	.word	0x200000f4
 8002014:	200000f0 	.word	0x200000f0

08002018 <print>:

void print(char *st, int x, int y, int deg){
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
	int stl, i;
	stl = strlen(st);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7fe f8fe 	bl	8000228 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	613b      	str	r3, [r7, #16]
	if (orient==PORTRAIT){
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <print+0x100>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d121      	bne.n	800207c <print+0x64>
		if (x==RIGHT)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f242 720f 	movw	r2, #9999	; 0x270f
 800203e:	4293      	cmp	r3, r2
 8002040:	d10a      	bne.n	8002058 <print+0x40>
			x=(disp_x_size+1)-(stl*cfont.x_size);
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <print+0x104>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a36      	ldr	r2, [pc, #216]	; (8002120 <print+0x108>)
 8002048:	7912      	ldrb	r2, [r2, #4]
 800204a:	4611      	mov	r1, r2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	fb02 f201 	mul.w	r2, r2, r1
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	3301      	adds	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
		if (x==CENTER)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f242 720e 	movw	r2, #9998	; 0x270e
 800205e:	4293      	cmp	r3, r2
 8002060:	d12d      	bne.n	80020be <print+0xa6>
			x=((disp_x_size+1)-(stl*cfont.x_size))/2;
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <print+0x104>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <print+0x108>)
 8002068:	7912      	ldrb	r2, [r2, #4]
 800206a:	4611      	mov	r1, r2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	fb02 f201 	mul.w	r2, r2, r1
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	3301      	adds	r3, #1
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	e020      	b.n	80020be <print+0xa6>
	}
	else{
		if (x==RIGHT)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002082:	4293      	cmp	r3, r2
 8002084:	d10a      	bne.n	800209c <print+0x84>
			x=(disp_y_size+1)-(stl*cfont.x_size);
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <print+0x10c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a25      	ldr	r2, [pc, #148]	; (8002120 <print+0x108>)
 800208c:	7912      	ldrb	r2, [r2, #4]
 800208e:	4611      	mov	r1, r2
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fb02 f201 	mul.w	r2, r2, r1
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
		if (x==CENTER)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f242 720e 	movw	r2, #9998	; 0x270e
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10b      	bne.n	80020be <print+0xa6>
			x=((disp_y_size+1)-(stl*cfont.x_size))/2;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <print+0x10c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <print+0x108>)
 80020ac:	7912      	ldrb	r2, [r2, #4]
 80020ae:	4611      	mov	r1, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	fb02 f201 	mul.w	r2, r2, r1
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	3301      	adds	r3, #1
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
	}
	for (i=0; i<stl; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e021      	b.n	8002108 <print+0xf0>
		if (deg==0)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d110      	bne.n	80020ec <print+0xd4>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	60fa      	str	r2, [r7, #12]
 80020d0:	7818      	ldrb	r0, [r3, #0]
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <print+0x108>)
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fb03 f202 	mul.w	r2, r3, r2
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7ff fcb1 	bl	8001a4c <printChar>
 80020ea:	e00a      	b.n	8002102 <print+0xea>
		else
			rotateChar(*st++, x, y, i, deg);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	60fa      	str	r2, [r7, #12]
 80020f2:	7818      	ldrb	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	f7ff fe53 	bl	8001da8 <rotateChar>
	for (i=0; i<stl; i++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbd9      	blt.n	80020c4 <print+0xac>
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000008 	.word	0x20000008
 800211c:	20000000 	.word	0x20000000
 8002120:	200000f8 	.word	0x200000f8
 8002124:	20000004 	.word	0x20000004

08002128 <printNumI>:
	st.toCharArray(buf, st.length()+1);
	print(buf, x, y, deg);
}
*/

void printNumI(long num, int x, int y, int length, char filler){
 8002128:	b580      	push	{r7, lr}
 800212a:	b098      	sub	sp, #96	; 0x60
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	char buf[25];
	char st[27];
	bool neg=false;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int c=0, f=0;
 800213c:	2300      	movs	r3, #0
 800213e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002140:	2300      	movs	r3, #0
 8002142:	657b      	str	r3, [r7, #84]	; 0x54
	if (num==0){
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d128      	bne.n	800219c <printNumI+0x74>
		if (length!=0){
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <printNumI+0x6a>
			for (c=0; c<(length-1); c++)
 8002150:	2300      	movs	r3, #0
 8002152:	65bb      	str	r3, [r7, #88]	; 0x58
 8002154:	e009      	b.n	800216a <printNumI+0x42>
				st[c]=filler;
 8002156:	f107 0214 	add.w	r2, r7, #20
 800215a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215c:	4413      	add	r3, r2
 800215e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002162:	701a      	strb	r2, [r3, #0]
			for (c=0; c<(length-1); c++)
 8002164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002166:	3301      	adds	r3, #1
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <printNumI+0x2e>
			st[c]=48;
 8002174:	f107 0214 	add.w	r2, r7, #20
 8002178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800217a:	4413      	add	r3, r2
 800217c:	2230      	movs	r2, #48	; 0x30
 800217e:	701a      	strb	r2, [r3, #0]
			st[c+1]=0;
 8002180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002182:	3301      	adds	r3, #1
 8002184:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002188:	4413      	add	r3, r2
 800218a:	2200      	movs	r2, #0
 800218c:	f803 2c4c 	strb.w	r2, [r3, #-76]
 8002190:	e098      	b.n	80022c4 <printNumI+0x19c>
		}
		else{
			st[0]=48;
 8002192:	2330      	movs	r3, #48	; 0x30
 8002194:	753b      	strb	r3, [r7, #20]
			st[1]=0;
 8002196:	2300      	movs	r3, #0
 8002198:	757b      	strb	r3, [r7, #21]
 800219a:	e093      	b.n	80022c4 <printNumI+0x19c>
		}
	}
	else{
		if (num<0){
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da33      	bge.n	800220a <printNumI+0xe2>
			neg=true;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			num=-num;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	425b      	negs	r3, r3
 80021ac:	60fb      	str	r3, [r7, #12]
		}
		while (num>0){
 80021ae:	e02c      	b.n	800220a <printNumI+0xe2>
			buf[c]=48+(num % 10);
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <printNumI+0x1b4>)
 80021b4:	fb83 1302 	smull	r1, r3, r3, r2
 80021b8:	1099      	asrs	r1, r3, #2
 80021ba:	17d3      	asrs	r3, r2, #31
 80021bc:	1ac9      	subs	r1, r1, r3
 80021be:	460b      	mov	r3, r1
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	1ad1      	subs	r1, r2, r3
 80021c8:	b2cb      	uxtb	r3, r1
 80021ca:	3330      	adds	r3, #48	; 0x30
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d4:	4413      	add	r3, r2
 80021d6:	460a      	mov	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
			c++;
 80021da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021dc:	3301      	adds	r3, #1
 80021de:	65bb      	str	r3, [r7, #88]	; 0x58
			num=(num-(num % 10))/10;
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <printNumI+0x1b4>)
 80021e4:	fb83 2301 	smull	r2, r3, r3, r1
 80021e8:	109a      	asrs	r2, r3, #2
 80021ea:	17cb      	asrs	r3, r1, #31
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	1aca      	subs	r2, r1, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	4a37      	ldr	r2, [pc, #220]	; (80022dc <printNumI+0x1b4>)
 80021fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002202:	1092      	asrs	r2, r2, #2
 8002204:	17db      	asrs	r3, r3, #31
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	60fb      	str	r3, [r7, #12]
		while (num>0){
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	dccf      	bgt.n	80021b0 <printNumI+0x88>
		}
		buf[c]=0;
 8002210:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002216:	4413      	add	r3, r2
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

		if (neg){
 800221c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <printNumI+0x100>
			st[0]=45;
 8002224:	232d      	movs	r3, #45	; 0x2d
 8002226:	753b      	strb	r3, [r7, #20]
		}
		if (length>(c+neg)){
 8002228:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800222c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800222e:	4413      	add	r3, r2
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	dd1c      	ble.n	8002270 <printNumI+0x148>
			for (int i=0; i<(length-c-neg); i++){
 8002236:	2300      	movs	r3, #0
 8002238:	653b      	str	r3, [r7, #80]	; 0x50
 800223a:	e010      	b.n	800225e <printNumI+0x136>
				st[i+neg]=filler;
 800223c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002242:	4413      	add	r3, r2
 8002244:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002248:	4413      	add	r3, r2
 800224a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800224e:	f803 2c4c 	strb.w	r2, [r3, #-76]
				f++;
 8002252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002254:	3301      	adds	r3, #1
 8002256:	657b      	str	r3, [r7, #84]	; 0x54
			for (int i=0; i<(length-c-neg); i++){
 8002258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225a:	3301      	adds	r3, #1
 800225c:	653b      	str	r3, [r7, #80]	; 0x50
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002262:	1ad2      	subs	r2, r2, r3
 8002264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800226c:	429a      	cmp	r2, r3
 800226e:	dbe5      	blt.n	800223c <printNumI+0x114>
			}
		}
		for (int i=0; i<c; i++){
 8002270:	2300      	movs	r3, #0
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002274:	e016      	b.n	80022a4 <printNumI+0x17c>
			st[i+neg+f]=buf[c-i-1];
 8002276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 8002282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002284:	4419      	add	r1, r3
 8002286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002288:	440b      	add	r3, r1
 800228a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800228e:	440a      	add	r2, r1
 8002290:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8002294:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002298:	440b      	add	r3, r1
 800229a:	f803 2c4c 	strb.w	r2, [r3, #-76]
		for (int i=0; i<c; i++){
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	3301      	adds	r3, #1
 80022a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbe4      	blt.n	8002276 <printNumI+0x14e>
		}
		st[c+neg+f]=0;
 80022ac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80022b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b2:	441a      	add	r2, r3
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	4413      	add	r3, r2
 80022b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022bc:	4413      	add	r3, r2
 80022be:	2200      	movs	r2, #0
 80022c0:	f803 2c4c 	strb.w	r2, [r3, #-76]
	}
	print(st,x,y,0);
 80022c4:	f107 0014 	add.w	r0, r7, #20
 80022c8:	2300      	movs	r3, #0
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	f7ff fea3 	bl	8002018 <print>
}
 80022d2:	bf00      	nop
 80022d4:	3760      	adds	r7, #96	; 0x60
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	66666667 	.word	0x66666667

080022e0 <setFont>:
	}

	print(st,x,y,0);
}

void setFont(uint8_t* font){
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <setFont+0x40>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
	cfont.x_size=fontbyte(0);
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <setFont+0x40>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <setFont+0x40>)
 80022f6:	711a      	strb	r2, [r3, #4]
	cfont.y_size=fontbyte(1);
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <setFont+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	785a      	ldrb	r2, [r3, #1]
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <setFont+0x40>)
 8002300:	715a      	strb	r2, [r3, #5]
	cfont.offset=fontbyte(2);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <setFont+0x40>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	789a      	ldrb	r2, [r3, #2]
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <setFont+0x40>)
 800230a:	719a      	strb	r2, [r3, #6]
	cfont.numchars=fontbyte(3);
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <setFont+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	78da      	ldrb	r2, [r3, #3]
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <setFont+0x40>)
 8002314:	71da      	strb	r2, [r3, #7]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	200000f8 	.word	0x200000f8

08002324 <InitLCD>:

uint8_t getFontYsize(){
	return cfont.y_size;
}

void InitLCD(){
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0

	ADDR_CMD = 0x29; //set_display_on / display on

	ADDR_CMD = 0x2C; //write_memory_start / display on
*/
	ADDR_CMD = 0x11; //Exit Sleep
 8002328:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800232c:	2211      	movs	r2, #17
 800232e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8002330:	2064      	movs	r0, #100	; 0x64
 8002332:	f001 f9fb 	bl	800372c <HAL_Delay>
	ADDR_CMD = 0x36;  // очень важен, иначе перевернуто и цветопередача не та
 8002336:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800233a:	2236      	movs	r2, #54	; 0x36
 800233c:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = 0xE8;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <InitLCD+0x68>)
 8002340:	22e8      	movs	r2, #232	; 0xe8
 8002342:	701a      	strb	r2, [r3, #0]
	ADDR_CMD = 0x3A;  // очень важен, иначе черно-белые кракозябры
 8002344:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002348:	223a      	movs	r2, #58	; 0x3a
 800234a:	701a      	strb	r2, [r3, #0]
	ADDR_DATA = 0x05;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <InitLCD+0x68>)
 800234e:	2205      	movs	r2, #5
 8002350:	701a      	strb	r2, [r3, #0]
	ADDR_CMD = 0x29; //display on
 8002352:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002356:	2229      	movs	r2, #41	; 0x29
 8002358:	701a      	strb	r2, [r3, #0]
	ADDR_CMD = 0x2C; //display on
 800235a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800235e:	222c      	movs	r2, #44	; 0x2c
 8002360:	701a      	strb	r2, [r3, #0]

	setColorRGB(255, 255, 255);
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	21ff      	movs	r1, #255	; 0xff
 8002366:	20ff      	movs	r0, #255	; 0xff
 8002368:	f7fe fe1c 	bl	8000fa4 <setColorRGB>
	setBackColorRGB(0, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2000      	movs	r0, #0
 8002372:	f7fe fe41 	bl	8000ff8 <setBackColorRGB>
	cfont.font=0;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <InitLCD+0x6c>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
	_transparent = false;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <InitLCD+0x70>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	orient = PORTRAIT;
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <InitLCD+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	60020000 	.word	0x60020000
 8002390:	200000f8 	.word	0x200000f8
 8002394:	200000f4 	.word	0x200000f4
 8002398:	20000008 	.word	0x20000008
 800239c:	00000000 	.word	0x00000000

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80023a6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a8:	f001 f95e 	bl	8003668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ac:	f001 f852 	bl	8003454 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  srand (HAL_GetTick());
 80023b0:	f001 f9b2 	bl	8003718 <HAL_GetTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f980 	bl	80046bc <srand>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f7fe fca6 	bl	8000d0c <MX_GPIO_Init>
  MX_FSMC_Init();
 80023c0:	f7fe fbd8 	bl	8000b74 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  InitLCD();
 80023c4:	f7ff ffae 	bl	8002324 <InitLCD>
  setFont(SmallFont);
 80023c8:	48e5      	ldr	r0, [pc, #916]	; (8002760 <main+0x3c0>)
 80023ca:	f7ff ff89 	bl	80022e0 <setFont>
  uint16_t buf[478];
  uint16_t x, x2;
  uint16_t y, y2;
  uint16_t r;
  sprintf(buf,"%d",x);
 80023ce:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 80023d2:	463b      	mov	r3, r7
 80023d4:	49e3      	ldr	r1, [pc, #908]	; (8002764 <main+0x3c4>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 f9fc 	bl	80047d4 <siprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//******************************************************************************************************************
	LCD_clrScr();
 80023dc:	f7fe fdbe 	bl	8000f5c <LCD_clrScr>
	setColorRGB(255, 0, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	20ff      	movs	r0, #255	; 0xff
 80023e6:	f7fe fddd 	bl	8000fa4 <setColorRGB>
	fillRect(0, 0, 479, 13);
 80023ea:	230d      	movs	r3, #13
 80023ec:	f240 12df 	movw	r2, #479	; 0x1df
 80023f0:	2100      	movs	r1, #0
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff f858 	bl	80014a8 <fillRect>
	setColorRGB(64, 64, 64);
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	2040      	movs	r0, #64	; 0x40
 80023fe:	f7fe fdd1 	bl	8000fa4 <setColorRGB>
	fillRect(0, 306, 479, 319);
 8002402:	f240 133f 	movw	r3, #319	; 0x13f
 8002406:	f240 12df 	movw	r2, #479	; 0x1df
 800240a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff f84a 	bl	80014a8 <fillRect>
	setColorRGB(255, 255, 255);
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	21ff      	movs	r1, #255	; 0xff
 8002418:	20ff      	movs	r0, #255	; 0xff
 800241a:	f7fe fdc3 	bl	8000fa4 <setColorRGB>
	setBackColorRGB(255, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	20ff      	movs	r0, #255	; 0xff
 8002424:	f7fe fde8 	bl	8000ff8 <setBackColorRGB>
	print("* Universal Color TFT Display Library *", CENTER, 1,0);
 8002428:	2300      	movs	r3, #0
 800242a:	2201      	movs	r2, #1
 800242c:	f242 710e 	movw	r1, #9998	; 0x270e
 8002430:	48cd      	ldr	r0, [pc, #820]	; (8002768 <main+0x3c8>)
 8002432:	f7ff fdf1 	bl	8002018 <print>
	setBackColorRGB(64, 64, 64);
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	2140      	movs	r1, #64	; 0x40
 800243a:	2040      	movs	r0, #64	; 0x40
 800243c:	f7fe fddc 	bl	8000ff8 <setBackColorRGB>
	setColorRGB(255,255,0);
 8002440:	2200      	movs	r2, #0
 8002442:	21ff      	movs	r1, #255	; 0xff
 8002444:	20ff      	movs	r0, #255	; 0xff
 8002446:	f7fe fdad 	bl	8000fa4 <setColorRGB>
	print("<http://electronics.henningkarlsen.com>", CENTER, 307,0);
 800244a:	2300      	movs	r3, #0
 800244c:	f240 1233 	movw	r2, #307	; 0x133
 8002450:	f242 710e 	movw	r1, #9998	; 0x270e
 8002454:	48c5      	ldr	r0, [pc, #788]	; (800276c <main+0x3cc>)
 8002456:	f7ff fddf 	bl	8002018 <print>
    setColorRGB(0, 0, 255);
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	2100      	movs	r1, #0
 800245e:	2000      	movs	r0, #0
 8002460:	f7fe fda0 	bl	8000fa4 <setColorRGB>
    drawRect(0, 14, 479, 305);
 8002464:	f240 1331 	movw	r3, #305	; 0x131
 8002468:	f240 12df 	movw	r2, #479	; 0x1df
 800246c:	210e      	movs	r1, #14
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe ff6a 	bl	8001348 <drawRect>
// Draw crosshairs
    setColorRGB(0, 0, 255);
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	2100      	movs	r1, #0
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe fd93 	bl	8000fa4 <setColorRGB>
    setBackColorRGB(0, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fdb8 	bl	8000ff8 <setBackColorRGB>
    drawLine(239, 15, 239, 304);
 8002488:	f44f 7398 	mov.w	r3, #304	; 0x130
 800248c:	22ef      	movs	r2, #239	; 0xef
 800248e:	210f      	movs	r1, #15
 8002490:	20ef      	movs	r0, #239	; 0xef
 8002492:	f7fe fea1 	bl	80011d8 <drawLine>
    drawLine(1, 159, 478, 159);
 8002496:	239f      	movs	r3, #159	; 0x9f
 8002498:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800249c:	219f      	movs	r1, #159	; 0x9f
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe fe9a 	bl	80011d8 <drawLine>
    for (int i=9; i<470; i+=10)
 80024a4:	2309      	movs	r3, #9
 80024a6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80024aa:	e00c      	b.n	80024c6 <main+0x126>
    	drawLine(i, 157, i, 161);
 80024ac:	23a1      	movs	r3, #161	; 0xa1
 80024ae:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80024b2:	219d      	movs	r1, #157	; 0x9d
 80024b4:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 80024b8:	f7fe fe8e 	bl	80011d8 <drawLine>
    for (int i=9; i<470; i+=10)
 80024bc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80024c0:	330a      	adds	r3, #10
 80024c2:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80024c6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80024ca:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 80024ce:	dbed      	blt.n	80024ac <main+0x10c>
    for (int i=19; i<220; i+=10)
 80024d0:	2313      	movs	r3, #19
 80024d2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80024d6:	e00c      	b.n	80024f2 <main+0x152>
    	drawLine(237, i, 241, i);
 80024d8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024dc:	22f1      	movs	r2, #241	; 0xf1
 80024de:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 80024e2:	20ed      	movs	r0, #237	; 0xed
 80024e4:	f7fe fe78 	bl	80011d8 <drawLine>
    for (int i=19; i<220; i+=10)
 80024e8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024ec:	330a      	adds	r3, #10
 80024ee:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80024f2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024f6:	2bdb      	cmp	r3, #219	; 0xdb
 80024f8:	ddee      	ble.n	80024d8 <main+0x138>
// Draw sin-, cos- and tan-lines
    setColorRGB(0,255,255);
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	21ff      	movs	r1, #255	; 0xff
 80024fe:	2000      	movs	r0, #0
 8002500:	f7fe fd50 	bl	8000fa4 <setColorRGB>
    print("Sin", 5, 15,0);
 8002504:	2300      	movs	r3, #0
 8002506:	220f      	movs	r2, #15
 8002508:	2105      	movs	r1, #5
 800250a:	4899      	ldr	r0, [pc, #612]	; (8002770 <main+0x3d0>)
 800250c:	f7ff fd84 	bl	8002018 <print>
    for (int i=1; i<478; i++){
 8002510:	2301      	movs	r3, #1
 8002512:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002516:	e03f      	b.n	8002598 <main+0x1f8>
      drawPixel(i,159+(sin(((i*1.13)*3.14)/180)*95));
 8002518:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 800251c:	f7fd ffde 	bl	80004dc <__aeabi_i2d>
 8002520:	a387      	add	r3, pc, #540	; (adr r3, 8002740 <main+0x3a0>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f843 	bl	80005b0 <__aeabi_dmul>
 800252a:	4603      	mov	r3, r0
 800252c:	460c      	mov	r4, r1
 800252e:	4618      	mov	r0, r3
 8002530:	4621      	mov	r1, r4
 8002532:	a385      	add	r3, pc, #532	; (adr r3, 8002748 <main+0x3a8>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f83a 	bl	80005b0 <__aeabi_dmul>
 800253c:	4603      	mov	r3, r0
 800253e:	460c      	mov	r4, r1
 8002540:	4618      	mov	r0, r3
 8002542:	4621      	mov	r1, r4
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b8a      	ldr	r3, [pc, #552]	; (8002774 <main+0x3d4>)
 800254a:	f7fe f95b 	bl	8000804 <__aeabi_ddiv>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	f002 fd8d 	bl	8005074 <sin>
 800255a:	a37d      	add	r3, pc, #500	; (adr r3, 8002750 <main+0x3b0>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f826 	bl	80005b0 <__aeabi_dmul>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	4618      	mov	r0, r3
 800256a:	4621      	mov	r1, r4
 800256c:	a37a      	add	r3, pc, #488	; (adr r3, 8002758 <main+0x3b8>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fd fe67 	bl	8000244 <__adddf3>
 8002576:	4603      	mov	r3, r0
 8002578:	460c      	mov	r4, r1
 800257a:	4618      	mov	r0, r3
 800257c:	4621      	mov	r1, r4
 800257e:	f7fe fab1 	bl	8000ae4 <__aeabi_d2iz>
 8002582:	4603      	mov	r3, r0
 8002584:	4619      	mov	r1, r3
 8002586:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 800258a:	f7fe fd99 	bl	80010c0 <drawPixel>
    for (int i=1; i<478; i++){
 800258e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002592:	3301      	adds	r3, #1
 8002594:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002598:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800259c:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 80025a0:	dbba      	blt.n	8002518 <main+0x178>
    }
    setColorRGB(255,0,0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	20ff      	movs	r0, #255	; 0xff
 80025a8:	f7fe fcfc 	bl	8000fa4 <setColorRGB>
    print("Cos", 5, 27,0);
 80025ac:	2300      	movs	r3, #0
 80025ae:	221b      	movs	r2, #27
 80025b0:	2105      	movs	r1, #5
 80025b2:	4871      	ldr	r0, [pc, #452]	; (8002778 <main+0x3d8>)
 80025b4:	f7ff fd30 	bl	8002018 <print>
    for (int i=1; i<478; i++){
 80025b8:	2301      	movs	r3, #1
 80025ba:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80025be:	e03f      	b.n	8002640 <main+0x2a0>
      drawPixel(i,159+(cos(((i*1.13)*3.14)/180)*95));
 80025c0:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 80025c4:	f7fd ff8a 	bl	80004dc <__aeabi_i2d>
 80025c8:	a35d      	add	r3, pc, #372	; (adr r3, 8002740 <main+0x3a0>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd ffef 	bl	80005b0 <__aeabi_dmul>
 80025d2:	4603      	mov	r3, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	4618      	mov	r0, r3
 80025d8:	4621      	mov	r1, r4
 80025da:	a35b      	add	r3, pc, #364	; (adr r3, 8002748 <main+0x3a8>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fd ffe6 	bl	80005b0 <__aeabi_dmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	4618      	mov	r0, r3
 80025ea:	4621      	mov	r1, r4
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b60      	ldr	r3, [pc, #384]	; (8002774 <main+0x3d4>)
 80025f2:	f7fe f907 	bl	8000804 <__aeabi_ddiv>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	4618      	mov	r0, r3
 80025fc:	4621      	mov	r1, r4
 80025fe:	f002 fd03 	bl	8005008 <cos>
 8002602:	a353      	add	r3, pc, #332	; (adr r3, 8002750 <main+0x3b0>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fd ffd2 	bl	80005b0 <__aeabi_dmul>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	4618      	mov	r0, r3
 8002612:	4621      	mov	r1, r4
 8002614:	a350      	add	r3, pc, #320	; (adr r3, 8002758 <main+0x3b8>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd fe13 	bl	8000244 <__adddf3>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	4618      	mov	r0, r3
 8002624:	4621      	mov	r1, r4
 8002626:	f7fe fa5d 	bl	8000ae4 <__aeabi_d2iz>
 800262a:	4603      	mov	r3, r0
 800262c:	4619      	mov	r1, r3
 800262e:	f8d7 03fc 	ldr.w	r0, [r7, #1020]	; 0x3fc
 8002632:	f7fe fd45 	bl	80010c0 <drawPixel>
    for (int i=1; i<478; i++){
 8002636:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800263a:	3301      	adds	r3, #1
 800263c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002640:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002644:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8002648:	dbba      	blt.n	80025c0 <main+0x220>
    }
    setColorRGB(255,255,0);
 800264a:	2200      	movs	r2, #0
 800264c:	21ff      	movs	r1, #255	; 0xff
 800264e:	20ff      	movs	r0, #255	; 0xff
 8002650:	f7fe fca8 	bl	8000fa4 <setColorRGB>
    print("Tan", 5, 39,0);
 8002654:	2300      	movs	r3, #0
 8002656:	2227      	movs	r2, #39	; 0x27
 8002658:	2105      	movs	r1, #5
 800265a:	4848      	ldr	r0, [pc, #288]	; (800277c <main+0x3dc>)
 800265c:	f7ff fcdc 	bl	8002018 <print>
    for (int i=1; i<478; i++){
 8002660:	2301      	movs	r3, #1
 8002662:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002666:	e036      	b.n	80026d6 <main+0x336>
      drawPixel(i,159+(tan(((i*1.13)*3.14)/180)));
 8002668:	f8d7 03f8 	ldr.w	r0, [r7, #1016]	; 0x3f8
 800266c:	f7fd ff36 	bl	80004dc <__aeabi_i2d>
 8002670:	a333      	add	r3, pc, #204	; (adr r3, 8002740 <main+0x3a0>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ff9b 	bl	80005b0 <__aeabi_dmul>
 800267a:	4603      	mov	r3, r0
 800267c:	460c      	mov	r4, r1
 800267e:	4618      	mov	r0, r3
 8002680:	4621      	mov	r1, r4
 8002682:	a331      	add	r3, pc, #196	; (adr r3, 8002748 <main+0x3a8>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ff92 	bl	80005b0 <__aeabi_dmul>
 800268c:	4603      	mov	r3, r0
 800268e:	460c      	mov	r4, r1
 8002690:	4618      	mov	r0, r3
 8002692:	4621      	mov	r1, r4
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <main+0x3d4>)
 800269a:	f7fe f8b3 	bl	8000804 <__aeabi_ddiv>
 800269e:	4603      	mov	r3, r0
 80026a0:	460c      	mov	r4, r1
 80026a2:	4618      	mov	r0, r3
 80026a4:	4621      	mov	r1, r4
 80026a6:	f002 fd1f 	bl	80050e8 <tan>
 80026aa:	a32b      	add	r3, pc, #172	; (adr r3, 8002758 <main+0x3b8>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd fdc8 	bl	8000244 <__adddf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	4618      	mov	r0, r3
 80026ba:	4621      	mov	r1, r4
 80026bc:	f7fe fa12 	bl	8000ae4 <__aeabi_d2iz>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	f8d7 03f8 	ldr.w	r0, [r7, #1016]	; 0x3f8
 80026c8:	f7fe fcfa 	bl	80010c0 <drawPixel>
    for (int i=1; i<478; i++){
 80026cc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80026d0:	3301      	adds	r3, #1
 80026d2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 80026d6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 80026da:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 80026de:	dbc3      	blt.n	8002668 <main+0x2c8>
    }
    HAL_Delay(1000);
 80026e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e4:	f001 f822 	bl	800372c <HAL_Delay>
    setColorRGB(0,0,0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe fc59 	bl	8000fa4 <setColorRGB>
    fillRect(1,15,478,304);
 80026f2:	f44f 7398 	mov.w	r3, #304	; 0x130
 80026f6:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80026fa:	210f      	movs	r1, #15
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7fe fed3 	bl	80014a8 <fillRect>
    setColorRGB(0, 0, 255);
 8002702:	22ff      	movs	r2, #255	; 0xff
 8002704:	2100      	movs	r1, #0
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fc4c 	bl	8000fa4 <setColorRGB>
    setBackColorRGB(0, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe fc71 	bl	8000ff8 <setBackColorRGB>
    drawLine(239, 15, 239, 304);
 8002716:	f44f 7398 	mov.w	r3, #304	; 0x130
 800271a:	22ef      	movs	r2, #239	; 0xef
 800271c:	210f      	movs	r1, #15
 800271e:	20ef      	movs	r0, #239	; 0xef
 8002720:	f7fe fd5a 	bl	80011d8 <drawLine>
    drawLine(1, 159, 478, 159);
 8002724:	239f      	movs	r3, #159	; 0x9f
 8002726:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800272a:	219f      	movs	r1, #159	; 0x9f
 800272c:	2001      	movs	r0, #1
 800272e:	f7fe fd53 	bl	80011d8 <drawLine>
// Draw a moving sinewave
     x=1;
 8002732:	2301      	movs	r3, #1
 8002734:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
      for (int i=1; i<(478*15); i++){
 8002738:	2301      	movs	r3, #1
 800273a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800273e:	e0b5      	b.n	80028ac <main+0x50c>
 8002740:	e147ae14 	.word	0xe147ae14
 8002744:	3ff2147a 	.word	0x3ff2147a
 8002748:	51eb851f 	.word	0x51eb851f
 800274c:	40091eb8 	.word	0x40091eb8
 8002750:	00000000 	.word	0x00000000
 8002754:	4057c000 	.word	0x4057c000
 8002758:	00000000 	.word	0x00000000
 800275c:	4063e000 	.word	0x4063e000
 8002760:	080064ec 	.word	0x080064ec
 8002764:	08006438 	.word	0x08006438
 8002768:	0800643c 	.word	0x0800643c
 800276c:	08006464 	.word	0x08006464
 8002770:	0800648c 	.word	0x0800648c
 8002774:	40668000 	.word	0x40668000
 8002778:	08006490 	.word	0x08006490
 800277c:	08006494 	.word	0x08006494
        x++;
 8002780:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002784:	3301      	adds	r3, #1
 8002786:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
        if (x==479)
 800278a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800278e:	f240 12df 	movw	r2, #479	; 0x1df
 8002792:	4293      	cmp	r3, r2
 8002794:	d102      	bne.n	800279c <main+0x3fc>
          x=1;
 8002796:	2301      	movs	r3, #1
 8002798:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
        if (i>479)
 800279c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80027a0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80027a4:	db21      	blt.n	80027ea <main+0x44a>
        {
          if ((x==239)||(buf[x-1]==159))
 80027a6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027aa:	2bef      	cmp	r3, #239	; 0xef
 80027ac:	d007      	beq.n	80027be <main+0x41e>
 80027ae:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	463b      	mov	r3, r7
 80027b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027ba:	2b9f      	cmp	r3, #159	; 0x9f
 80027bc:	d105      	bne.n	80027ca <main+0x42a>
          	setColorRGB(0,0,255);
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	2100      	movs	r1, #0
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fbee 	bl	8000fa4 <setColorRGB>
 80027c8:	e004      	b.n	80027d4 <main+0x434>
          else
          	setColorRGB(0,0,0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fbe8 	bl	8000fa4 <setColorRGB>
          drawPixel(x,buf[x-1]);
 80027d4:	f8b7 040e 	ldrh.w	r0, [r7, #1038]	; 0x40e
 80027d8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	463b      	mov	r3, r7
 80027e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe fc6b 	bl	80010c0 <drawPixel>
        }
        setColorRGB(0,255,255);
 80027ea:	22ff      	movs	r2, #255	; 0xff
 80027ec:	21ff      	movs	r1, #255	; 0xff
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fbd8 	bl	8000fa4 <setColorRGB>
        y=159+(sin(((i*0.7)*3.14)/180)*(90-(i / 100)));
 80027f4:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80027f8:	f7fd fe70 	bl	80004dc <__aeabi_i2d>
 80027fc:	a3dc      	add	r3, pc, #880	; (adr r3, 8002b70 <main+0x7d0>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd fed5 	bl	80005b0 <__aeabi_dmul>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	4618      	mov	r0, r3
 800280c:	4621      	mov	r1, r4
 800280e:	a3da      	add	r3, pc, #872	; (adr r3, 8002b78 <main+0x7d8>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fecc 	bl	80005b0 <__aeabi_dmul>
 8002818:	4603      	mov	r3, r0
 800281a:	460c      	mov	r4, r1
 800281c:	4618      	mov	r0, r3
 800281e:	4621      	mov	r1, r4
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4bd8      	ldr	r3, [pc, #864]	; (8002b88 <main+0x7e8>)
 8002826:	f7fd ffed 	bl	8000804 <__aeabi_ddiv>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	4618      	mov	r0, r3
 8002830:	4621      	mov	r1, r4
 8002832:	f002 fc1f 	bl	8005074 <sin>
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800283e:	4ad3      	ldr	r2, [pc, #844]	; (8002b8c <main+0x7ec>)
 8002840:	fb82 1203 	smull	r1, r2, r2, r3
 8002844:	1152      	asrs	r2, r2, #5
 8002846:	17db      	asrs	r3, r3, #31
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	335a      	adds	r3, #90	; 0x5a
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe45 	bl	80004dc <__aeabi_i2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fea9 	bl	80005b0 <__aeabi_dmul>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4618      	mov	r0, r3
 8002864:	4621      	mov	r1, r4
 8002866:	a3c6      	add	r3, pc, #792	; (adr r3, 8002b80 <main+0x7e0>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fcea 	bl	8000244 <__adddf3>
 8002870:	4603      	mov	r3, r0
 8002872:	460c      	mov	r4, r1
 8002874:	4618      	mov	r0, r3
 8002876:	4621      	mov	r1, r4
 8002878:	f7fe f95c 	bl	8000b34 <__aeabi_d2uiz>
 800287c:	4603      	mov	r3, r0
 800287e:	f8a7 33c2 	strh.w	r3, [r7, #962]	; 0x3c2
        drawPixel(x,y);
 8002882:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002886:	f8b7 23c2 	ldrh.w	r2, [r7, #962]	; 0x3c2
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fc17 	bl	80010c0 <drawPixel>
        buf[x-1]=y;
 8002892:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	463b      	mov	r3, r7
 800289a:	f8b7 13c2 	ldrh.w	r1, [r7, #962]	; 0x3c2
 800289e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for (int i=1; i<(478*15); i++){
 80028a2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80028a6:	3301      	adds	r3, #1
 80028a8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80028ac:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80028b0:	f641 4201 	movw	r2, #7169	; 0x1c01
 80028b4:	4293      	cmp	r3, r2
 80028b6:	f77f af63 	ble.w	8002780 <main+0x3e0>
      }
 //-------------------------------------------------------------------------------------------------
    HAL_Delay(1000);
 80028ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028be:	f000 ff35 	bl	800372c <HAL_Delay>
    setColorRGB(0,0,0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe fb6c 	bl	8000fa4 <setColorRGB>
    fillRect(1,15,478,304);
 80028cc:	f44f 7398 	mov.w	r3, #304	; 0x130
 80028d0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80028d4:	210f      	movs	r1, #15
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7fe fde6 	bl	80014a8 <fillRect>
// Draw some filled rectangles
    for (int i=1; i<6; i++){
 80028dc:	2301      	movs	r3, #1
 80028de:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80028e2:	e056      	b.n	8002992 <main+0x5f2>
      switch (i)
 80028e4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80028e8:	3b01      	subs	r3, #1
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d82a      	bhi.n	8002944 <main+0x5a4>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <main+0x554>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002909 	.word	0x08002909
 80028f8:	08002915 	.word	0x08002915
 80028fc:	08002921 	.word	0x08002921
 8002900:	0800292d 	.word	0x0800292d
 8002904:	08002939 	.word	0x08002939
      {
        case 1:
          setColorRGB(255,0,255);
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	2100      	movs	r1, #0
 800290c:	20ff      	movs	r0, #255	; 0xff
 800290e:	f7fe fb49 	bl	8000fa4 <setColorRGB>
          break;
 8002912:	e017      	b.n	8002944 <main+0x5a4>
        case 2:
          setColorRGB(255,0,0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	20ff      	movs	r0, #255	; 0xff
 800291a:	f7fe fb43 	bl	8000fa4 <setColorRGB>
          break;
 800291e:	e011      	b.n	8002944 <main+0x5a4>
        case 3:
          setColorRGB(0,255,0);
 8002920:	2200      	movs	r2, #0
 8002922:	21ff      	movs	r1, #255	; 0xff
 8002924:	2000      	movs	r0, #0
 8002926:	f7fe fb3d 	bl	8000fa4 <setColorRGB>
          break;
 800292a:	e00b      	b.n	8002944 <main+0x5a4>
        case 4:
          setColorRGB(0,0,255);
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	2100      	movs	r1, #0
 8002930:	2000      	movs	r0, #0
 8002932:	f7fe fb37 	bl	8000fa4 <setColorRGB>
          break;
 8002936:	e005      	b.n	8002944 <main+0x5a4>
        case 5:
          setColorRGB(255,255,0);
 8002938:	2200      	movs	r2, #0
 800293a:	21ff      	movs	r1, #255	; 0xff
 800293c:	20ff      	movs	r0, #255	; 0xff
 800293e:	f7fe fb31 	bl	8000fa4 <setColorRGB>
          break;
 8002942:	bf00      	nop
      }
      fillRect(150+(i*20), 70+(i*20), 210+(i*20), 130+(i*20));
 8002944:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	f103 0096 	add.w	r0, r3, #150	; 0x96
 8002954:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002964:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f103 04d2 	add.w	r4, r3, #210	; 0xd2
 8002974:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3382      	adds	r3, #130	; 0x82
 8002982:	4622      	mov	r2, r4
 8002984:	f7fe fd90 	bl	80014a8 <fillRect>
    for (int i=1; i<6; i++){
 8002988:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800298c:	3301      	adds	r3, #1
 800298e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8002992:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002996:	2b05      	cmp	r3, #5
 8002998:	dda4      	ble.n	80028e4 <main+0x544>
    }
    HAL_Delay(1000);
 800299a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299e:	f000 fec5 	bl	800372c <HAL_Delay>
    setColorRGB(0,0,0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe fafc 	bl	8000fa4 <setColorRGB>
    fillRect(1,15,478,304);
 80029ac:	f44f 7398 	mov.w	r3, #304	; 0x130
 80029b0:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80029b4:	210f      	movs	r1, #15
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7fe fd76 	bl	80014a8 <fillRect>
// Draw some filled, rounded rectangles
    for (int i=1; i<6; i++){
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80029c2:	e056      	b.n	8002a72 <main+0x6d2>
      switch (i)
 80029c4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80029c8:	3b01      	subs	r3, #1
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d82a      	bhi.n	8002a24 <main+0x684>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <main+0x634>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e9 	.word	0x080029e9
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a0d 	.word	0x08002a0d
 80029e4:	08002a19 	.word	0x08002a19
      {
        case 1:
          setColorRGB(255,0,255);
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	2100      	movs	r1, #0
 80029ec:	20ff      	movs	r0, #255	; 0xff
 80029ee:	f7fe fad9 	bl	8000fa4 <setColorRGB>
          break;
 80029f2:	e017      	b.n	8002a24 <main+0x684>
        case 2:
          setColorRGB(255,0,0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	20ff      	movs	r0, #255	; 0xff
 80029fa:	f7fe fad3 	bl	8000fa4 <setColorRGB>
          break;
 80029fe:	e011      	b.n	8002a24 <main+0x684>
        case 3:
          setColorRGB(0,255,0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	21ff      	movs	r1, #255	; 0xff
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe facd 	bl	8000fa4 <setColorRGB>
          break;
 8002a0a:	e00b      	b.n	8002a24 <main+0x684>
        case 4:
          setColorRGB(0,0,255);
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fac7 	bl	8000fa4 <setColorRGB>
          break;
 8002a16:	e005      	b.n	8002a24 <main+0x684>
        case 5:
          setColorRGB(255,255,0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	21ff      	movs	r1, #255	; 0xff
 8002a1c:	20ff      	movs	r0, #255	; 0xff
 8002a1e:	f7fe fac1 	bl	8000fa4 <setColorRGB>
          break;
 8002a22:	bf00      	nop
      }
      fillRoundRect(270-(i*20), 70+(i*20), 330-(i*20), 130+(i*20));
 8002a24:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a28:	f06f 0213 	mvn.w	r2, #19
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	f503 7087 	add.w	r0, r3, #270	; 0x10e
 8002a34:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8002a44:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a48:	f06f 0213 	mvn.w	r2, #19
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	f503 74a5 	add.w	r4, r3, #330	; 0x14a
 8002a54:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3382      	adds	r3, #130	; 0x82
 8002a62:	4622      	mov	r2, r4
 8002a64:	f7fe fd8e 	bl	8001584 <fillRoundRect>
    for (int i=1; i<6; i++){
 8002a68:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002a72:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	dda4      	ble.n	80029c4 <main+0x624>
    }
    HAL_Delay(1000);
 8002a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a7e:	f000 fe55 	bl	800372c <HAL_Delay>
    setColorRGB(0,0,0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fa8c 	bl	8000fa4 <setColorRGB>
    fillRect(1,15,478,304);
 8002a8c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002a90:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002a94:	210f      	movs	r1, #15
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7fe fd06 	bl	80014a8 <fillRect>
// Draw some filled circles
    for (int i=1; i<6; i++){
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002aa2:	e047      	b.n	8002b34 <main+0x794>
      switch (i)
 8002aa4:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d82a      	bhi.n	8002b04 <main+0x764>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <main+0x714>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ac9 	.word	0x08002ac9
 8002ab8:	08002ad5 	.word	0x08002ad5
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002aed 	.word	0x08002aed
 8002ac4:	08002af9 	.word	0x08002af9
      {
        case 1:
      	  setColorRGB(255,0,255);
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	2100      	movs	r1, #0
 8002acc:	20ff      	movs	r0, #255	; 0xff
 8002ace:	f7fe fa69 	bl	8000fa4 <setColorRGB>
          break;
 8002ad2:	e017      	b.n	8002b04 <main+0x764>
        case 2:
       	  setColorRGB(255,0,0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	20ff      	movs	r0, #255	; 0xff
 8002ada:	f7fe fa63 	bl	8000fa4 <setColorRGB>
          break;
 8002ade:	e011      	b.n	8002b04 <main+0x764>
        case 3:
          setColorRGB(0,255,0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	21ff      	movs	r1, #255	; 0xff
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe fa5d 	bl	8000fa4 <setColorRGB>
          break;
 8002aea:	e00b      	b.n	8002b04 <main+0x764>
        case 4:
          setColorRGB(0,0,255);
 8002aec:	22ff      	movs	r2, #255	; 0xff
 8002aee:	2100      	movs	r1, #0
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe fa57 	bl	8000fa4 <setColorRGB>
           break;
 8002af6:	e005      	b.n	8002b04 <main+0x764>
        case 5:
          setColorRGB(255,255,0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	21ff      	movs	r1, #255	; 0xff
 8002afc:	20ff      	movs	r0, #255	; 0xff
 8002afe:	f7fe fa51 	bl	8000fa4 <setColorRGB>
          break;
 8002b02:	bf00      	nop
      }
      fillCircle(180+(i*20),100+(i*20), 30);
 8002b04:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002b14:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3364      	adds	r3, #100	; 0x64
 8002b22:	221e      	movs	r2, #30
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fe ff47 	bl	80019b8 <fillCircle>
    for (int i=1; i<6; i++){
 8002b2a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002b34:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	ddb3      	ble.n	8002aa4 <main+0x704>
    }
    HAL_Delay(1000);
 8002b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b40:	f000 fdf4 	bl	800372c <HAL_Delay>
    setColorRGB(0,0,0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fa2b 	bl	8000fa4 <setColorRGB>
    fillRect(1,15,478,304);
 8002b4e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002b52:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002b56:	210f      	movs	r1, #15
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7fe fca5 	bl	80014a8 <fillRect>
// Draw some lines in a pattern
    setColorRGB(255,0,0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	20ff      	movs	r0, #255	; 0xff
 8002b64:	f7fe fa1e 	bl	8000fa4 <setColorRGB>
    for (int i=15; i<304; i+=5){
 8002b68:	230f      	movs	r3, #15
 8002b6a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8002b6e:	e034      	b.n	8002bda <main+0x83a>
 8002b70:	66666666 	.word	0x66666666
 8002b74:	3fe66666 	.word	0x3fe66666
 8002b78:	51eb851f 	.word	0x51eb851f
 8002b7c:	40091eb8 	.word	0x40091eb8
 8002b80:	00000000 	.word	0x00000000
 8002b84:	4063e000 	.word	0x4063e000
 8002b88:	40668000 	.word	0x40668000
 8002b8c:	51eb851f 	.word	0x51eb851f
    	drawLine(1, i, (i*1.6)-10, 304);
 8002b90:	f8d7 03e4 	ldr.w	r0, [r7, #996]	; 0x3e4
 8002b94:	f7fd fca2 	bl	80004dc <__aeabi_i2d>
 8002b98:	a3b5      	add	r3, pc, #724	; (adr r3, 8002e70 <main+0xad0>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f7fd fd07 	bl	80005b0 <__aeabi_dmul>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4621      	mov	r1, r4
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	4bb6      	ldr	r3, [pc, #728]	; (8002e88 <main+0xae8>)
 8002bb0:	f7fd fb46 	bl	8000240 <__aeabi_dsub>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4621      	mov	r1, r4
 8002bbc:	f7fd ff92 	bl	8000ae4 <__aeabi_d2iz>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002bc6:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fe fb04 	bl	80011d8 <drawLine>
    for (int i=15; i<304; i+=5){
 8002bd0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002bd4:	3305      	adds	r3, #5
 8002bd6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8002bda:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002bde:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002be2:	dbd5      	blt.n	8002b90 <main+0x7f0>
     }
     setColorRGB(255,0,0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	20ff      	movs	r0, #255	; 0xff
 8002bea:	f7fe f9db 	bl	8000fa4 <setColorRGB>
     for (int i=304; i>15; i-=5){
 8002bee:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002bf2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002bf6:	e024      	b.n	8002c42 <main+0x8a2>
    	 drawLine(478, i, (i*1.6)-11, 15);
 8002bf8:	f8d7 03e0 	ldr.w	r0, [r7, #992]	; 0x3e0
 8002bfc:	f7fd fc6e 	bl	80004dc <__aeabi_i2d>
 8002c00:	a39b      	add	r3, pc, #620	; (adr r3, 8002e70 <main+0xad0>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fcd3 	bl	80005b0 <__aeabi_dmul>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	4621      	mov	r1, r4
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b9d      	ldr	r3, [pc, #628]	; (8002e8c <main+0xaec>)
 8002c18:	f7fd fb12 	bl	8000240 <__aeabi_dsub>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	4618      	mov	r0, r3
 8002c22:	4621      	mov	r1, r4
 8002c24:	f7fd ff5e 	bl	8000ae4 <__aeabi_d2iz>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8002c30:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8002c34:	f7fe fad0 	bl	80011d8 <drawLine>
     for (int i=304; i>15; i-=5){
 8002c38:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c3c:	3b05      	subs	r3, #5
 8002c3e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002c42:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	dcd6      	bgt.n	8002bf8 <main+0x858>
     }
     setColorRGB(0,255,255);
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	21ff      	movs	r1, #255	; 0xff
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe f9a8 	bl	8000fa4 <setColorRGB>
     for (int i=304; i>15; i-=5)      {
 8002c54:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002c58:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002c5c:	e023      	b.n	8002ca6 <main+0x906>
    	 drawLine(1, i, 491-(i*1.6), 15);
 8002c5e:	f8d7 03dc 	ldr.w	r0, [r7, #988]	; 0x3dc
 8002c62:	f7fd fc3b 	bl	80004dc <__aeabi_i2d>
 8002c66:	a382      	add	r3, pc, #520	; (adr r3, 8002e70 <main+0xad0>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fca0 	bl	80005b0 <__aeabi_dmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	a17f      	add	r1, pc, #508	; (adr r1, 8002e78 <main+0xad8>)
 8002c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c7e:	f7fd fadf 	bl	8000240 <__aeabi_dsub>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	4618      	mov	r0, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	f7fd ff2b 	bl	8000ae4 <__aeabi_d2iz>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	230f      	movs	r3, #15
 8002c92:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fe fa9e 	bl	80011d8 <drawLine>
     for (int i=304; i>15; i-=5)      {
 8002c9c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002ca0:	3b05      	subs	r3, #5
 8002ca2:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002ca6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	dcd7      	bgt.n	8002c5e <main+0x8be>
     }
     setColorRGB(0,255,255);
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	21ff      	movs	r1, #255	; 0xff
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fe f976 	bl	8000fa4 <setColorRGB>
     for (int i=15; i<304; i+=5){
 8002cb8:	230f      	movs	r3, #15
 8002cba:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002cbe:	e025      	b.n	8002d0c <main+0x96c>
    	 drawLine(478, i, 490-(i*1.6), 304);
 8002cc0:	f8d7 03d8 	ldr.w	r0, [r7, #984]	; 0x3d8
 8002cc4:	f7fd fc0a 	bl	80004dc <__aeabi_i2d>
 8002cc8:	a369      	add	r3, pc, #420	; (adr r3, 8002e70 <main+0xad0>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fc6f 	bl	80005b0 <__aeabi_dmul>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4623      	mov	r3, r4
 8002cda:	a169      	add	r1, pc, #420	; (adr r1, 8002e80 <main+0xae0>)
 8002cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ce0:	f7fd faae 	bl	8000240 <__aeabi_dsub>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4621      	mov	r1, r4
 8002cec:	f7fd fefa 	bl	8000ae4 <__aeabi_d2iz>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002cf6:	f8d7 13d8 	ldr.w	r1, [r7, #984]	; 0x3d8
 8002cfa:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8002cfe:	f7fe fa6b 	bl	80011d8 <drawLine>
     for (int i=15; i<304; i+=5){
 8002d02:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002d06:	3305      	adds	r3, #5
 8002d08:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002d0c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002d10:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002d14:	dbd4      	blt.n	8002cc0 <main+0x920>
     }
     HAL_Delay(1000);
 8002d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d1a:	f000 fd07 	bl	800372c <HAL_Delay>
     setColorRGB(0,0,0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe f93e 	bl	8000fa4 <setColorRGB>
     fillRect(1,15,478,304);
 8002d28:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002d2c:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002d30:	210f      	movs	r1, #15
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fbb8 	bl	80014a8 <fillRect>
// Draw some random circles
     for (int i=0; i<100; i++){
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002d3e:	e07b      	b.n	8002e38 <main+0xa98>
    	  setColorRGB(rand()%255+1, rand()%255+1, rand()%255+1);
 8002d40:	f001 fce0 	bl	8004704 <rand>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <main+0xaf0>)
 8002d48:	fb83 1302 	smull	r1, r3, r3, r2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	11d9      	asrs	r1, r3, #7
 8002d50:	17d3      	asrs	r3, r2, #31
 8002d52:	1ac9      	subs	r1, r1, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	1a5b      	subs	r3, r3, r1
 8002d5a:	1ad1      	subs	r1, r2, r3
 8002d5c:	b2cb      	uxtb	r3, r1
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2dc      	uxtb	r4, r3
 8002d62:	f001 fccf 	bl	8004704 <rand>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <main+0xaf0>)
 8002d6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002d6e:	4413      	add	r3, r2
 8002d70:	11d9      	asrs	r1, r3, #7
 8002d72:	17d3      	asrs	r3, r2, #31
 8002d74:	1ac9      	subs	r1, r1, r3
 8002d76:	460b      	mov	r3, r1
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	1a5b      	subs	r3, r3, r1
 8002d7c:	1ad1      	subs	r1, r2, r3
 8002d7e:	b2cb      	uxtb	r3, r1
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2dd      	uxtb	r5, r3
 8002d84:	f001 fcbe 	bl	8004704 <rand>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <main+0xaf0>)
 8002d8c:	fb83 1302 	smull	r1, r3, r3, r2
 8002d90:	4413      	add	r3, r2
 8002d92:	11d9      	asrs	r1, r3, #7
 8002d94:	17d3      	asrs	r3, r2, #31
 8002d96:	1ac9      	subs	r1, r1, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	1ad1      	subs	r1, r2, r3
 8002da0:	b2cb      	uxtb	r3, r1
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4629      	mov	r1, r5
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7fe f8fa 	bl	8000fa4 <setColorRGB>
    	  x=32+rand()%416+1;
 8002db0:	f001 fca8 	bl	8004704 <rand>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <main+0xaf4>)
 8002db8:	fb83 1302 	smull	r1, r3, r3, r2
 8002dbc:	11d9      	asrs	r1, r3, #7
 8002dbe:	17d3      	asrs	r3, r2, #31
 8002dc0:	1acb      	subs	r3, r1, r3
 8002dc2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3321      	adds	r3, #33	; 0x21
 8002dd0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    	  y=45+rand()%226+1;
 8002dd4:	f001 fc96 	bl	8004704 <rand>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <main+0xaf8>)
 8002ddc:	fb83 1302 	smull	r1, r3, r3, r2
 8002de0:	1199      	asrs	r1, r3, #6
 8002de2:	17d3      	asrs	r3, r2, #31
 8002de4:	1acb      	subs	r3, r1, r3
 8002de6:	21e2      	movs	r1, #226	; 0xe2
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	332e      	adds	r3, #46	; 0x2e
 8002df2:	f8a7 33c2 	strh.w	r3, [r7, #962]	; 0x3c2
    	  r=rand()%30+1;
 8002df6:	f001 fc85 	bl	8004704 <rand>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <main+0xafc>)
 8002dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8002e02:	4413      	add	r3, r2
 8002e04:	1119      	asrs	r1, r3, #4
 8002e06:	17d3      	asrs	r3, r2, #31
 8002e08:	1ac9      	subs	r1, r1, r3
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a5b      	subs	r3, r3, r1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	1ad1      	subs	r1, r2, r3
 8002e14:	b28b      	uxth	r3, r1
 8002e16:	3301      	adds	r3, #1
 8002e18:	f8a7 33bc 	strh.w	r3, [r7, #956]	; 0x3bc
    	  drawCircle(x, y, r);
 8002e1c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8002e20:	f8b7 13c2 	ldrh.w	r1, [r7, #962]	; 0x3c2
 8002e24:	f8b7 23bc 	ldrh.w	r2, [r7, #956]	; 0x3bc
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fc31 	bl	8001690 <drawCircle>
     for (int i=0; i<100; i++){
 8002e2e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e32:	3301      	adds	r3, #1
 8002e34:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002e38:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e3c:	2b63      	cmp	r3, #99	; 0x63
 8002e3e:	f77f af7f 	ble.w	8002d40 <main+0x9a0>
     }
     HAL_Delay(1000);
 8002e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e46:	f000 fc71 	bl	800372c <HAL_Delay>
     setColorRGB(0,0,0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe f8a8 	bl	8000fa4 <setColorRGB>
     fillRect(1,15,478,304);
 8002e54:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002e58:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fe fb22 	bl	80014a8 <fillRect>
// Draw some random rectangles
     for (int i=0; i<100; i++){
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002e6a:	e0aa      	b.n	8002fc2 <main+0xc22>
 8002e6c:	f3af 8000 	nop.w
 8002e70:	9999999a 	.word	0x9999999a
 8002e74:	3ff99999 	.word	0x3ff99999
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	407eb000 	.word	0x407eb000
 8002e80:	00000000 	.word	0x00000000
 8002e84:	407ea000 	.word	0x407ea000
 8002e88:	40240000 	.word	0x40240000
 8002e8c:	40260000 	.word	0x40260000
 8002e90:	80808081 	.word	0x80808081
 8002e94:	4ec4ec4f 	.word	0x4ec4ec4f
 8002e98:	487ede05 	.word	0x487ede05
 8002e9c:	88888889 	.word	0x88888889
    	   setColorRGB(random()%255+1, random()%255+1, random()%255+1);
 8002ea0:	f001 fc64 	bl	800476c <random>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4ba9      	ldr	r3, [pc, #676]	; (800314c <main+0xdac>)
 8002ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8002eac:	4413      	add	r3, r2
 8002eae:	11d9      	asrs	r1, r3, #7
 8002eb0:	17d3      	asrs	r3, r2, #31
 8002eb2:	1ac9      	subs	r1, r1, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	1a5b      	subs	r3, r3, r1
 8002eba:	1ad1      	subs	r1, r2, r3
 8002ebc:	b2cb      	uxtb	r3, r1
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2dc      	uxtb	r4, r3
 8002ec2:	f001 fc53 	bl	800476c <random>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4ba0      	ldr	r3, [pc, #640]	; (800314c <main+0xdac>)
 8002eca:	fb83 1302 	smull	r1, r3, r3, r2
 8002ece:	4413      	add	r3, r2
 8002ed0:	11d9      	asrs	r1, r3, #7
 8002ed2:	17d3      	asrs	r3, r2, #31
 8002ed4:	1ac9      	subs	r1, r1, r3
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	1a5b      	subs	r3, r3, r1
 8002edc:	1ad1      	subs	r1, r2, r3
 8002ede:	b2cb      	uxtb	r3, r1
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2dd      	uxtb	r5, r3
 8002ee4:	f001 fc42 	bl	800476c <random>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b98      	ldr	r3, [pc, #608]	; (800314c <main+0xdac>)
 8002eec:	fb83 1302 	smull	r1, r3, r3, r2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	11d9      	asrs	r1, r3, #7
 8002ef4:	17d3      	asrs	r3, r2, #31
 8002ef6:	1ac9      	subs	r1, r1, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	1a5b      	subs	r3, r3, r1
 8002efe:	1ad1      	subs	r1, r2, r3
 8002f00:	b2cb      	uxtb	r3, r1
 8002f02:	3301      	adds	r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	4629      	mov	r1, r5
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7fe f84a 	bl	8000fa4 <setColorRGB>
    	   x=2+random()%476+1;
 8002f10:	f001 fc2c 	bl	800476c <random>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b8e      	ldr	r3, [pc, #568]	; (8003150 <main+0xdb0>)
 8002f18:	fb83 1302 	smull	r1, r3, r3, r2
 8002f1c:	11d9      	asrs	r1, r3, #7
 8002f1e:	17d3      	asrs	r3, r2, #31
 8002f20:	1acb      	subs	r3, r1, r3
 8002f22:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3303      	adds	r3, #3
 8002f30:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    	   y=16+random()%289+1;
 8002f34:	f001 fc1a 	bl	800476c <random>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	4b86      	ldr	r3, [pc, #536]	; (8003154 <main+0xdb4>)
 8002f3c:	fb83 2301 	smull	r2, r3, r3, r1
 8002f40:	11da      	asrs	r2, r3, #7
 8002f42:	17cb      	asrs	r3, r1, #31
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	011a      	lsls	r2, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	1aca      	subs	r2, r1, r3
 8002f52:	b293      	uxth	r3, r2
 8002f54:	3311      	adds	r3, #17
 8002f56:	f8a7 33c2 	strh.w	r3, [r7, #962]	; 0x3c2
    	   x2=2+random()%476+1;
 8002f5a:	f001 fc07 	bl	800476c <random>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <main+0xdb0>)
 8002f62:	fb83 1302 	smull	r1, r3, r3, r2
 8002f66:	11d9      	asrs	r1, r3, #7
 8002f68:	17d3      	asrs	r3, r2, #31
 8002f6a:	1acb      	subs	r3, r1, r3
 8002f6c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3303      	adds	r3, #3
 8002f7a:	f8a7 33c0 	strh.w	r3, [r7, #960]	; 0x3c0
    	   y2=16+random()%289+1;
 8002f7e:	f001 fbf5 	bl	800476c <random>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <main+0xdb4>)
 8002f86:	fb83 2301 	smull	r2, r3, r3, r1
 8002f8a:	11da      	asrs	r2, r3, #7
 8002f8c:	17cb      	asrs	r3, r1, #31
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	011a      	lsls	r2, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	1aca      	subs	r2, r1, r3
 8002f9c:	b293      	uxth	r3, r2
 8002f9e:	3311      	adds	r3, #17
 8002fa0:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    	   drawRect(x, y, x2, y2);
 8002fa4:	f8b7 040e 	ldrh.w	r0, [r7, #1038]	; 0x40e
 8002fa8:	f8b7 13c2 	ldrh.w	r1, [r7, #962]	; 0x3c2
 8002fac:	f8b7 23c0 	ldrh.w	r2, [r7, #960]	; 0x3c0
 8002fb0:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8002fb4:	f7fe f9c8 	bl	8001348 <drawRect>
     for (int i=0; i<100; i++){
 8002fb8:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002fc2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002fc6:	2b63      	cmp	r3, #99	; 0x63
 8002fc8:	f77f af6a 	ble.w	8002ea0 <main+0xb00>
     }
     HAL_Delay(1000);
 8002fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fd0:	f000 fbac 	bl	800372c <HAL_Delay>
     setColorRGB(0,0,0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd ffe3 	bl	8000fa4 <setColorRGB>
     fillRect(1,15,478,304);
 8002fde:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002fe2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fa5d 	bl	80014a8 <fillRect>
// Draw some random rounded rectangles
     for (int i=0; i<100; i++){
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002ff4:	e090      	b.n	8003118 <main+0xd78>
    	   setColorRGB(random()%255+1, random()%255+1, random()%255+1);
 8002ff6:	f001 fbb9 	bl	800476c <random>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <main+0xdac>)
 8002ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8003002:	4413      	add	r3, r2
 8003004:	11d9      	asrs	r1, r3, #7
 8003006:	17d3      	asrs	r3, r2, #31
 8003008:	1ac9      	subs	r1, r1, r3
 800300a:	460b      	mov	r3, r1
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	1a5b      	subs	r3, r3, r1
 8003010:	1ad1      	subs	r1, r2, r3
 8003012:	b2cb      	uxtb	r3, r1
 8003014:	3301      	adds	r3, #1
 8003016:	b2dc      	uxtb	r4, r3
 8003018:	f001 fba8 	bl	800476c <random>
 800301c:	4602      	mov	r2, r0
 800301e:	4b4b      	ldr	r3, [pc, #300]	; (800314c <main+0xdac>)
 8003020:	fb83 1302 	smull	r1, r3, r3, r2
 8003024:	4413      	add	r3, r2
 8003026:	11d9      	asrs	r1, r3, #7
 8003028:	17d3      	asrs	r3, r2, #31
 800302a:	1ac9      	subs	r1, r1, r3
 800302c:	460b      	mov	r3, r1
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	1a5b      	subs	r3, r3, r1
 8003032:	1ad1      	subs	r1, r2, r3
 8003034:	b2cb      	uxtb	r3, r1
 8003036:	3301      	adds	r3, #1
 8003038:	b2dd      	uxtb	r5, r3
 800303a:	f001 fb97 	bl	800476c <random>
 800303e:	4602      	mov	r2, r0
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <main+0xdac>)
 8003042:	fb83 1302 	smull	r1, r3, r3, r2
 8003046:	4413      	add	r3, r2
 8003048:	11d9      	asrs	r1, r3, #7
 800304a:	17d3      	asrs	r3, r2, #31
 800304c:	1ac9      	subs	r1, r1, r3
 800304e:	460b      	mov	r3, r1
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	1a5b      	subs	r3, r3, r1
 8003054:	1ad1      	subs	r1, r2, r3
 8003056:	b2cb      	uxtb	r3, r1
 8003058:	3301      	adds	r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4629      	mov	r1, r5
 8003060:	4620      	mov	r0, r4
 8003062:	f7fd ff9f 	bl	8000fa4 <setColorRGB>
    	   x=2+random()%476+1;
 8003066:	f001 fb81 	bl	800476c <random>
 800306a:	4602      	mov	r2, r0
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <main+0xdb0>)
 800306e:	fb83 1302 	smull	r1, r3, r3, r2
 8003072:	11d9      	asrs	r1, r3, #7
 8003074:	17d3      	asrs	r3, r2, #31
 8003076:	1acb      	subs	r3, r1, r3
 8003078:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b29b      	uxth	r3, r3
 8003084:	3303      	adds	r3, #3
 8003086:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
    	   y=16+random()%289+1;
 800308a:	f001 fb6f 	bl	800476c <random>
 800308e:	4601      	mov	r1, r0
 8003090:	4b30      	ldr	r3, [pc, #192]	; (8003154 <main+0xdb4>)
 8003092:	fb83 2301 	smull	r2, r3, r3, r1
 8003096:	11da      	asrs	r2, r3, #7
 8003098:	17cb      	asrs	r3, r1, #31
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4413      	add	r3, r2
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	4413      	add	r3, r2
 80030a6:	1aca      	subs	r2, r1, r3
 80030a8:	b293      	uxth	r3, r2
 80030aa:	3311      	adds	r3, #17
 80030ac:	f8a7 33c2 	strh.w	r3, [r7, #962]	; 0x3c2
    	   x2=2+random()%476+1;
 80030b0:	f001 fb5c 	bl	800476c <random>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <main+0xdb0>)
 80030b8:	fb83 1302 	smull	r1, r3, r3, r2
 80030bc:	11d9      	asrs	r1, r3, #7
 80030be:	17d3      	asrs	r3, r2, #31
 80030c0:	1acb      	subs	r3, r1, r3
 80030c2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3303      	adds	r3, #3
 80030d0:	f8a7 33c0 	strh.w	r3, [r7, #960]	; 0x3c0
    	   y2=16+random()%289+1;
 80030d4:	f001 fb4a 	bl	800476c <random>
 80030d8:	4601      	mov	r1, r0
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <main+0xdb4>)
 80030dc:	fb83 2301 	smull	r2, r3, r3, r1
 80030e0:	11da      	asrs	r2, r3, #7
 80030e2:	17cb      	asrs	r3, r1, #31
 80030e4:	1ad2      	subs	r2, r2, r3
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	011a      	lsls	r2, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	1aca      	subs	r2, r1, r3
 80030f2:	b293      	uxth	r3, r2
 80030f4:	3311      	adds	r3, #17
 80030f6:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
    	   drawRoundRect(x, y, x2, y2);
 80030fa:	f8b7 040e 	ldrh.w	r0, [r7, #1038]	; 0x40e
 80030fe:	f8b7 13c2 	ldrh.w	r1, [r7, #962]	; 0x3c2
 8003102:	f8b7 23c0 	ldrh.w	r2, [r7, #960]	; 0x3c0
 8003106:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800310a:	f7fe f95c 	bl	80013c6 <drawRoundRect>
     for (int i=0; i<100; i++){
 800310e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003112:	3301      	adds	r3, #1
 8003114:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8003118:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800311c:	2b63      	cmp	r3, #99	; 0x63
 800311e:	f77f af6a 	ble.w	8002ff6 <main+0xc56>
     }
	 HAL_Delay(1000);
 8003122:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003126:	f000 fb01 	bl	800372c <HAL_Delay>
	 setColorRGB(0,0,0);
 800312a:	2200      	movs	r2, #0
 800312c:	2100      	movs	r1, #0
 800312e:	2000      	movs	r0, #0
 8003130:	f7fd ff38 	bl	8000fa4 <setColorRGB>
     fillRect(1,15,478,304);
 8003134:	f44f 7398 	mov.w	r3, #304	; 0x130
 8003138:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800313c:	210f      	movs	r1, #15
 800313e:	2001      	movs	r0, #1
 8003140:	f7fe f9b2 	bl	80014a8 <fillRect>
	 for (int i=0; i<100; i++){
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800314a:	e096      	b.n	800327a <main+0xeda>
 800314c:	80808081 	.word	0x80808081
 8003150:	44d72045 	.word	0x44d72045
 8003154:	71625345 	.word	0x71625345
		   setColorRGB(random()%255+1, random()%255+1, random()%255+1);
 8003158:	f001 fb08 	bl	800476c <random>
 800315c:	4602      	mov	r2, r0
 800315e:	4bb5      	ldr	r3, [pc, #724]	; (8003434 <main+0x1094>)
 8003160:	fb83 1302 	smull	r1, r3, r3, r2
 8003164:	4413      	add	r3, r2
 8003166:	11d9      	asrs	r1, r3, #7
 8003168:	17d3      	asrs	r3, r2, #31
 800316a:	1ac9      	subs	r1, r1, r3
 800316c:	460b      	mov	r3, r1
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	1a5b      	subs	r3, r3, r1
 8003172:	1ad1      	subs	r1, r2, r3
 8003174:	b2cb      	uxtb	r3, r1
 8003176:	3301      	adds	r3, #1
 8003178:	b2dc      	uxtb	r4, r3
 800317a:	f001 faf7 	bl	800476c <random>
 800317e:	4602      	mov	r2, r0
 8003180:	4bac      	ldr	r3, [pc, #688]	; (8003434 <main+0x1094>)
 8003182:	fb83 1302 	smull	r1, r3, r3, r2
 8003186:	4413      	add	r3, r2
 8003188:	11d9      	asrs	r1, r3, #7
 800318a:	17d3      	asrs	r3, r2, #31
 800318c:	1ac9      	subs	r1, r1, r3
 800318e:	460b      	mov	r3, r1
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	1a5b      	subs	r3, r3, r1
 8003194:	1ad1      	subs	r1, r2, r3
 8003196:	b2cb      	uxtb	r3, r1
 8003198:	3301      	adds	r3, #1
 800319a:	b2dd      	uxtb	r5, r3
 800319c:	f001 fae6 	bl	800476c <random>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4ba4      	ldr	r3, [pc, #656]	; (8003434 <main+0x1094>)
 80031a4:	fb83 1302 	smull	r1, r3, r3, r2
 80031a8:	4413      	add	r3, r2
 80031aa:	11d9      	asrs	r1, r3, #7
 80031ac:	17d3      	asrs	r3, r2, #31
 80031ae:	1ac9      	subs	r1, r1, r3
 80031b0:	460b      	mov	r3, r1
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	1a5b      	subs	r3, r3, r1
 80031b6:	1ad1      	subs	r1, r2, r3
 80031b8:	b2cb      	uxtb	r3, r1
 80031ba:	3301      	adds	r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	4629      	mov	r1, r5
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7fd feee 	bl	8000fa4 <setColorRGB>
		   x=2+random()%476+1;
 80031c8:	f001 fad0 	bl	800476c <random>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b9a      	ldr	r3, [pc, #616]	; (8003438 <main+0x1098>)
 80031d0:	fb83 1302 	smull	r1, r3, r3, r2
 80031d4:	11d9      	asrs	r1, r3, #7
 80031d6:	17d3      	asrs	r3, r2, #31
 80031d8:	1acb      	subs	r3, r1, r3
 80031da:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3303      	adds	r3, #3
 80031e8:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		   y=16+random()%289+1;
 80031ec:	f001 fabe 	bl	800476c <random>
 80031f0:	4601      	mov	r1, r0
 80031f2:	4b92      	ldr	r3, [pc, #584]	; (800343c <main+0x109c>)
 80031f4:	fb83 2301 	smull	r2, r3, r3, r1
 80031f8:	11da      	asrs	r2, r3, #7
 80031fa:	17cb      	asrs	r3, r1, #31
 80031fc:	1ad2      	subs	r2, r2, r3
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	1aca      	subs	r2, r1, r3
 800320a:	b293      	uxth	r3, r2
 800320c:	3311      	adds	r3, #17
 800320e:	f8a7 33c2 	strh.w	r3, [r7, #962]	; 0x3c2
		   x2=2+random()%476+1;
 8003212:	f001 faab 	bl	800476c <random>
 8003216:	4602      	mov	r2, r0
 8003218:	4b87      	ldr	r3, [pc, #540]	; (8003438 <main+0x1098>)
 800321a:	fb83 1302 	smull	r1, r3, r3, r2
 800321e:	11d9      	asrs	r1, r3, #7
 8003220:	17d3      	asrs	r3, r2, #31
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	b29b      	uxth	r3, r3
 8003230:	3303      	adds	r3, #3
 8003232:	f8a7 33c0 	strh.w	r3, [r7, #960]	; 0x3c0
		   y2=16+random()%289+1;
 8003236:	f001 fa99 	bl	800476c <random>
 800323a:	4601      	mov	r1, r0
 800323c:	4b7f      	ldr	r3, [pc, #508]	; (800343c <main+0x109c>)
 800323e:	fb83 2301 	smull	r2, r3, r3, r1
 8003242:	11da      	asrs	r2, r3, #7
 8003244:	17cb      	asrs	r3, r1, #31
 8003246:	1ad2      	subs	r2, r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	011a      	lsls	r2, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	1aca      	subs	r2, r1, r3
 8003254:	b293      	uxth	r3, r2
 8003256:	3311      	adds	r3, #17
 8003258:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
		   drawLine(x, y, x2, y2);
 800325c:	f8b7 040e 	ldrh.w	r0, [r7, #1038]	; 0x40e
 8003260:	f8b7 13c2 	ldrh.w	r1, [r7, #962]	; 0x3c2
 8003264:	f8b7 23c0 	ldrh.w	r2, [r7, #960]	; 0x3c0
 8003268:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 800326c:	f7fd ffb4 	bl	80011d8 <drawLine>
	 for (int i=0; i<100; i++){
 8003270:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8003274:	3301      	adds	r3, #1
 8003276:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800327a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800327e:	2b63      	cmp	r3, #99	; 0x63
 8003280:	f77f af6a 	ble.w	8003158 <main+0xdb8>
     }
	 HAL_Delay(1000);
 8003284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003288:	f000 fa50 	bl	800372c <HAL_Delay>
	 setColorRGB(0,0,0);
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	2000      	movs	r0, #0
 8003292:	f7fd fe87 	bl	8000fa4 <setColorRGB>
     fillRect(1,15,478,304);
 8003296:	f44f 7398 	mov.w	r3, #304	; 0x130
 800329a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 800329e:	210f      	movs	r1, #15
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fe f901 	bl	80014a8 <fillRect>
     for (int i=0; i<10000; i++){
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80032ac:	e060      	b.n	8003370 <main+0xfd0>
    	   setColorRGB(random()%255+1, random()%255+1, random()%255+1);
 80032ae:	f001 fa5d 	bl	800476c <random>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <main+0x1094>)
 80032b6:	fb83 1302 	smull	r1, r3, r3, r2
 80032ba:	4413      	add	r3, r2
 80032bc:	11d9      	asrs	r1, r3, #7
 80032be:	17d3      	asrs	r3, r2, #31
 80032c0:	1ac9      	subs	r1, r1, r3
 80032c2:	460b      	mov	r3, r1
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	1a5b      	subs	r3, r3, r1
 80032c8:	1ad1      	subs	r1, r2, r3
 80032ca:	b2cb      	uxtb	r3, r1
 80032cc:	3301      	adds	r3, #1
 80032ce:	b2dc      	uxtb	r4, r3
 80032d0:	f001 fa4c 	bl	800476c <random>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b57      	ldr	r3, [pc, #348]	; (8003434 <main+0x1094>)
 80032d8:	fb83 1302 	smull	r1, r3, r3, r2
 80032dc:	4413      	add	r3, r2
 80032de:	11d9      	asrs	r1, r3, #7
 80032e0:	17d3      	asrs	r3, r2, #31
 80032e2:	1ac9      	subs	r1, r1, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	1a5b      	subs	r3, r3, r1
 80032ea:	1ad1      	subs	r1, r2, r3
 80032ec:	b2cb      	uxtb	r3, r1
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2dd      	uxtb	r5, r3
 80032f2:	f001 fa3b 	bl	800476c <random>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b4e      	ldr	r3, [pc, #312]	; (8003434 <main+0x1094>)
 80032fa:	fb83 1302 	smull	r1, r3, r3, r2
 80032fe:	4413      	add	r3, r2
 8003300:	11d9      	asrs	r1, r3, #7
 8003302:	17d3      	asrs	r3, r2, #31
 8003304:	1ac9      	subs	r1, r1, r3
 8003306:	460b      	mov	r3, r1
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	1a5b      	subs	r3, r3, r1
 800330c:	1ad1      	subs	r1, r2, r3
 800330e:	b2cb      	uxtb	r3, r1
 8003310:	3301      	adds	r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	4629      	mov	r1, r5
 8003318:	4620      	mov	r0, r4
 800331a:	f7fd fe43 	bl	8000fa4 <setColorRGB>
    	   drawPixel(2+random()%476+1, 16+random()%289+1);
 800331e:	f001 fa25 	bl	800476c <random>
 8003322:	4602      	mov	r2, r0
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <main+0x1098>)
 8003326:	fb83 1302 	smull	r1, r3, r3, r2
 800332a:	11d9      	asrs	r1, r3, #7
 800332c:	17d3      	asrs	r3, r2, #31
 800332e:	1acb      	subs	r3, r1, r3
 8003330:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	1cdc      	adds	r4, r3, #3
 800333c:	f001 fa16 	bl	800476c <random>
 8003340:	4601      	mov	r1, r0
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <main+0x109c>)
 8003344:	fb83 2301 	smull	r2, r3, r3, r1
 8003348:	11da      	asrs	r2, r3, #7
 800334a:	17cb      	asrs	r3, r1, #31
 800334c:	1ad2      	subs	r2, r2, r3
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	011a      	lsls	r2, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	1aca      	subs	r2, r1, r3
 800335a:	f102 0311 	add.w	r3, r2, #17
 800335e:	4619      	mov	r1, r3
 8003360:	4620      	mov	r0, r4
 8003362:	f7fd fead 	bl	80010c0 <drawPixel>
     for (int i=0; i<10000; i++){
 8003366:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800336a:	3301      	adds	r3, #1
 800336c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8003370:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8003374:	f242 720f 	movw	r2, #9999	; 0x270f
 8003378:	4293      	cmp	r3, r2
 800337a:	dd98      	ble.n	80032ae <main+0xf0e>
     }
     HAL_Delay(1000);
 800337c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003380:	f000 f9d4 	bl	800372c <HAL_Delay>
     setColorRGB(0, 0, 255);
 8003384:	22ff      	movs	r2, #255	; 0xff
 8003386:	2100      	movs	r1, #0
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fe0b 	bl	8000fa4 <setColorRGB>
     fillScr(f_color);
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <main+0x10a0>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fe5e 	bl	8001054 <fillScr>
     setColorRGB(255, 0, 0);
 8003398:	2200      	movs	r2, #0
 800339a:	2100      	movs	r1, #0
 800339c:	20ff      	movs	r0, #255	; 0xff
 800339e:	f7fd fe01 	bl	8000fa4 <setColorRGB>
     fillRoundRect(160, 70, 319, 169);
 80033a2:	23a9      	movs	r3, #169	; 0xa9
 80033a4:	f240 123f 	movw	r2, #319	; 0x13f
 80033a8:	2146      	movs	r1, #70	; 0x46
 80033aa:	20a0      	movs	r0, #160	; 0xa0
 80033ac:	f7fe f8ea 	bl	8001584 <fillRoundRect>
     setColorRGB(255, 255, 255);
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	21ff      	movs	r1, #255	; 0xff
 80033b4:	20ff      	movs	r0, #255	; 0xff
 80033b6:	f7fd fdf5 	bl	8000fa4 <setColorRGB>
     setBackColorRGB(255, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	20ff      	movs	r0, #255	; 0xff
 80033c0:	f7fd fe1a 	bl	8000ff8 <setBackColorRGB>
     print("That's it!", CENTER, 93,0);
 80033c4:	2300      	movs	r3, #0
 80033c6:	225d      	movs	r2, #93	; 0x5d
 80033c8:	f242 710e 	movw	r1, #9998	; 0x270e
 80033cc:	481d      	ldr	r0, [pc, #116]	; (8003444 <main+0x10a4>)
 80033ce:	f7fe fe23 	bl	8002018 <print>
     print("Restarting in a", CENTER, 119,0);
 80033d2:	2300      	movs	r3, #0
 80033d4:	2277      	movs	r2, #119	; 0x77
 80033d6:	f242 710e 	movw	r1, #9998	; 0x270e
 80033da:	481b      	ldr	r0, [pc, #108]	; (8003448 <main+0x10a8>)
 80033dc:	f7fe fe1c 	bl	8002018 <print>
     print("few seconds...", CENTER, 132,0);
 80033e0:	2300      	movs	r3, #0
 80033e2:	2284      	movs	r2, #132	; 0x84
 80033e4:	f242 710e 	movw	r1, #9998	; 0x270e
 80033e8:	4818      	ldr	r0, [pc, #96]	; (800344c <main+0x10ac>)
 80033ea:	f7fe fe15 	bl	8002018 <print>
     setColorRGB(0, 255, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	21ff      	movs	r1, #255	; 0xff
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd fdd6 	bl	8000fa4 <setColorRGB>
     setBackColorRGB(0, 0, 255);
 80033f8:	22ff      	movs	r2, #255	; 0xff
 80033fa:	2100      	movs	r1, #0
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fd fdfb 	bl	8000ff8 <setBackColorRGB>
     print("Runtime: (msecs)", CENTER, 290,0);
 8003402:	2300      	movs	r3, #0
 8003404:	f44f 7291 	mov.w	r2, #290	; 0x122
 8003408:	f242 710e 	movw	r1, #9998	; 0x270e
 800340c:	4810      	ldr	r0, [pc, #64]	; (8003450 <main+0x10b0>)
 800340e:	f7fe fe03 	bl	8002018 <print>
     printNumI(0x7fffffff, CENTER, 305,0,' ');
 8003412:	2320      	movs	r3, #32
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	f240 1231 	movw	r2, #305	; 0x131
 800341c:	f242 710e 	movw	r1, #9998	; 0x270e
 8003420:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8003424:	f7fe fe80 	bl	8002128 <printNumI>
     HAL_Delay (5000);
 8003428:	f241 3088 	movw	r0, #5000	; 0x1388
 800342c:	f000 f97e 	bl	800372c <HAL_Delay>
	LCD_clrScr();
 8003430:	f7fe bfd4 	b.w	80023dc <main+0x3c>
 8003434:	80808081 	.word	0x80808081
 8003438:	44d72045 	.word	0x44d72045
 800343c:	71625345 	.word	0x71625345
 8003440:	200000f2 	.word	0x200000f2
 8003444:	08006498 	.word	0x08006498
 8003448:	080064a4 	.word	0x080064a4
 800344c:	080064b4 	.word	0x080064b4
 8003450:	080064c4 	.word	0x080064c4

08003454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b090      	sub	sp, #64	; 0x40
 8003458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800345a:	f107 0318 	add.w	r3, r7, #24
 800345e:	2228      	movs	r2, #40	; 0x28
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f001 f922 	bl	80046ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003476:	2301      	movs	r3, #1
 8003478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800347a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800347e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003484:	2301      	movs	r3, #1
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003488:	2302      	movs	r3, #2
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800348c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003498:	f107 0318 	add.w	r3, r7, #24
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fbcd 	bl	8003c3c <HAL_RCC_OscConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80034a8:	f000 f819 	bl	80034de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034ac:	230f      	movs	r3, #15
 80034ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b0:	2302      	movs	r3, #2
 80034b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fe38 	bl	800413c <HAL_RCC_ClockConfig>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80034d2:	f000 f804 	bl	80034de <Error_Handler>
  }
}
 80034d6:	bf00      	nop
 80034d8:	3740      	adds	r7, #64	; 0x40
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034de:	b480      	push	{r7}
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034e2:	bf00      	nop
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_MspInit+0x5c>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_MspInit+0x5c>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6193      	str	r3, [r2, #24]
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_MspInit+0x5c>)
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_MspInit+0x5c>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_MspInit+0x5c>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	61d3      	str	r3, [r2, #28]
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_MspInit+0x5c>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_MspInit+0x60>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_MspInit+0x60>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000

08003550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <HardFault_Handler+0x4>

08003562 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <MemManage_Handler+0x4>

08003568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <BusFault_Handler+0x4>

0800356e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <UsageFault_Handler+0x4>

08003574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800359c:	f000 f8aa 	bl	80036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f001 f840 	bl	8004658 <__errno>
 80035d8:	4602      	mov	r2, r0
 80035da:	230c      	movs	r3, #12
 80035dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20018000 	.word	0x20018000
 8003604:	00000400 	.word	0x00000400
 8003608:	2000009c 	.word	0x2000009c
 800360c:	20000108 	.word	0x20000108

08003610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800361c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800361e:	e003      	b.n	8003628 <LoopCopyDataInit>

08003620 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003622:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003624:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003626:	3104      	adds	r1, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003628:	480a      	ldr	r0, [pc, #40]	; (8003654 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800362c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800362e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003630:	d3f6      	bcc.n	8003620 <CopyDataInit>
  ldr r2, =_sbss
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003634:	e002      	b.n	800363c <LoopFillZerobss>

08003636 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003638:	f842 3b04 	str.w	r3, [r2], #4

0800363c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800363e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003640:	d3f9      	bcc.n	8003636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003642:	f7ff ffe5 	bl	8003610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f001 f80d 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800364a:	f7fe fea9 	bl	80023a0 <main>
  bx lr
 800364e:	4770      	bx	lr
  ldr r3, =_sidata
 8003650:	08006ee8 	.word	0x08006ee8
  ldr r0, =_sdata
 8003654:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003658:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 800365c:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8003660:	20000108 	.word	0x20000108

08003664 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC1_2_IRQHandler>
	...

08003668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_Init+0x28>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HAL_Init+0x28>)
 8003672:	f043 0310 	orr.w	r3, r3, #16
 8003676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003678:	2003      	movs	r0, #3
 800367a:	f000 f929 	bl	80038d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367e:	2000      	movs	r0, #0
 8003680:	f000 f808 	bl	8003694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003684:	f7ff ff32 	bl	80034ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000

08003694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x54>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_InitTick+0x58>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f933 	bl	800391e <HAL_SYSTICK_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e00e      	b.n	80036e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d80a      	bhi.n	80036de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c8:	2200      	movs	r2, #0
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f000 f909 	bl	80038e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d4:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <HAL_InitTick+0x5c>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e000      	b.n	80036e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000000c 	.word	0x2000000c
 80036ec:	20000014 	.word	0x20000014
 80036f0:	20000010 	.word	0x20000010

080036f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_IncTick+0x1c>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_IncTick+0x20>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4413      	add	r3, r2
 8003704:	4a03      	ldr	r2, [pc, #12]	; (8003714 <HAL_IncTick+0x20>)
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	20000014 	.word	0x20000014
 8003714:	20000100 	.word	0x20000100

08003718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_GetTick+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000100 	.word	0x20000100

0800372c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7ff fff0 	bl	8003718 <HAL_GetTick>
 8003738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d005      	beq.n	8003752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_Delay+0x40>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003752:	bf00      	nop
 8003754:	f7ff ffe0 	bl	8003718 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	429a      	cmp	r2, r3
 8003762:	d8f7      	bhi.n	8003754 <HAL_Delay+0x28>
  {
  }
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000014 	.word	0x20000014

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800379c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60d3      	str	r3, [r2, #12]
}
 80037a8:	bf00      	nop
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389c:	d301      	bcc.n	80038a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389e:	2301      	movs	r3, #1
 80038a0:	e00f      	b.n	80038c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <SysTick_Config+0x40>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038aa:	210f      	movs	r1, #15
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f7ff ff90 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <SysTick_Config+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <SysTick_Config+0x40>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	e000e010 	.word	0xe000e010

080038d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff49 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f8:	f7ff ff5e 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 80038fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff ff90 	bl	8003828 <NVIC_EncodePriority>
 8003908:	4602      	mov	r2, r0
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff5f 	bl	80037d4 <__NVIC_SetPriority>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffb0 	bl	800388c <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b08b      	sub	sp, #44	; 0x2c
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e133      	b.n	8003bb4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800394c:	2201      	movs	r2, #1
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	429a      	cmp	r2, r3
 8003966:	f040 8122 	bne.w	8003bae <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b12      	cmp	r3, #18
 8003970:	d034      	beq.n	80039dc <HAL_GPIO_Init+0xa4>
 8003972:	2b12      	cmp	r3, #18
 8003974:	d80d      	bhi.n	8003992 <HAL_GPIO_Init+0x5a>
 8003976:	2b02      	cmp	r3, #2
 8003978:	d02b      	beq.n	80039d2 <HAL_GPIO_Init+0x9a>
 800397a:	2b02      	cmp	r3, #2
 800397c:	d804      	bhi.n	8003988 <HAL_GPIO_Init+0x50>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d031      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
 8003982:	2b01      	cmp	r3, #1
 8003984:	d01c      	beq.n	80039c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003986:	e048      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003988:	2b03      	cmp	r3, #3
 800398a:	d043      	beq.n	8003a14 <HAL_GPIO_Init+0xdc>
 800398c:	2b11      	cmp	r3, #17
 800398e:	d01b      	beq.n	80039c8 <HAL_GPIO_Init+0x90>
          break;
 8003990:	e043      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003992:	4a8f      	ldr	r2, [pc, #572]	; (8003bd0 <HAL_GPIO_Init+0x298>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d026      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
 8003998:	4a8d      	ldr	r2, [pc, #564]	; (8003bd0 <HAL_GPIO_Init+0x298>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d806      	bhi.n	80039ac <HAL_GPIO_Init+0x74>
 800399e:	4a8d      	ldr	r2, [pc, #564]	; (8003bd4 <HAL_GPIO_Init+0x29c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d020      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
 80039a4:	4a8c      	ldr	r2, [pc, #560]	; (8003bd8 <HAL_GPIO_Init+0x2a0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
          break;
 80039aa:	e036      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039ac:	4a8b      	ldr	r2, [pc, #556]	; (8003bdc <HAL_GPIO_Init+0x2a4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d019      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
 80039b2:	4a8b      	ldr	r2, [pc, #556]	; (8003be0 <HAL_GPIO_Init+0x2a8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d016      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
 80039b8:	4a8a      	ldr	r2, [pc, #552]	; (8003be4 <HAL_GPIO_Init+0x2ac>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0xae>
          break;
 80039be:	e02c      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	623b      	str	r3, [r7, #32]
          break;
 80039c6:	e028      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	623b      	str	r3, [r7, #32]
          break;
 80039d0:	e023      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	3308      	adds	r3, #8
 80039d8:	623b      	str	r3, [r7, #32]
          break;
 80039da:	e01e      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	330c      	adds	r3, #12
 80039e2:	623b      	str	r3, [r7, #32]
          break;
 80039e4:	e019      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ee:	2304      	movs	r3, #4
 80039f0:	623b      	str	r3, [r7, #32]
          break;
 80039f2:	e012      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039fc:	2308      	movs	r3, #8
 80039fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	611a      	str	r2, [r3, #16]
          break;
 8003a06:	e008      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	615a      	str	r2, [r3, #20]
          break;
 8003a12:	e002      	b.n	8003a1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
          break;
 8003a18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2bff      	cmp	r3, #255	; 0xff
 8003a1e:	d801      	bhi.n	8003a24 <HAL_GPIO_Init+0xec>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	e001      	b.n	8003a28 <HAL_GPIO_Init+0xf0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2bff      	cmp	r3, #255	; 0xff
 8003a2e:	d802      	bhi.n	8003a36 <HAL_GPIO_Init+0xfe>
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	e002      	b.n	8003a3c <HAL_GPIO_Init+0x104>
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3b08      	subs	r3, #8
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	210f      	movs	r1, #15
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	6a39      	ldr	r1, [r7, #32]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	431a      	orrs	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a2 	beq.w	8003bae <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_GPIO_Init+0x2b0>)
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	; (8003be8 <HAL_GPIO_Init+0x2b0>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6193      	str	r3, [r2, #24]
 8003a76:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <HAL_GPIO_Init+0x2b0>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a82:	4a5a      	ldr	r2, [pc, #360]	; (8003bec <HAL_GPIO_Init+0x2b4>)
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	220f      	movs	r2, #15
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_GPIO_Init+0x2b8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <HAL_GPIO_Init+0x1b6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a50      	ldr	r2, [pc, #320]	; (8003bf4 <HAL_GPIO_Init+0x2bc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_Init+0x1b2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4f      	ldr	r2, [pc, #316]	; (8003bf8 <HAL_GPIO_Init+0x2c0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_Init+0x1ae>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a4e      	ldr	r2, [pc, #312]	; (8003bfc <HAL_GPIO_Init+0x2c4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_Init+0x1aa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a4d      	ldr	r2, [pc, #308]	; (8003c00 <HAL_GPIO_Init+0x2c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x1a6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <HAL_GPIO_Init+0x2cc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_Init+0x1a2>
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	e00a      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003ada:	2306      	movs	r3, #6
 8003adc:	e008      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	e006      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e004      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_GPIO_Init+0x1b8>
 8003aee:	2300      	movs	r3, #0
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	f002 0203 	and.w	r2, r2, #3
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	4093      	lsls	r3, r2
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b00:	493a      	ldr	r1, [pc, #232]	; (8003bec <HAL_GPIO_Init+0x2b4>)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	493a      	ldr	r1, [pc, #232]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
 8003b26:	e006      	b.n	8003b36 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b28:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	4935      	ldr	r1, [pc, #212]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4930      	ldr	r1, [pc, #192]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]
 8003b4e:	e006      	b.n	8003b5e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b50:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	492b      	ldr	r1, [pc, #172]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b6a:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4926      	ldr	r1, [pc, #152]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
 8003b76:	e006      	b.n	8003b86 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	4921      	ldr	r1, [pc, #132]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	491c      	ldr	r1, [pc, #112]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60cb      	str	r3, [r1, #12]
 8003b9e:	e006      	b.n	8003bae <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_GPIO_Init+0x2d0>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f47f aec4 	bne.w	800394c <HAL_GPIO_Init+0x14>
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	372c      	adds	r7, #44	; 0x2c
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	10210000 	.word	0x10210000
 8003bd4:	10110000 	.word	0x10110000
 8003bd8:	10120000 	.word	0x10120000
 8003bdc:	10310000 	.word	0x10310000
 8003be0:	10320000 	.word	0x10320000
 8003be4:	10220000 	.word	0x10220000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40010800 	.word	0x40010800
 8003bf4:	40010c00 	.word	0x40010c00
 8003bf8:	40011000 	.word	0x40011000
 8003bfc:	40011400 	.word	0x40011400
 8003c00:	40011800 	.word	0x40011800
 8003c04:	40011c00 	.word	0x40011c00
 8003c08:	40010400 	.word	0x40010400

08003c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c28:	e003      	b.n	8003c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e26c      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8087 	beq.w	8003d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c5c:	4b92      	ldr	r3, [pc, #584]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d00c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c68:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d112      	bne.n	8003c9a <HAL_RCC_OscConfig+0x5e>
 8003c74:	4b8c      	ldr	r3, [pc, #560]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d10b      	bne.n	8003c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	4b89      	ldr	r3, [pc, #548]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d06c      	beq.n	8003d68 <HAL_RCC_OscConfig+0x12c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d168      	bne.n	8003d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e246      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x76>
 8003ca4:	4b80      	ldr	r3, [pc, #512]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7f      	ldr	r2, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e02e      	b.n	8003d10 <HAL_RCC_OscConfig+0xd4>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x98>
 8003cba:	4b7b      	ldr	r3, [pc, #492]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7a      	ldr	r2, [pc, #488]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b78      	ldr	r3, [pc, #480]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a77      	ldr	r2, [pc, #476]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e01d      	b.n	8003d10 <HAL_RCC_OscConfig+0xd4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xbc>
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a71      	ldr	r2, [pc, #452]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0xd4>
 8003cf8:	4b6b      	ldr	r3, [pc, #428]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6a      	ldr	r2, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7ff fcfe 	bl	8003718 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7ff fcfa 	bl	8003718 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1fa      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0xe4>
 8003d3e:	e014      	b.n	8003d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7ff fcea 	bl	8003718 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7ff fce6 	bl	8003718 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1e6      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x10c>
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d82:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d11c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x18c>
 8003d8e:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_RCC_OscConfig+0x176>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e1ba      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc6:	e03a      	b.n	8003e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd0:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCC_OscConfig+0x270>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7ff fc9f 	bl	8003718 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dde:	f7ff fc9b 	bl	8003718 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e19b      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4927      	ldr	r1, [pc, #156]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	e015      	b.n	8003e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_RCC_OscConfig+0x270>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7ff fc7e 	bl	8003718 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e20:	f7ff fc7a 	bl	8003718 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e17a      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d03a      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d019      	beq.n	8003e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e58:	f7ff fc5e 	bl	8003718 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e60:	f7ff fc5a 	bl	8003718 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e15a      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f000 faa8 	bl	80043d4 <RCC_Delay>
 8003e84:	e01c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8c:	f7ff fc44 	bl	8003718 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e92:	e00f      	b.n	8003eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e94:	f7ff fc40 	bl	8003718 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d908      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e140      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	42420000 	.word	0x42420000
 8003eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb4:	4b9e      	ldr	r3, [pc, #632]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e9      	bne.n	8003e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80a6 	beq.w	800401a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b97      	ldr	r3, [pc, #604]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10d      	bne.n	8003efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4a93      	ldr	r2, [pc, #588]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	61d3      	str	r3, [r2, #28]
 8003eea:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b8e      	ldr	r3, [pc, #568]	; (8004134 <HAL_RCC_OscConfig+0x4f8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x4f8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a8a      	ldr	r2, [pc, #552]	; (8004134 <HAL_RCC_OscConfig+0x4f8>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7ff fc01 	bl	8003718 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7ff fbfd 	bl	8003718 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0fd      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x4f8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x312>
 8003f40:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4a7a      	ldr	r2, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6213      	str	r3, [r2, #32]
 8003f4c:	e02d      	b.n	8003faa <HAL_RCC_OscConfig+0x36e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x334>
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	4b73      	ldr	r3, [pc, #460]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4a72      	ldr	r2, [pc, #456]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6213      	str	r3, [r2, #32]
 8003f6e:	e01c      	b.n	8003faa <HAL_RCC_OscConfig+0x36e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x356>
 8003f78:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a6c      	ldr	r2, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4a69      	ldr	r2, [pc, #420]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6213      	str	r3, [r2, #32]
 8003f90:	e00b      	b.n	8003faa <HAL_RCC_OscConfig+0x36e>
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a66      	ldr	r2, [pc, #408]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	6213      	str	r3, [r2, #32]
 8003f9e:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	4a63      	ldr	r2, [pc, #396]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d015      	beq.n	8003fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7ff fbb1 	bl	8003718 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7ff fbad 	bl	8003718 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0ab      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	4b57      	ldr	r3, [pc, #348]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ee      	beq.n	8003fba <HAL_RCC_OscConfig+0x37e>
 8003fdc:	e014      	b.n	8004008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7ff fb9b 	bl	8003718 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7ff fb97 	bl	8003718 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e095      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ee      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4a47      	ldr	r2, [pc, #284]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8081 	beq.w	8004126 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004024:	4b42      	ldr	r3, [pc, #264]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b08      	cmp	r3, #8
 800402e:	d061      	beq.n	80040f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d146      	bne.n	80040c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_OscConfig+0x4fc>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7ff fb6b 	bl	8003718 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7ff fb67 	bl	8003718 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e067      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d108      	bne.n	8004080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800406e:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	492d      	ldr	r1, [pc, #180]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004080:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a19      	ldr	r1, [r3, #32]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	430b      	orrs	r3, r1
 8004092:	4927      	ldr	r1, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_RCC_OscConfig+0x4fc>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7ff fb3b 	bl	8003718 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a6:	f7ff fb37 	bl	8003718 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e037      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x46a>
 80040c4:	e02f      	b.n	8004126 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <HAL_RCC_OscConfig+0x4fc>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7ff fb24 	bl	8003718 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7ff fb20 	bl	8003718 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e020      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x498>
 80040f2:	e018      	b.n	8004126 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e013      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	429a      	cmp	r2, r3
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	42420060 	.word	0x42420060

0800413c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0d0      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b6a      	ldr	r3, [pc, #424]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d910      	bls.n	8004180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b67      	ldr	r3, [pc, #412]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0207 	bic.w	r2, r3, #7
 8004166:	4965      	ldr	r1, [pc, #404]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b8      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d040      	beq.n	800425c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d115      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e073      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06b      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f023 0203 	bic.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4936      	ldr	r1, [pc, #216]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422c:	f7ff fa74 	bl	8003718 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	e00a      	b.n	800424a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7ff fa70 	bl	8003718 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e053      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 020c 	and.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1eb      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d210      	bcs.n	800428c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 0207 	bic.w	r2, r3, #7
 8004272:	4922      	ldr	r1, [pc, #136]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e032      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f821 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a0a      	ldr	r2, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	5cd3      	ldrb	r3, [r2, r3]
 80042de:	fa21 f303 	lsr.w	r3, r1, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1cc>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1d0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f9d2 	bl	8003694 <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40022000 	.word	0x40022000
 8004300:	40021000 	.word	0x40021000
 8004304:	08006cc4 	.word	0x08006cc4
 8004308:	2000000c 	.word	0x2000000c
 800430c:	20000010 	.word	0x20000010

08004310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	b490      	push	{r4, r7}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004316:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004318:	1d3c      	adds	r4, r7, #4
 800431a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800431c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d002      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x40>
 800434a:	2b08      	cmp	r3, #8
 800434c:	d003      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x46>
 800434e:	e02d      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004350:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004352:	623b      	str	r3, [r7, #32]
      break;
 8004354:	e02d      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	0c9b      	lsrs	r3, r3, #18
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004362:	4413      	add	r3, r2
 8004364:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004368:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004374:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c5b      	lsrs	r3, r3, #17
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004382:	4413      	add	r3, r2
 8004384:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004388:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800438e:	fb02 f203 	mul.w	r2, r2, r3
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	e004      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	623b      	str	r3, [r7, #32]
      break;
 80043aa:	e002      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80043ae:	623b      	str	r3, [r7, #32]
      break;
 80043b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc90      	pop	{r4, r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	080064d8 	.word	0x080064d8
 80043c4:	080064e8 	.word	0x080064e8
 80043c8:	40021000 	.word	0x40021000
 80043cc:	007a1200 	.word	0x007a1200
 80043d0:	003d0900 	.word	0x003d0900

080043d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <RCC_Delay+0x34>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <RCC_Delay+0x38>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	0a5b      	lsrs	r3, r3, #9
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043f0:	bf00      	nop
  }
  while (Delay --);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f9      	bne.n	80043f0 <RCC_Delay+0x1c>
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	2000000c 	.word	0x2000000c
 800440c:	10624dd3 	.word	0x10624dd3

08004410 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_SRAM_Init+0x1c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	d101      	bne.n	8004430 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e038      	b.n	80044a2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7fc fc57 	bl	8000cf8 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3308      	adds	r3, #8
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 f829 	bl	80044ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	461a      	mov	r2, r3
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	f000 f88b 	bl	8004580 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6858      	ldr	r0, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	f000 f8b6 	bl	80045e8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	f041 0101 	orr.w	r1, r1, #1
 8004494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f023 0101 	bic.w	r1, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d102      	bne.n	80044dc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80044d6:	2340      	movs	r3, #64	; 0x40
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e001      	b.n	80044e0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80044ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80044f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80044f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80044fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004504:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800450a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004510:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004516:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800451c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <FSMC_NORSRAM_Init+0xd0>)
 800453c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004544:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800454c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	43db      	mvns	r3, r3
 800455c:	ea02 0103 	and.w	r1, r2, r3
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4319      	orrs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	0008fb7f 	.word	0x0008fb7f

08004580 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004596:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	051b      	lsls	r3, r3, #20
 80045be:	431a      	orrs	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	3b02      	subs	r3, #2
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	3201      	adds	r2, #1
 80045d4:	4319      	orrs	r1, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fc:	d11d      	bne.n	800463a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004608:	4013      	ands	r3, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	0112      	lsls	r2, r2, #4
 8004614:	4311      	orrs	r1, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	0212      	lsls	r2, r2, #8
 800461c:	4311      	orrs	r1, r2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	6992      	ldr	r2, [r2, #24]
 8004622:	4311      	orrs	r1, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68d2      	ldr	r2, [r2, #12]
 8004628:	0412      	lsls	r2, r2, #16
 800462a:	430a      	orrs	r2, r1
 800462c:	ea43 0102 	orr.w	r1, r3, r2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004638:	e005      	b.n	8004646 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	cff00000 	.word	0xcff00000

08004658 <__errno>:
 8004658:	4b01      	ldr	r3, [pc, #4]	; (8004660 <__errno+0x8>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000018 	.word	0x20000018

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	2500      	movs	r5, #0
 8004668:	4e0c      	ldr	r6, [pc, #48]	; (800469c <__libc_init_array+0x38>)
 800466a:	4c0d      	ldr	r4, [pc, #52]	; (80046a0 <__libc_init_array+0x3c>)
 800466c:	1ba4      	subs	r4, r4, r6
 800466e:	10a4      	asrs	r4, r4, #2
 8004670:	42a5      	cmp	r5, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	f001 fed4 	bl	8006420 <_init>
 8004678:	2500      	movs	r5, #0
 800467a:	4e0a      	ldr	r6, [pc, #40]	; (80046a4 <__libc_init_array+0x40>)
 800467c:	4c0a      	ldr	r4, [pc, #40]	; (80046a8 <__libc_init_array+0x44>)
 800467e:	1ba4      	subs	r4, r4, r6
 8004680:	10a4      	asrs	r4, r4, #2
 8004682:	42a5      	cmp	r5, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800468c:	4798      	blx	r3
 800468e:	3501      	adds	r5, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004696:	4798      	blx	r3
 8004698:	3501      	adds	r5, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	08006ee0 	.word	0x08006ee0
 80046a0:	08006ee0 	.word	0x08006ee0
 80046a4:	08006ee0 	.word	0x08006ee0
 80046a8:	08006ee4 	.word	0x08006ee4

080046ac <memset>:
 80046ac:	4603      	mov	r3, r0
 80046ae:	4402      	add	r2, r0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d100      	bne.n	80046b6 <memset+0xa>
 80046b4:	4770      	bx	lr
 80046b6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ba:	e7f9      	b.n	80046b0 <memset+0x4>

080046bc <srand>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <srand+0x38>)
 80046c0:	4605      	mov	r5, r0
 80046c2:	681c      	ldr	r4, [r3, #0]
 80046c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046c6:	b97b      	cbnz	r3, 80046e8 <srand+0x2c>
 80046c8:	2018      	movs	r0, #24
 80046ca:	f000 f8a3 	bl	8004814 <malloc>
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <srand+0x3c>)
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <srand+0x40>)
 80046d2:	63a0      	str	r0, [r4, #56]	; 0x38
 80046d4:	e9c0 2300 	strd	r2, r3, [r0]
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <srand+0x44>)
 80046da:	2201      	movs	r2, #1
 80046dc:	6083      	str	r3, [r0, #8]
 80046de:	230b      	movs	r3, #11
 80046e0:	8183      	strh	r3, [r0, #12]
 80046e2:	2300      	movs	r3, #0
 80046e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80046e8:	2200      	movs	r2, #0
 80046ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ec:	611d      	str	r5, [r3, #16]
 80046ee:	615a      	str	r2, [r3, #20]
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	20000018 	.word	0x20000018
 80046f8:	abcd330e 	.word	0xabcd330e
 80046fc:	e66d1234 	.word	0xe66d1234
 8004700:	0005deec 	.word	0x0005deec

08004704 <rand>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4b13      	ldr	r3, [pc, #76]	; (8004754 <rand+0x50>)
 8004708:	681c      	ldr	r4, [r3, #0]
 800470a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470c:	b97b      	cbnz	r3, 800472e <rand+0x2a>
 800470e:	2018      	movs	r0, #24
 8004710:	f000 f880 	bl	8004814 <malloc>
 8004714:	4a10      	ldr	r2, [pc, #64]	; (8004758 <rand+0x54>)
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <rand+0x58>)
 8004718:	63a0      	str	r0, [r4, #56]	; 0x38
 800471a:	e9c0 2300 	strd	r2, r3, [r0]
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <rand+0x5c>)
 8004720:	2201      	movs	r2, #1
 8004722:	6083      	str	r3, [r0, #8]
 8004724:	230b      	movs	r3, #11
 8004726:	8183      	strh	r3, [r0, #12]
 8004728:	2300      	movs	r3, #0
 800472a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800472e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004730:	480c      	ldr	r0, [pc, #48]	; (8004764 <rand+0x60>)
 8004732:	690a      	ldr	r2, [r1, #16]
 8004734:	694b      	ldr	r3, [r1, #20]
 8004736:	4350      	muls	r0, r2
 8004738:	4c0b      	ldr	r4, [pc, #44]	; (8004768 <rand+0x64>)
 800473a:	fb04 0003 	mla	r0, r4, r3, r0
 800473e:	fba2 2304 	umull	r2, r3, r2, r4
 8004742:	4403      	add	r3, r0
 8004744:	1c54      	adds	r4, r2, #1
 8004746:	f143 0500 	adc.w	r5, r3, #0
 800474a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800474e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	20000018 	.word	0x20000018
 8004758:	abcd330e 	.word	0xabcd330e
 800475c:	e66d1234 	.word	0xe66d1234
 8004760:	0005deec 	.word	0x0005deec
 8004764:	5851f42d 	.word	0x5851f42d
 8004768:	4c957f2d 	.word	0x4c957f2d

0800476c <random>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <random+0x50>)
 8004770:	681c      	ldr	r4, [r3, #0]
 8004772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004774:	b97b      	cbnz	r3, 8004796 <random+0x2a>
 8004776:	2018      	movs	r0, #24
 8004778:	f000 f84c 	bl	8004814 <malloc>
 800477c:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <random+0x54>)
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <random+0x58>)
 8004780:	63a0      	str	r0, [r4, #56]	; 0x38
 8004782:	e9c0 2300 	strd	r2, r3, [r0]
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <random+0x5c>)
 8004788:	2201      	movs	r2, #1
 800478a:	6083      	str	r3, [r0, #8]
 800478c:	230b      	movs	r3, #11
 800478e:	8183      	strh	r3, [r0, #12]
 8004790:	2300      	movs	r3, #0
 8004792:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004796:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004798:	480c      	ldr	r0, [pc, #48]	; (80047cc <random+0x60>)
 800479a:	690a      	ldr	r2, [r1, #16]
 800479c:	694b      	ldr	r3, [r1, #20]
 800479e:	4350      	muls	r0, r2
 80047a0:	4c0b      	ldr	r4, [pc, #44]	; (80047d0 <random+0x64>)
 80047a2:	fb04 0003 	mla	r0, r4, r3, r0
 80047a6:	fba2 2304 	umull	r2, r3, r2, r4
 80047aa:	4403      	add	r3, r0
 80047ac:	1c54      	adds	r4, r2, #1
 80047ae:	f143 0500 	adc.w	r5, r3, #0
 80047b2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80047b6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	20000018 	.word	0x20000018
 80047c0:	abcd330e 	.word	0xabcd330e
 80047c4:	e66d1234 	.word	0xe66d1234
 80047c8:	0005deec 	.word	0x0005deec
 80047cc:	5851f42d 	.word	0x5851f42d
 80047d0:	4c957f2d 	.word	0x4c957f2d

080047d4 <siprintf>:
 80047d4:	b40e      	push	{r1, r2, r3}
 80047d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047da:	b500      	push	{lr}
 80047dc:	b09c      	sub	sp, #112	; 0x70
 80047de:	ab1d      	add	r3, sp, #116	; 0x74
 80047e0:	9002      	str	r0, [sp, #8]
 80047e2:	9006      	str	r0, [sp, #24]
 80047e4:	9107      	str	r1, [sp, #28]
 80047e6:	9104      	str	r1, [sp, #16]
 80047e8:	4808      	ldr	r0, [pc, #32]	; (800480c <siprintf+0x38>)
 80047ea:	4909      	ldr	r1, [pc, #36]	; (8004810 <siprintf+0x3c>)
 80047ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f0:	9105      	str	r1, [sp, #20]
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	a902      	add	r1, sp, #8
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	f000 f914 	bl	8004a24 <_svfiprintf_r>
 80047fc:	2200      	movs	r2, #0
 80047fe:	9b02      	ldr	r3, [sp, #8]
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	b01c      	add	sp, #112	; 0x70
 8004804:	f85d eb04 	ldr.w	lr, [sp], #4
 8004808:	b003      	add	sp, #12
 800480a:	4770      	bx	lr
 800480c:	20000018 	.word	0x20000018
 8004810:	ffff0208 	.word	0xffff0208

08004814 <malloc>:
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <malloc+0xc>)
 8004816:	4601      	mov	r1, r0
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f000 b84f 	b.w	80048bc <_malloc_r>
 800481e:	bf00      	nop
 8004820:	20000018 	.word	0x20000018

08004824 <_free_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4605      	mov	r5, r0
 8004828:	2900      	cmp	r1, #0
 800482a:	d043      	beq.n	80048b4 <_free_r+0x90>
 800482c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004830:	1f0c      	subs	r4, r1, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfb8      	it	lt
 8004836:	18e4      	addlt	r4, r4, r3
 8004838:	f000 fbb6 	bl	8004fa8 <__malloc_lock>
 800483c:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <_free_r+0x94>)
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	4610      	mov	r0, r2
 8004842:	b933      	cbnz	r3, 8004852 <_free_r+0x2e>
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	6014      	str	r4, [r2, #0]
 8004848:	4628      	mov	r0, r5
 800484a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800484e:	f000 bbac 	b.w	8004faa <__malloc_unlock>
 8004852:	42a3      	cmp	r3, r4
 8004854:	d90b      	bls.n	800486e <_free_r+0x4a>
 8004856:	6821      	ldr	r1, [r4, #0]
 8004858:	1862      	adds	r2, r4, r1
 800485a:	4293      	cmp	r3, r2
 800485c:	bf01      	itttt	eq
 800485e:	681a      	ldreq	r2, [r3, #0]
 8004860:	685b      	ldreq	r3, [r3, #4]
 8004862:	1852      	addeq	r2, r2, r1
 8004864:	6022      	streq	r2, [r4, #0]
 8004866:	6063      	str	r3, [r4, #4]
 8004868:	6004      	str	r4, [r0, #0]
 800486a:	e7ed      	b.n	8004848 <_free_r+0x24>
 800486c:	4613      	mov	r3, r2
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	b10a      	cbz	r2, 8004876 <_free_r+0x52>
 8004872:	42a2      	cmp	r2, r4
 8004874:	d9fa      	bls.n	800486c <_free_r+0x48>
 8004876:	6819      	ldr	r1, [r3, #0]
 8004878:	1858      	adds	r0, r3, r1
 800487a:	42a0      	cmp	r0, r4
 800487c:	d10b      	bne.n	8004896 <_free_r+0x72>
 800487e:	6820      	ldr	r0, [r4, #0]
 8004880:	4401      	add	r1, r0
 8004882:	1858      	adds	r0, r3, r1
 8004884:	4282      	cmp	r2, r0
 8004886:	6019      	str	r1, [r3, #0]
 8004888:	d1de      	bne.n	8004848 <_free_r+0x24>
 800488a:	6810      	ldr	r0, [r2, #0]
 800488c:	6852      	ldr	r2, [r2, #4]
 800488e:	4401      	add	r1, r0
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	e7d8      	b.n	8004848 <_free_r+0x24>
 8004896:	d902      	bls.n	800489e <_free_r+0x7a>
 8004898:	230c      	movs	r3, #12
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	e7d4      	b.n	8004848 <_free_r+0x24>
 800489e:	6820      	ldr	r0, [r4, #0]
 80048a0:	1821      	adds	r1, r4, r0
 80048a2:	428a      	cmp	r2, r1
 80048a4:	bf01      	itttt	eq
 80048a6:	6811      	ldreq	r1, [r2, #0]
 80048a8:	6852      	ldreq	r2, [r2, #4]
 80048aa:	1809      	addeq	r1, r1, r0
 80048ac:	6021      	streq	r1, [r4, #0]
 80048ae:	6062      	str	r2, [r4, #4]
 80048b0:	605c      	str	r4, [r3, #4]
 80048b2:	e7c9      	b.n	8004848 <_free_r+0x24>
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
 80048b6:	bf00      	nop
 80048b8:	200000a0 	.word	0x200000a0

080048bc <_malloc_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	1ccd      	adds	r5, r1, #3
 80048c0:	f025 0503 	bic.w	r5, r5, #3
 80048c4:	3508      	adds	r5, #8
 80048c6:	2d0c      	cmp	r5, #12
 80048c8:	bf38      	it	cc
 80048ca:	250c      	movcc	r5, #12
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	4606      	mov	r6, r0
 80048d0:	db01      	blt.n	80048d6 <_malloc_r+0x1a>
 80048d2:	42a9      	cmp	r1, r5
 80048d4:	d903      	bls.n	80048de <_malloc_r+0x22>
 80048d6:	230c      	movs	r3, #12
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	2000      	movs	r0, #0
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	f000 fb63 	bl	8004fa8 <__malloc_lock>
 80048e2:	4a21      	ldr	r2, [pc, #132]	; (8004968 <_malloc_r+0xac>)
 80048e4:	6814      	ldr	r4, [r2, #0]
 80048e6:	4621      	mov	r1, r4
 80048e8:	b991      	cbnz	r1, 8004910 <_malloc_r+0x54>
 80048ea:	4c20      	ldr	r4, [pc, #128]	; (800496c <_malloc_r+0xb0>)
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	b91b      	cbnz	r3, 80048f8 <_malloc_r+0x3c>
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 fb17 	bl	8004f24 <_sbrk_r>
 80048f6:	6020      	str	r0, [r4, #0]
 80048f8:	4629      	mov	r1, r5
 80048fa:	4630      	mov	r0, r6
 80048fc:	f000 fb12 	bl	8004f24 <_sbrk_r>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d124      	bne.n	800494e <_malloc_r+0x92>
 8004904:	230c      	movs	r3, #12
 8004906:	4630      	mov	r0, r6
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	f000 fb4e 	bl	8004faa <__malloc_unlock>
 800490e:	e7e4      	b.n	80048da <_malloc_r+0x1e>
 8004910:	680b      	ldr	r3, [r1, #0]
 8004912:	1b5b      	subs	r3, r3, r5
 8004914:	d418      	bmi.n	8004948 <_malloc_r+0x8c>
 8004916:	2b0b      	cmp	r3, #11
 8004918:	d90f      	bls.n	800493a <_malloc_r+0x7e>
 800491a:	600b      	str	r3, [r1, #0]
 800491c:	18cc      	adds	r4, r1, r3
 800491e:	50cd      	str	r5, [r1, r3]
 8004920:	4630      	mov	r0, r6
 8004922:	f000 fb42 	bl	8004faa <__malloc_unlock>
 8004926:	f104 000b 	add.w	r0, r4, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	f020 0007 	bic.w	r0, r0, #7
 8004930:	1ac3      	subs	r3, r0, r3
 8004932:	d0d3      	beq.n	80048dc <_malloc_r+0x20>
 8004934:	425a      	negs	r2, r3
 8004936:	50e2      	str	r2, [r4, r3]
 8004938:	e7d0      	b.n	80048dc <_malloc_r+0x20>
 800493a:	684b      	ldr	r3, [r1, #4]
 800493c:	428c      	cmp	r4, r1
 800493e:	bf16      	itet	ne
 8004940:	6063      	strne	r3, [r4, #4]
 8004942:	6013      	streq	r3, [r2, #0]
 8004944:	460c      	movne	r4, r1
 8004946:	e7eb      	b.n	8004920 <_malloc_r+0x64>
 8004948:	460c      	mov	r4, r1
 800494a:	6849      	ldr	r1, [r1, #4]
 800494c:	e7cc      	b.n	80048e8 <_malloc_r+0x2c>
 800494e:	1cc4      	adds	r4, r0, #3
 8004950:	f024 0403 	bic.w	r4, r4, #3
 8004954:	42a0      	cmp	r0, r4
 8004956:	d005      	beq.n	8004964 <_malloc_r+0xa8>
 8004958:	1a21      	subs	r1, r4, r0
 800495a:	4630      	mov	r0, r6
 800495c:	f000 fae2 	bl	8004f24 <_sbrk_r>
 8004960:	3001      	adds	r0, #1
 8004962:	d0cf      	beq.n	8004904 <_malloc_r+0x48>
 8004964:	6025      	str	r5, [r4, #0]
 8004966:	e7db      	b.n	8004920 <_malloc_r+0x64>
 8004968:	200000a0 	.word	0x200000a0
 800496c:	200000a4 	.word	0x200000a4

08004970 <__ssputs_r>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	688e      	ldr	r6, [r1, #8]
 8004976:	4682      	mov	sl, r0
 8004978:	429e      	cmp	r6, r3
 800497a:	460c      	mov	r4, r1
 800497c:	4690      	mov	r8, r2
 800497e:	4699      	mov	r9, r3
 8004980:	d837      	bhi.n	80049f2 <__ssputs_r+0x82>
 8004982:	898a      	ldrh	r2, [r1, #12]
 8004984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004988:	d031      	beq.n	80049ee <__ssputs_r+0x7e>
 800498a:	2302      	movs	r3, #2
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	6909      	ldr	r1, [r1, #16]
 8004990:	1a6f      	subs	r7, r5, r1
 8004992:	6965      	ldr	r5, [r4, #20]
 8004994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004998:	fb95 f5f3 	sdiv	r5, r5, r3
 800499c:	f109 0301 	add.w	r3, r9, #1
 80049a0:	443b      	add	r3, r7
 80049a2:	429d      	cmp	r5, r3
 80049a4:	bf38      	it	cc
 80049a6:	461d      	movcc	r5, r3
 80049a8:	0553      	lsls	r3, r2, #21
 80049aa:	d530      	bpl.n	8004a0e <__ssputs_r+0x9e>
 80049ac:	4629      	mov	r1, r5
 80049ae:	f7ff ff85 	bl	80048bc <_malloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	b950      	cbnz	r0, 80049cc <__ssputs_r+0x5c>
 80049b6:	230c      	movs	r3, #12
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f8ca 3000 	str.w	r3, [sl]
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	463a      	mov	r2, r7
 80049ce:	6921      	ldr	r1, [r4, #16]
 80049d0:	f000 fac6 	bl	8004f60 <memcpy>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	6126      	str	r6, [r4, #16]
 80049e2:	443e      	add	r6, r7
 80049e4:	6026      	str	r6, [r4, #0]
 80049e6:	464e      	mov	r6, r9
 80049e8:	6165      	str	r5, [r4, #20]
 80049ea:	1bed      	subs	r5, r5, r7
 80049ec:	60a5      	str	r5, [r4, #8]
 80049ee:	454e      	cmp	r6, r9
 80049f0:	d900      	bls.n	80049f4 <__ssputs_r+0x84>
 80049f2:	464e      	mov	r6, r9
 80049f4:	4632      	mov	r2, r6
 80049f6:	4641      	mov	r1, r8
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	f000 fabc 	bl	8004f76 <memmove>
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	2000      	movs	r0, #0
 8004a02:	1b9b      	subs	r3, r3, r6
 8004a04:	60a3      	str	r3, [r4, #8]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	441e      	add	r6, r3
 8004a0a:	6026      	str	r6, [r4, #0]
 8004a0c:	e7dc      	b.n	80049c8 <__ssputs_r+0x58>
 8004a0e:	462a      	mov	r2, r5
 8004a10:	f000 facc 	bl	8004fac <_realloc_r>
 8004a14:	4606      	mov	r6, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1e2      	bne.n	80049e0 <__ssputs_r+0x70>
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	f7ff ff01 	bl	8004824 <_free_r>
 8004a22:	e7c8      	b.n	80049b6 <__ssputs_r+0x46>

08004a24 <_svfiprintf_r>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	461d      	mov	r5, r3
 8004a2a:	898b      	ldrh	r3, [r1, #12]
 8004a2c:	b09d      	sub	sp, #116	; 0x74
 8004a2e:	061f      	lsls	r7, r3, #24
 8004a30:	4680      	mov	r8, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	d50f      	bpl.n	8004a58 <_svfiprintf_r+0x34>
 8004a38:	690b      	ldr	r3, [r1, #16]
 8004a3a:	b96b      	cbnz	r3, 8004a58 <_svfiprintf_r+0x34>
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	f7ff ff3d 	bl	80048bc <_malloc_r>
 8004a42:	6020      	str	r0, [r4, #0]
 8004a44:	6120      	str	r0, [r4, #16]
 8004a46:	b928      	cbnz	r0, 8004a54 <_svfiprintf_r+0x30>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	f8c8 3000 	str.w	r3, [r8]
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	e0c8      	b.n	8004be6 <_svfiprintf_r+0x1c2>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	6163      	str	r3, [r4, #20]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a62:	2330      	movs	r3, #48	; 0x30
 8004a64:	f04f 0b01 	mov.w	fp, #1
 8004a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a6c:	9503      	str	r5, [sp, #12]
 8004a6e:	4637      	mov	r7, r6
 8004a70:	463d      	mov	r5, r7
 8004a72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a76:	b10b      	cbz	r3, 8004a7c <_svfiprintf_r+0x58>
 8004a78:	2b25      	cmp	r3, #37	; 0x25
 8004a7a:	d13e      	bne.n	8004afa <_svfiprintf_r+0xd6>
 8004a7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a80:	d00b      	beq.n	8004a9a <_svfiprintf_r+0x76>
 8004a82:	4653      	mov	r3, sl
 8004a84:	4632      	mov	r2, r6
 8004a86:	4621      	mov	r1, r4
 8004a88:	4640      	mov	r0, r8
 8004a8a:	f7ff ff71 	bl	8004970 <__ssputs_r>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f000 80a4 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a96:	4453      	add	r3, sl
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	783b      	ldrb	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 809d 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ab6:	462f      	mov	r7, r5
 8004ab8:	2205      	movs	r2, #5
 8004aba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004abe:	4850      	ldr	r0, [pc, #320]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004ac0:	f000 fa40 	bl	8004f44 <memchr>
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	b9d0      	cbnz	r0, 8004afe <_svfiprintf_r+0xda>
 8004ac8:	06d9      	lsls	r1, r3, #27
 8004aca:	bf44      	itt	mi
 8004acc:	2220      	movmi	r2, #32
 8004ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ad2:	071a      	lsls	r2, r3, #28
 8004ad4:	bf44      	itt	mi
 8004ad6:	222b      	movmi	r2, #43	; 0x2b
 8004ad8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004adc:	782a      	ldrb	r2, [r5, #0]
 8004ade:	2a2a      	cmp	r2, #42	; 0x2a
 8004ae0:	d015      	beq.n	8004b0e <_svfiprintf_r+0xea>
 8004ae2:	462f      	mov	r7, r5
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	250a      	movs	r5, #10
 8004ae8:	9a07      	ldr	r2, [sp, #28]
 8004aea:	4639      	mov	r1, r7
 8004aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af0:	3b30      	subs	r3, #48	; 0x30
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d94d      	bls.n	8004b92 <_svfiprintf_r+0x16e>
 8004af6:	b1b8      	cbz	r0, 8004b28 <_svfiprintf_r+0x104>
 8004af8:	e00f      	b.n	8004b1a <_svfiprintf_r+0xf6>
 8004afa:	462f      	mov	r7, r5
 8004afc:	e7b8      	b.n	8004a70 <_svfiprintf_r+0x4c>
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004b00:	463d      	mov	r5, r7
 8004b02:	1a80      	subs	r0, r0, r2
 8004b04:	fa0b f000 	lsl.w	r0, fp, r0
 8004b08:	4318      	orrs	r0, r3
 8004b0a:	9004      	str	r0, [sp, #16]
 8004b0c:	e7d3      	b.n	8004ab6 <_svfiprintf_r+0x92>
 8004b0e:	9a03      	ldr	r2, [sp, #12]
 8004b10:	1d11      	adds	r1, r2, #4
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	9103      	str	r1, [sp, #12]
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	db01      	blt.n	8004b1e <_svfiprintf_r+0xfa>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e004      	b.n	8004b28 <_svfiprintf_r+0x104>
 8004b1e:	4252      	negs	r2, r2
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2c:	d10c      	bne.n	8004b48 <_svfiprintf_r+0x124>
 8004b2e:	787b      	ldrb	r3, [r7, #1]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d133      	bne.n	8004b9c <_svfiprintf_r+0x178>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	3702      	adds	r7, #2
 8004b38:	1d1a      	adds	r2, r3, #4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	9203      	str	r2, [sp, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bfb8      	it	lt
 8004b42:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	4d2e      	ldr	r5, [pc, #184]	; (8004c04 <_svfiprintf_r+0x1e0>)
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	7839      	ldrb	r1, [r7, #0]
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 f9f8 	bl	8004f44 <memchr>
 8004b54:	b138      	cbz	r0, 8004b66 <_svfiprintf_r+0x142>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	1b40      	subs	r0, r0, r5
 8004b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	3701      	adds	r7, #1
 8004b62:	4303      	orrs	r3, r0
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	7839      	ldrb	r1, [r7, #0]
 8004b68:	2206      	movs	r2, #6
 8004b6a:	4827      	ldr	r0, [pc, #156]	; (8004c08 <_svfiprintf_r+0x1e4>)
 8004b6c:	1c7e      	adds	r6, r7, #1
 8004b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b72:	f000 f9e7 	bl	8004f44 <memchr>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d038      	beq.n	8004bec <_svfiprintf_r+0x1c8>
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <_svfiprintf_r+0x1e8>)
 8004b7c:	bb13      	cbnz	r3, 8004bc4 <_svfiprintf_r+0x1a0>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	3308      	adds	r3, #8
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8c:	444b      	add	r3, r9
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	e76d      	b.n	8004a6e <_svfiprintf_r+0x4a>
 8004b92:	fb05 3202 	mla	r2, r5, r2, r3
 8004b96:	2001      	movs	r0, #1
 8004b98:	460f      	mov	r7, r1
 8004b9a:	e7a6      	b.n	8004aea <_svfiprintf_r+0xc6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	250a      	movs	r5, #10
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	3701      	adds	r7, #1
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bac:	3a30      	subs	r2, #48	; 0x30
 8004bae:	2a09      	cmp	r2, #9
 8004bb0:	d903      	bls.n	8004bba <_svfiprintf_r+0x196>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0c8      	beq.n	8004b48 <_svfiprintf_r+0x124>
 8004bb6:	9105      	str	r1, [sp, #20]
 8004bb8:	e7c6      	b.n	8004b48 <_svfiprintf_r+0x124>
 8004bba:	fb05 2101 	mla	r1, r5, r1, r2
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	e7f0      	b.n	8004ba6 <_svfiprintf_r+0x182>
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f3af 8000 	nop.w
 8004bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bd8:	4681      	mov	r9, r0
 8004bda:	d1d6      	bne.n	8004b8a <_svfiprintf_r+0x166>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	065b      	lsls	r3, r3, #25
 8004be0:	f53f af35 	bmi.w	8004a4e <_svfiprintf_r+0x2a>
 8004be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be6:	b01d      	add	sp, #116	; 0x74
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f000 f882 	bl	8004d00 <_printf_i>
 8004bfc:	e7ea      	b.n	8004bd4 <_svfiprintf_r+0x1b0>
 8004bfe:	bf00      	nop
 8004c00:	08006cd4 	.word	0x08006cd4
 8004c04:	08006cda 	.word	0x08006cda
 8004c08:	08006cde 	.word	0x08006cde
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	08004971 	.word	0x08004971

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4691      	mov	r9, r2
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	4606      	mov	r6, r0
 8004c22:	4293      	cmp	r3, r2
 8004c24:	bfb8      	it	lt
 8004c26:	4613      	movlt	r3, r2
 8004c28:	f8c9 3000 	str.w	r3, [r9]
 8004c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c30:	460c      	mov	r4, r1
 8004c32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c36:	b112      	cbz	r2, 8004c3e <_printf_common+0x2a>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f8c9 3000 	str.w	r3, [r9]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c48:	3302      	addmi	r3, #2
 8004c4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	f015 0506 	ands.w	r5, r5, #6
 8004c54:	d107      	bne.n	8004c66 <_printf_common+0x52>
 8004c56:	f104 0a19 	add.w	sl, r4, #25
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	dc29      	bgt.n	8004cba <_printf_common+0xa6>
 8004c66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	3300      	adds	r3, #0
 8004c6e:	bf18      	it	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	0692      	lsls	r2, r2, #26
 8004c74:	d42e      	bmi.n	8004cd4 <_printf_common+0xc0>
 8004c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	47c0      	blx	r8
 8004c80:	3001      	adds	r0, #1
 8004c82:	d021      	beq.n	8004cc8 <_printf_common+0xb4>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	68e5      	ldr	r5, [r4, #12]
 8004c88:	f003 0306 	and.w	r3, r3, #6
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	bf18      	it	ne
 8004c90:	2500      	movne	r5, #0
 8004c92:	f8d9 2000 	ldr.w	r2, [r9]
 8004c96:	f04f 0900 	mov.w	r9, #0
 8004c9a:	bf08      	it	eq
 8004c9c:	1aad      	subeq	r5, r5, r2
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	bf08      	it	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bfc4      	itt	gt
 8004cac:	1a9b      	subgt	r3, r3, r2
 8004cae:	18ed      	addgt	r5, r5, r3
 8004cb0:	341a      	adds	r4, #26
 8004cb2:	454d      	cmp	r5, r9
 8004cb4:	d11a      	bne.n	8004cec <_printf_common+0xd8>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e008      	b.n	8004ccc <_printf_common+0xb8>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	47c0      	blx	r8
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d103      	bne.n	8004cd0 <_printf_common+0xbc>
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	3501      	adds	r5, #1
 8004cd2:	e7c2      	b.n	8004c5a <_printf_common+0x46>
 8004cd4:	2030      	movs	r0, #48	; 0x30
 8004cd6:	18e1      	adds	r1, r4, r3
 8004cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce2:	4422      	add	r2, r4
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cea:	e7c4      	b.n	8004c76 <_printf_common+0x62>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4622      	mov	r2, r4
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	47c0      	blx	r8
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d0e6      	beq.n	8004cc8 <_printf_common+0xb4>
 8004cfa:	f109 0901 	add.w	r9, r9, #1
 8004cfe:	e7d8      	b.n	8004cb2 <_printf_common+0x9e>

08004d00 <_printf_i>:
 8004d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d08:	460c      	mov	r4, r1
 8004d0a:	7e09      	ldrb	r1, [r1, #24]
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	296e      	cmp	r1, #110	; 0x6e
 8004d10:	4617      	mov	r7, r2
 8004d12:	4606      	mov	r6, r0
 8004d14:	4698      	mov	r8, r3
 8004d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d18:	f000 80b3 	beq.w	8004e82 <_printf_i+0x182>
 8004d1c:	d822      	bhi.n	8004d64 <_printf_i+0x64>
 8004d1e:	2963      	cmp	r1, #99	; 0x63
 8004d20:	d036      	beq.n	8004d90 <_printf_i+0x90>
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x3a>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	f000 80b9 	beq.w	8004e9c <_printf_i+0x19c>
 8004d2a:	2958      	cmp	r1, #88	; 0x58
 8004d2c:	f000 8083 	beq.w	8004e36 <_printf_i+0x136>
 8004d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d38:	e032      	b.n	8004da0 <_printf_i+0xa0>
 8004d3a:	2964      	cmp	r1, #100	; 0x64
 8004d3c:	d001      	beq.n	8004d42 <_printf_i+0x42>
 8004d3e:	2969      	cmp	r1, #105	; 0x69
 8004d40:	d1f6      	bne.n	8004d30 <_printf_i+0x30>
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	0605      	lsls	r5, r0, #24
 8004d48:	f103 0104 	add.w	r1, r3, #4
 8004d4c:	d52a      	bpl.n	8004da4 <_printf_i+0xa4>
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da03      	bge.n	8004d5e <_printf_i+0x5e>
 8004d56:	222d      	movs	r2, #45	; 0x2d
 8004d58:	425b      	negs	r3, r3
 8004d5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d5e:	486f      	ldr	r0, [pc, #444]	; (8004f1c <_printf_i+0x21c>)
 8004d60:	220a      	movs	r2, #10
 8004d62:	e039      	b.n	8004dd8 <_printf_i+0xd8>
 8004d64:	2973      	cmp	r1, #115	; 0x73
 8004d66:	f000 809d 	beq.w	8004ea4 <_printf_i+0x1a4>
 8004d6a:	d808      	bhi.n	8004d7e <_printf_i+0x7e>
 8004d6c:	296f      	cmp	r1, #111	; 0x6f
 8004d6e:	d020      	beq.n	8004db2 <_printf_i+0xb2>
 8004d70:	2970      	cmp	r1, #112	; 0x70
 8004d72:	d1dd      	bne.n	8004d30 <_printf_i+0x30>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f043 0320 	orr.w	r3, r3, #32
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e003      	b.n	8004d86 <_printf_i+0x86>
 8004d7e:	2975      	cmp	r1, #117	; 0x75
 8004d80:	d017      	beq.n	8004db2 <_printf_i+0xb2>
 8004d82:	2978      	cmp	r1, #120	; 0x78
 8004d84:	d1d4      	bne.n	8004d30 <_printf_i+0x30>
 8004d86:	2378      	movs	r3, #120	; 0x78
 8004d88:	4865      	ldr	r0, [pc, #404]	; (8004f20 <_printf_i+0x220>)
 8004d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8e:	e055      	b.n	8004e3c <_printf_i+0x13c>
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d96:	1d19      	adds	r1, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6011      	str	r1, [r2, #0]
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da0:	2301      	movs	r3, #1
 8004da2:	e08c      	b.n	8004ebe <_printf_i+0x1be>
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004daa:	6011      	str	r1, [r2, #0]
 8004dac:	bf18      	it	ne
 8004dae:	b21b      	sxthne	r3, r3
 8004db0:	e7cf      	b.n	8004d52 <_printf_i+0x52>
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6010      	str	r0, [r2, #0]
 8004dba:	0628      	lsls	r0, r5, #24
 8004dbc:	d501      	bpl.n	8004dc2 <_printf_i+0xc2>
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <_printf_i+0xc8>
 8004dc2:	0668      	lsls	r0, r5, #25
 8004dc4:	d5fb      	bpl.n	8004dbe <_printf_i+0xbe>
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	296f      	cmp	r1, #111	; 0x6f
 8004dca:	bf14      	ite	ne
 8004dcc:	220a      	movne	r2, #10
 8004dce:	2208      	moveq	r2, #8
 8004dd0:	4852      	ldr	r0, [pc, #328]	; (8004f1c <_printf_i+0x21c>)
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd8:	6865      	ldr	r5, [r4, #4]
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	60a5      	str	r5, [r4, #8]
 8004dde:	f2c0 8095 	blt.w	8004f0c <_printf_i+0x20c>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	f021 0104 	bic.w	r1, r1, #4
 8004de8:	6021      	str	r1, [r4, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13d      	bne.n	8004e6a <_printf_i+0x16a>
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	f040 808e 	bne.w	8004f10 <_printf_i+0x210>
 8004df4:	4665      	mov	r5, ip
 8004df6:	2a08      	cmp	r2, #8
 8004df8:	d10b      	bne.n	8004e12 <_printf_i+0x112>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	07db      	lsls	r3, r3, #31
 8004dfe:	d508      	bpl.n	8004e12 <_printf_i+0x112>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bfde      	ittt	le
 8004e08:	2330      	movle	r3, #48	; 0x30
 8004e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e12:	ebac 0305 	sub.w	r3, ip, r5
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	f8cd 8000 	str.w	r8, [sp]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	aa03      	add	r2, sp, #12
 8004e20:	4621      	mov	r1, r4
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff fef6 	bl	8004c14 <_printf_common>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d14d      	bne.n	8004ec8 <_printf_i+0x1c8>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	b005      	add	sp, #20
 8004e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e36:	4839      	ldr	r0, [pc, #228]	; (8004f1c <_printf_i+0x21c>)
 8004e38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1d1d      	adds	r5, r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6015      	str	r5, [r2, #0]
 8004e46:	060a      	lsls	r2, r1, #24
 8004e48:	d50b      	bpl.n	8004e62 <_printf_i+0x162>
 8004e4a:	07ca      	lsls	r2, r1, #31
 8004e4c:	bf44      	itt	mi
 8004e4e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e52:	6021      	strmi	r1, [r4, #0]
 8004e54:	b91b      	cbnz	r3, 8004e5e <_printf_i+0x15e>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	f022 0220 	bic.w	r2, r2, #32
 8004e5c:	6022      	str	r2, [r4, #0]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	e7b7      	b.n	8004dd2 <_printf_i+0xd2>
 8004e62:	064d      	lsls	r5, r1, #25
 8004e64:	bf48      	it	mi
 8004e66:	b29b      	uxthmi	r3, r3
 8004e68:	e7ef      	b.n	8004e4a <_printf_i+0x14a>
 8004e6a:	4665      	mov	r5, ip
 8004e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e70:	fb02 3311 	mls	r3, r2, r1, r3
 8004e74:	5cc3      	ldrb	r3, [r0, r3]
 8004e76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d1f5      	bne.n	8004e6c <_printf_i+0x16c>
 8004e80:	e7b9      	b.n	8004df6 <_printf_i+0xf6>
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6961      	ldr	r1, [r4, #20]
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	0628      	lsls	r0, r5, #24
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0x196>
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0x19c>
 8004e96:	066a      	lsls	r2, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0x192>
 8004e9a:	8019      	strh	r1, [r3, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4665      	mov	r5, ip
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	e7b9      	b.n	8004e18 <_printf_i+0x118>
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	1d19      	adds	r1, r3, #4
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	681d      	ldr	r5, [r3, #0]
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 f847 	bl	8004f44 <memchr>
 8004eb6:	b108      	cbz	r0, 8004ebc <_printf_i+0x1bc>
 8004eb8:	1b40      	subs	r0, r0, r5
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	e7a7      	b.n	8004e18 <_printf_i+0x118>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0aa      	beq.n	8004e2c <_printf_i+0x12c>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	d413      	bmi.n	8004f04 <_printf_i+0x204>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e7a3      	b.n	8004e30 <_printf_i+0x130>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	464a      	mov	r2, r9
 8004eec:	4639      	mov	r1, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d09a      	beq.n	8004e2c <_printf_i+0x12c>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	dcf2      	bgt.n	8004ee8 <_printf_i+0x1e8>
 8004f02:	e7eb      	b.n	8004edc <_printf_i+0x1dc>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f104 0919 	add.w	r9, r4, #25
 8004f0a:	e7f5      	b.n	8004ef8 <_printf_i+0x1f8>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ac      	bne.n	8004e6a <_printf_i+0x16a>
 8004f10:	7803      	ldrb	r3, [r0, #0]
 8004f12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1a:	e76c      	b.n	8004df6 <_printf_i+0xf6>
 8004f1c:	08006ce5 	.word	0x08006ce5
 8004f20:	08006cf6 	.word	0x08006cf6

08004f24 <_sbrk_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	2300      	movs	r3, #0
 8004f28:	4c05      	ldr	r4, [pc, #20]	; (8004f40 <_sbrk_r+0x1c>)
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	f7fe fb38 	bl	80035a4 <_sbrk>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_sbrk_r+0x1a>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_sbrk_r+0x1a>
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20000104 	.word	0x20000104

08004f44 <memchr>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	b2c9      	uxtb	r1, r1
 8004f48:	4402      	add	r2, r0
 8004f4a:	4290      	cmp	r0, r2
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	d101      	bne.n	8004f54 <memchr+0x10>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e003      	b.n	8004f5c <memchr+0x18>
 8004f54:	781c      	ldrb	r4, [r3, #0]
 8004f56:	3001      	adds	r0, #1
 8004f58:	428c      	cmp	r4, r1
 8004f5a:	d1f6      	bne.n	8004f4a <memchr+0x6>
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd10      	pop	{r4, pc}

08004f60 <memcpy>:
 8004f60:	b510      	push	{r4, lr}
 8004f62:	1e43      	subs	r3, r0, #1
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	d100      	bne.n	8004f6c <memcpy+0xc>
 8004f6a:	bd10      	pop	{r4, pc}
 8004f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f74:	e7f7      	b.n	8004f66 <memcpy+0x6>

08004f76 <memmove>:
 8004f76:	4288      	cmp	r0, r1
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	eb01 0302 	add.w	r3, r1, r2
 8004f7e:	d807      	bhi.n	8004f90 <memmove+0x1a>
 8004f80:	1e42      	subs	r2, r0, #1
 8004f82:	4299      	cmp	r1, r3
 8004f84:	d00a      	beq.n	8004f9c <memmove+0x26>
 8004f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f8e:	e7f8      	b.n	8004f82 <memmove+0xc>
 8004f90:	4283      	cmp	r3, r0
 8004f92:	d9f5      	bls.n	8004f80 <memmove+0xa>
 8004f94:	1881      	adds	r1, r0, r2
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	42d3      	cmn	r3, r2
 8004f9a:	d100      	bne.n	8004f9e <memmove+0x28>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fa2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004fa6:	e7f7      	b.n	8004f98 <memmove+0x22>

08004fa8 <__malloc_lock>:
 8004fa8:	4770      	bx	lr

08004faa <__malloc_unlock>:
 8004faa:	4770      	bx	lr

08004fac <_realloc_r>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	4607      	mov	r7, r0
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	b921      	cbnz	r1, 8004fc0 <_realloc_r+0x14>
 8004fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fba:	4611      	mov	r1, r2
 8004fbc:	f7ff bc7e 	b.w	80048bc <_malloc_r>
 8004fc0:	b922      	cbnz	r2, 8004fcc <_realloc_r+0x20>
 8004fc2:	f7ff fc2f 	bl	8004824 <_free_r>
 8004fc6:	4625      	mov	r5, r4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fcc:	f000 f814 	bl	8004ff8 <_malloc_usable_size_r>
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d20f      	bcs.n	8004ff4 <_realloc_r+0x48>
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff fc70 	bl	80048bc <_malloc_r>
 8004fdc:	4605      	mov	r5, r0
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d0f2      	beq.n	8004fc8 <_realloc_r+0x1c>
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	f7ff ffbb 	bl	8004f60 <memcpy>
 8004fea:	4631      	mov	r1, r6
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff fc19 	bl	8004824 <_free_r>
 8004ff2:	e7e9      	b.n	8004fc8 <_realloc_r+0x1c>
 8004ff4:	4635      	mov	r5, r6
 8004ff6:	e7e7      	b.n	8004fc8 <_realloc_r+0x1c>

08004ff8 <_malloc_usable_size_r>:
 8004ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ffc:	1f18      	subs	r0, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bfbc      	itt	lt
 8005002:	580b      	ldrlt	r3, [r1, r0]
 8005004:	18c0      	addlt	r0, r0, r3
 8005006:	4770      	bx	lr

08005008 <cos>:
 8005008:	b530      	push	{r4, r5, lr}
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <cos+0x64>)
 800500c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005010:	4293      	cmp	r3, r2
 8005012:	b087      	sub	sp, #28
 8005014:	dc04      	bgt.n	8005020 <cos+0x18>
 8005016:	2200      	movs	r2, #0
 8005018:	2300      	movs	r3, #0
 800501a:	f000 fa81 	bl	8005520 <__kernel_cos>
 800501e:	e006      	b.n	800502e <cos+0x26>
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <cos+0x68>)
 8005022:	4293      	cmp	r3, r2
 8005024:	dd05      	ble.n	8005032 <cos+0x2a>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	f7fb f909 	bl	8000240 <__aeabi_dsub>
 800502e:	b007      	add	sp, #28
 8005030:	bd30      	pop	{r4, r5, pc}
 8005032:	aa02      	add	r2, sp, #8
 8005034:	f000 f884 	bl	8005140 <__ieee754_rem_pio2>
 8005038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800503c:	f000 0403 	and.w	r4, r0, #3
 8005040:	2c01      	cmp	r4, #1
 8005042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005046:	d008      	beq.n	800505a <cos+0x52>
 8005048:	2c02      	cmp	r4, #2
 800504a:	d00c      	beq.n	8005066 <cos+0x5e>
 800504c:	2c00      	cmp	r4, #0
 800504e:	d0e4      	beq.n	800501a <cos+0x12>
 8005050:	2401      	movs	r4, #1
 8005052:	9400      	str	r4, [sp, #0]
 8005054:	f000 fe6c 	bl	8005d30 <__kernel_sin>
 8005058:	e7e9      	b.n	800502e <cos+0x26>
 800505a:	9400      	str	r4, [sp, #0]
 800505c:	f000 fe68 	bl	8005d30 <__kernel_sin>
 8005060:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005064:	e7e3      	b.n	800502e <cos+0x26>
 8005066:	f000 fa5b 	bl	8005520 <__kernel_cos>
 800506a:	e7f9      	b.n	8005060 <cos+0x58>
 800506c:	3fe921fb 	.word	0x3fe921fb
 8005070:	7fefffff 	.word	0x7fefffff

08005074 <sin>:
 8005074:	b530      	push	{r4, r5, lr}
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <sin+0x6c>)
 8005078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800507c:	4293      	cmp	r3, r2
 800507e:	b087      	sub	sp, #28
 8005080:	dc06      	bgt.n	8005090 <sin+0x1c>
 8005082:	2300      	movs	r3, #0
 8005084:	2200      	movs	r2, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	f000 fe51 	bl	8005d30 <__kernel_sin>
 800508e:	e006      	b.n	800509e <sin+0x2a>
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <sin+0x70>)
 8005092:	4293      	cmp	r3, r2
 8005094:	dd05      	ble.n	80050a2 <sin+0x2e>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	f7fb f8d1 	bl	8000240 <__aeabi_dsub>
 800509e:	b007      	add	sp, #28
 80050a0:	bd30      	pop	{r4, r5, pc}
 80050a2:	aa02      	add	r2, sp, #8
 80050a4:	f000 f84c 	bl	8005140 <__ieee754_rem_pio2>
 80050a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ac:	f000 0403 	and.w	r4, r0, #3
 80050b0:	2c01      	cmp	r4, #1
 80050b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b6:	d005      	beq.n	80050c4 <sin+0x50>
 80050b8:	2c02      	cmp	r4, #2
 80050ba:	d006      	beq.n	80050ca <sin+0x56>
 80050bc:	b964      	cbnz	r4, 80050d8 <sin+0x64>
 80050be:	2401      	movs	r4, #1
 80050c0:	9400      	str	r4, [sp, #0]
 80050c2:	e7e2      	b.n	800508a <sin+0x16>
 80050c4:	f000 fa2c 	bl	8005520 <__kernel_cos>
 80050c8:	e7e9      	b.n	800509e <sin+0x2a>
 80050ca:	2401      	movs	r4, #1
 80050cc:	9400      	str	r4, [sp, #0]
 80050ce:	f000 fe2f 	bl	8005d30 <__kernel_sin>
 80050d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80050d6:	e7e2      	b.n	800509e <sin+0x2a>
 80050d8:	f000 fa22 	bl	8005520 <__kernel_cos>
 80050dc:	e7f9      	b.n	80050d2 <sin+0x5e>
 80050de:	bf00      	nop
 80050e0:	3fe921fb 	.word	0x3fe921fb
 80050e4:	7fefffff 	.word	0x7fefffff

080050e8 <tan>:
 80050e8:	b530      	push	{r4, r5, lr}
 80050ea:	4a12      	ldr	r2, [pc, #72]	; (8005134 <tan+0x4c>)
 80050ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050f0:	4293      	cmp	r3, r2
 80050f2:	b087      	sub	sp, #28
 80050f4:	dc06      	bgt.n	8005104 <tan+0x1c>
 80050f6:	2301      	movs	r3, #1
 80050f8:	2200      	movs	r2, #0
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	f000 fecf 	bl	8005ea0 <__kernel_tan>
 8005102:	e006      	b.n	8005112 <tan+0x2a>
 8005104:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <tan+0x50>)
 8005106:	4293      	cmp	r3, r2
 8005108:	dd05      	ble.n	8005116 <tan+0x2e>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	f7fb f897 	bl	8000240 <__aeabi_dsub>
 8005112:	b007      	add	sp, #28
 8005114:	bd30      	pop	{r4, r5, pc}
 8005116:	aa02      	add	r2, sp, #8
 8005118:	f000 f812 	bl	8005140 <__ieee754_rem_pio2>
 800511c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005120:	0040      	lsls	r0, r0, #1
 8005122:	f000 0002 	and.w	r0, r0, #2
 8005126:	f1c0 0001 	rsb	r0, r0, #1
 800512a:	9000      	str	r0, [sp, #0]
 800512c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005130:	e7e5      	b.n	80050fe <tan+0x16>
 8005132:	bf00      	nop
 8005134:	3fe921fb 	.word	0x3fe921fb
 8005138:	7fefffff 	.word	0x7fefffff
 800513c:	00000000 	.word	0x00000000

08005140 <__ieee754_rem_pio2>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4614      	mov	r4, r2
 8005146:	4ac2      	ldr	r2, [pc, #776]	; (8005450 <__ieee754_rem_pio2+0x310>)
 8005148:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800514c:	4592      	cmp	sl, r2
 800514e:	b08d      	sub	sp, #52	; 0x34
 8005150:	468b      	mov	fp, r1
 8005152:	dc07      	bgt.n	8005164 <__ieee754_rem_pio2+0x24>
 8005154:	2200      	movs	r2, #0
 8005156:	2300      	movs	r3, #0
 8005158:	e9c4 0100 	strd	r0, r1, [r4]
 800515c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005160:	2500      	movs	r5, #0
 8005162:	e023      	b.n	80051ac <__ieee754_rem_pio2+0x6c>
 8005164:	4abb      	ldr	r2, [pc, #748]	; (8005454 <__ieee754_rem_pio2+0x314>)
 8005166:	4592      	cmp	sl, r2
 8005168:	dc71      	bgt.n	800524e <__ieee754_rem_pio2+0x10e>
 800516a:	a3ab      	add	r3, pc, #684	; (adr r3, 8005418 <__ieee754_rem_pio2+0x2d8>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	2900      	cmp	r1, #0
 8005172:	4db9      	ldr	r5, [pc, #740]	; (8005458 <__ieee754_rem_pio2+0x318>)
 8005174:	dd36      	ble.n	80051e4 <__ieee754_rem_pio2+0xa4>
 8005176:	f7fb f863 	bl	8000240 <__aeabi_dsub>
 800517a:	45aa      	cmp	sl, r5
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	d018      	beq.n	80051b4 <__ieee754_rem_pio2+0x74>
 8005182:	a3a7      	add	r3, pc, #668	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e0>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb f85a 	bl	8000240 <__aeabi_dsub>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4630      	mov	r0, r6
 8005192:	e9c4 2300 	strd	r2, r3, [r4]
 8005196:	4639      	mov	r1, r7
 8005198:	f7fb f852 	bl	8000240 <__aeabi_dsub>
 800519c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f84d 	bl	8000240 <__aeabi_dsub>
 80051a6:	2501      	movs	r5, #1
 80051a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051ac:	4628      	mov	r0, r5
 80051ae:	b00d      	add	sp, #52	; 0x34
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b4:	a39c      	add	r3, pc, #624	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2e8>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb f841 	bl	8000240 <__aeabi_dsub>
 80051be:	a39c      	add	r3, pc, #624	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f0>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	f7fb f83a 	bl	8000240 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4630      	mov	r0, r6
 80051d2:	e9c4 2300 	strd	r2, r3, [r4]
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb f832 	bl	8000240 <__aeabi_dsub>
 80051dc:	a394      	add	r3, pc, #592	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f0>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	e7de      	b.n	80051a2 <__ieee754_rem_pio2+0x62>
 80051e4:	f7fb f82e 	bl	8000244 <__adddf3>
 80051e8:	45aa      	cmp	sl, r5
 80051ea:	4606      	mov	r6, r0
 80051ec:	460f      	mov	r7, r1
 80051ee:	d016      	beq.n	800521e <__ieee754_rem_pio2+0xde>
 80051f0:	a38b      	add	r3, pc, #556	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e0>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb f825 	bl	8000244 <__adddf3>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4630      	mov	r0, r6
 8005200:	e9c4 2300 	strd	r2, r3, [r4]
 8005204:	4639      	mov	r1, r7
 8005206:	f7fb f81b 	bl	8000240 <__aeabi_dsub>
 800520a:	a385      	add	r3, pc, #532	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e0>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f818 	bl	8000244 <__adddf3>
 8005214:	f04f 35ff 	mov.w	r5, #4294967295
 8005218:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800521c:	e7c6      	b.n	80051ac <__ieee754_rem_pio2+0x6c>
 800521e:	a382      	add	r3, pc, #520	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2e8>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fb f80e 	bl	8000244 <__adddf3>
 8005228:	a381      	add	r3, pc, #516	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f0>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	f7fb f807 	bl	8000244 <__adddf3>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	e9c4 2300 	strd	r2, r3, [r4]
 8005240:	4639      	mov	r1, r7
 8005242:	f7fa fffd 	bl	8000240 <__aeabi_dsub>
 8005246:	a37a      	add	r3, pc, #488	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f0>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	e7e0      	b.n	8005210 <__ieee754_rem_pio2+0xd0>
 800524e:	4a83      	ldr	r2, [pc, #524]	; (800545c <__ieee754_rem_pio2+0x31c>)
 8005250:	4592      	cmp	sl, r2
 8005252:	f300 80d2 	bgt.w	80053fa <__ieee754_rem_pio2+0x2ba>
 8005256:	f000 ffe3 	bl	8006220 <fabs>
 800525a:	a377      	add	r3, pc, #476	; (adr r3, 8005438 <__ieee754_rem_pio2+0x2f8>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	4606      	mov	r6, r0
 8005262:	460f      	mov	r7, r1
 8005264:	f7fb f9a4 	bl	80005b0 <__aeabi_dmul>
 8005268:	2200      	movs	r2, #0
 800526a:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <__ieee754_rem_pio2+0x320>)
 800526c:	f7fa ffea 	bl	8000244 <__adddf3>
 8005270:	f7fb fc38 	bl	8000ae4 <__aeabi_d2iz>
 8005274:	4605      	mov	r5, r0
 8005276:	f7fb f931 	bl	80004dc <__aeabi_i2d>
 800527a:	a367      	add	r3, pc, #412	; (adr r3, 8005418 <__ieee754_rem_pio2+0x2d8>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005284:	f7fb f994 	bl	80005b0 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa ffd6 	bl	8000240 <__aeabi_dsub>
 8005294:	a362      	add	r3, pc, #392	; (adr r3, 8005420 <__ieee754_rem_pio2+0x2e0>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	4606      	mov	r6, r0
 800529c:	460f      	mov	r7, r1
 800529e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a2:	f7fb f985 	bl	80005b0 <__aeabi_dmul>
 80052a6:	2d1f      	cmp	r5, #31
 80052a8:	4680      	mov	r8, r0
 80052aa:	4689      	mov	r9, r1
 80052ac:	dc0e      	bgt.n	80052cc <__ieee754_rem_pio2+0x18c>
 80052ae:	4b6d      	ldr	r3, [pc, #436]	; (8005464 <__ieee754_rem_pio2+0x324>)
 80052b0:	1e6a      	subs	r2, r5, #1
 80052b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b6:	4553      	cmp	r3, sl
 80052b8:	d008      	beq.n	80052cc <__ieee754_rem_pio2+0x18c>
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fa ffbd 	bl	8000240 <__aeabi_dsub>
 80052c6:	e9c4 0100 	strd	r0, r1, [r4]
 80052ca:	e011      	b.n	80052f0 <__ieee754_rem_pio2+0x1b0>
 80052cc:	464b      	mov	r3, r9
 80052ce:	4642      	mov	r2, r8
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fa ffb4 	bl	8000240 <__aeabi_dsub>
 80052d8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80052dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052e0:	ebaa 0303 	sub.w	r3, sl, r3
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	dc1f      	bgt.n	8005328 <__ieee754_rem_pio2+0x1e8>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	e9c4 2300 	strd	r2, r3, [r4]
 80052f0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80052f4:	4630      	mov	r0, r6
 80052f6:	4653      	mov	r3, sl
 80052f8:	4639      	mov	r1, r7
 80052fa:	f7fa ffa1 	bl	8000240 <__aeabi_dsub>
 80052fe:	4642      	mov	r2, r8
 8005300:	464b      	mov	r3, r9
 8005302:	f7fa ff9d 	bl	8000240 <__aeabi_dsub>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	f1bb 0f00 	cmp.w	fp, #0
 800530e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005312:	f6bf af4b 	bge.w	80051ac <__ieee754_rem_pio2+0x6c>
 8005316:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800531a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800531e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005322:	60e1      	str	r1, [r4, #12]
 8005324:	426d      	negs	r5, r5
 8005326:	e741      	b.n	80051ac <__ieee754_rem_pio2+0x6c>
 8005328:	a33f      	add	r3, pc, #252	; (adr r3, 8005428 <__ieee754_rem_pio2+0x2e8>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005332:	f7fb f93d 	bl	80005b0 <__aeabi_dmul>
 8005336:	4680      	mov	r8, r0
 8005338:	4689      	mov	r9, r1
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	f7fa ff7d 	bl	8000240 <__aeabi_dsub>
 8005346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4630      	mov	r0, r6
 8005350:	4639      	mov	r1, r7
 8005352:	f7fa ff75 	bl	8000240 <__aeabi_dsub>
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	f7fa ff71 	bl	8000240 <__aeabi_dsub>
 800535e:	a334      	add	r3, pc, #208	; (adr r3, 8005430 <__ieee754_rem_pio2+0x2f0>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	4606      	mov	r6, r0
 8005366:	460f      	mov	r7, r1
 8005368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800536c:	f7fb f920 	bl	80005b0 <__aeabi_dmul>
 8005370:	4632      	mov	r2, r6
 8005372:	463b      	mov	r3, r7
 8005374:	f7fa ff64 	bl	8000240 <__aeabi_dsub>
 8005378:	460b      	mov	r3, r1
 800537a:	4602      	mov	r2, r0
 800537c:	4680      	mov	r8, r0
 800537e:	4689      	mov	r9, r1
 8005380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005384:	f7fa ff5c 	bl	8000240 <__aeabi_dsub>
 8005388:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800538c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005390:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8005394:	dc06      	bgt.n	80053a4 <__ieee754_rem_pio2+0x264>
 8005396:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9c4 2300 	strd	r2, r3, [r4]
 80053a2:	e7a5      	b.n	80052f0 <__ieee754_rem_pio2+0x1b0>
 80053a4:	a326      	add	r3, pc, #152	; (adr r3, 8005440 <__ieee754_rem_pio2+0x300>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ae:	f7fb f8ff 	bl	80005b0 <__aeabi_dmul>
 80053b2:	4680      	mov	r8, r0
 80053b4:	4689      	mov	r9, r1
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053be:	f7fa ff3f 	bl	8000240 <__aeabi_dsub>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4606      	mov	r6, r0
 80053c8:	460f      	mov	r7, r1
 80053ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ce:	f7fa ff37 	bl	8000240 <__aeabi_dsub>
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	f7fa ff33 	bl	8000240 <__aeabi_dsub>
 80053da:	a31b      	add	r3, pc, #108	; (adr r3, 8005448 <__ieee754_rem_pio2+0x308>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	4680      	mov	r8, r0
 80053e2:	4689      	mov	r9, r1
 80053e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e8:	f7fb f8e2 	bl	80005b0 <__aeabi_dmul>
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	f7fa ff26 	bl	8000240 <__aeabi_dsub>
 80053f4:	4680      	mov	r8, r0
 80053f6:	4689      	mov	r9, r1
 80053f8:	e75f      	b.n	80052ba <__ieee754_rem_pio2+0x17a>
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <__ieee754_rem_pio2+0x328>)
 80053fc:	4592      	cmp	sl, r2
 80053fe:	dd35      	ble.n	800546c <__ieee754_rem_pio2+0x32c>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	f7fa ff1c 	bl	8000240 <__aeabi_dsub>
 8005408:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800540c:	e9c4 0100 	strd	r0, r1, [r4]
 8005410:	e6a6      	b.n	8005160 <__ieee754_rem_pio2+0x20>
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	54400000 	.word	0x54400000
 800541c:	3ff921fb 	.word	0x3ff921fb
 8005420:	1a626331 	.word	0x1a626331
 8005424:	3dd0b461 	.word	0x3dd0b461
 8005428:	1a600000 	.word	0x1a600000
 800542c:	3dd0b461 	.word	0x3dd0b461
 8005430:	2e037073 	.word	0x2e037073
 8005434:	3ba3198a 	.word	0x3ba3198a
 8005438:	6dc9c883 	.word	0x6dc9c883
 800543c:	3fe45f30 	.word	0x3fe45f30
 8005440:	2e000000 	.word	0x2e000000
 8005444:	3ba3198a 	.word	0x3ba3198a
 8005448:	252049c1 	.word	0x252049c1
 800544c:	397b839a 	.word	0x397b839a
 8005450:	3fe921fb 	.word	0x3fe921fb
 8005454:	4002d97b 	.word	0x4002d97b
 8005458:	3ff921fb 	.word	0x3ff921fb
 800545c:	413921fb 	.word	0x413921fb
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	08006d08 	.word	0x08006d08
 8005468:	7fefffff 	.word	0x7fefffff
 800546c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005470:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005474:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005478:	460f      	mov	r7, r1
 800547a:	4606      	mov	r6, r0
 800547c:	f7fb fb32 	bl	8000ae4 <__aeabi_d2iz>
 8005480:	f7fb f82c 	bl	80004dc <__aeabi_i2d>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4630      	mov	r0, r6
 800548a:	4639      	mov	r1, r7
 800548c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005490:	f7fa fed6 	bl	8000240 <__aeabi_dsub>
 8005494:	2200      	movs	r2, #0
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <__ieee754_rem_pio2+0x3d8>)
 8005498:	f7fb f88a 	bl	80005b0 <__aeabi_dmul>
 800549c:	460f      	mov	r7, r1
 800549e:	4606      	mov	r6, r0
 80054a0:	f7fb fb20 	bl	8000ae4 <__aeabi_d2iz>
 80054a4:	f7fb f81a 	bl	80004dc <__aeabi_i2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054b4:	f7fa fec4 	bl	8000240 <__aeabi_dsub>
 80054b8:	2200      	movs	r2, #0
 80054ba:	4b17      	ldr	r3, [pc, #92]	; (8005518 <__ieee754_rem_pio2+0x3d8>)
 80054bc:	f7fb f878 	bl	80005b0 <__aeabi_dmul>
 80054c0:	f04f 0803 	mov.w	r8, #3
 80054c4:	2600      	movs	r6, #0
 80054c6:	2700      	movs	r7, #0
 80054c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80054d0:	4632      	mov	r2, r6
 80054d2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80054d6:	463b      	mov	r3, r7
 80054d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80054dc:	f7fb fad0 	bl	8000a80 <__aeabi_dcmpeq>
 80054e0:	b9b8      	cbnz	r0, 8005512 <__ieee754_rem_pio2+0x3d2>
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <__ieee754_rem_pio2+0x3dc>)
 80054e4:	462a      	mov	r2, r5
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	2302      	movs	r3, #2
 80054ea:	4621      	mov	r1, r4
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	a806      	add	r0, sp, #24
 80054f0:	4643      	mov	r3, r8
 80054f2:	f000 f8d3 	bl	800569c <__kernel_rem_pio2>
 80054f6:	f1bb 0f00 	cmp.w	fp, #0
 80054fa:	4605      	mov	r5, r0
 80054fc:	f6bf ae56 	bge.w	80051ac <__ieee754_rem_pio2+0x6c>
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	68e3      	ldr	r3, [r4, #12]
 800550a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800550e:	60e3      	str	r3, [r4, #12]
 8005510:	e708      	b.n	8005324 <__ieee754_rem_pio2+0x1e4>
 8005512:	46d0      	mov	r8, sl
 8005514:	e7dc      	b.n	80054d0 <__ieee754_rem_pio2+0x390>
 8005516:	bf00      	nop
 8005518:	41700000 	.word	0x41700000
 800551c:	08006d88 	.word	0x08006d88

08005520 <__kernel_cos>:
 8005520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005528:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800552c:	4680      	mov	r8, r0
 800552e:	460f      	mov	r7, r1
 8005530:	e9cd 2300 	strd	r2, r3, [sp]
 8005534:	da04      	bge.n	8005540 <__kernel_cos+0x20>
 8005536:	f7fb fad5 	bl	8000ae4 <__aeabi_d2iz>
 800553a:	2800      	cmp	r0, #0
 800553c:	f000 8086 	beq.w	800564c <__kernel_cos+0x12c>
 8005540:	4642      	mov	r2, r8
 8005542:	463b      	mov	r3, r7
 8005544:	4640      	mov	r0, r8
 8005546:	4639      	mov	r1, r7
 8005548:	f7fb f832 	bl	80005b0 <__aeabi_dmul>
 800554c:	2200      	movs	r2, #0
 800554e:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <__kernel_cos+0x168>)
 8005550:	4604      	mov	r4, r0
 8005552:	460d      	mov	r5, r1
 8005554:	f7fb f82c 	bl	80005b0 <__aeabi_dmul>
 8005558:	a33f      	add	r3, pc, #252	; (adr r3, 8005658 <__kernel_cos+0x138>)
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	4682      	mov	sl, r0
 8005560:	468b      	mov	fp, r1
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb f823 	bl	80005b0 <__aeabi_dmul>
 800556a:	a33d      	add	r3, pc, #244	; (adr r3, 8005660 <__kernel_cos+0x140>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fa fe68 	bl	8000244 <__adddf3>
 8005574:	4622      	mov	r2, r4
 8005576:	462b      	mov	r3, r5
 8005578:	f7fb f81a 	bl	80005b0 <__aeabi_dmul>
 800557c:	a33a      	add	r3, pc, #232	; (adr r3, 8005668 <__kernel_cos+0x148>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe5d 	bl	8000240 <__aeabi_dsub>
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	f7fb f811 	bl	80005b0 <__aeabi_dmul>
 800558e:	a338      	add	r3, pc, #224	; (adr r3, 8005670 <__kernel_cos+0x150>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fa fe56 	bl	8000244 <__adddf3>
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	f7fb f808 	bl	80005b0 <__aeabi_dmul>
 80055a0:	a335      	add	r3, pc, #212	; (adr r3, 8005678 <__kernel_cos+0x158>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa fe4b 	bl	8000240 <__aeabi_dsub>
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f7fa ffff 	bl	80005b0 <__aeabi_dmul>
 80055b2:	a333      	add	r3, pc, #204	; (adr r3, 8005680 <__kernel_cos+0x160>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fa fe44 	bl	8000244 <__adddf3>
 80055bc:	4622      	mov	r2, r4
 80055be:	462b      	mov	r3, r5
 80055c0:	f7fa fff6 	bl	80005b0 <__aeabi_dmul>
 80055c4:	4622      	mov	r2, r4
 80055c6:	462b      	mov	r3, r5
 80055c8:	f7fa fff2 	bl	80005b0 <__aeabi_dmul>
 80055cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055d0:	4604      	mov	r4, r0
 80055d2:	460d      	mov	r5, r1
 80055d4:	4640      	mov	r0, r8
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fa ffea 	bl	80005b0 <__aeabi_dmul>
 80055dc:	460b      	mov	r3, r1
 80055de:	4602      	mov	r2, r0
 80055e0:	4629      	mov	r1, r5
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7fa fe2c 	bl	8000240 <__aeabi_dsub>
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <__kernel_cos+0x16c>)
 80055ea:	4680      	mov	r8, r0
 80055ec:	429e      	cmp	r6, r3
 80055ee:	4689      	mov	r9, r1
 80055f0:	dc0e      	bgt.n	8005610 <__kernel_cos+0xf0>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4650      	mov	r0, sl
 80055f8:	4659      	mov	r1, fp
 80055fa:	f7fa fe21 	bl	8000240 <__aeabi_dsub>
 80055fe:	4602      	mov	r2, r0
 8005600:	2000      	movs	r0, #0
 8005602:	460b      	mov	r3, r1
 8005604:	4922      	ldr	r1, [pc, #136]	; (8005690 <__kernel_cos+0x170>)
 8005606:	f7fa fe1b 	bl	8000240 <__aeabi_dsub>
 800560a:	b003      	add	sp, #12
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	2400      	movs	r4, #0
 8005612:	4b20      	ldr	r3, [pc, #128]	; (8005694 <__kernel_cos+0x174>)
 8005614:	4622      	mov	r2, r4
 8005616:	429e      	cmp	r6, r3
 8005618:	bfcc      	ite	gt
 800561a:	4d1f      	ldrgt	r5, [pc, #124]	; (8005698 <__kernel_cos+0x178>)
 800561c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005620:	462b      	mov	r3, r5
 8005622:	2000      	movs	r0, #0
 8005624:	491a      	ldr	r1, [pc, #104]	; (8005690 <__kernel_cos+0x170>)
 8005626:	f7fa fe0b 	bl	8000240 <__aeabi_dsub>
 800562a:	4622      	mov	r2, r4
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	462b      	mov	r3, r5
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	f7fa fe03 	bl	8000240 <__aeabi_dsub>
 800563a:	4642      	mov	r2, r8
 800563c:	464b      	mov	r3, r9
 800563e:	f7fa fdff 	bl	8000240 <__aeabi_dsub>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	e7dc      	b.n	8005606 <__kernel_cos+0xe6>
 800564c:	2000      	movs	r0, #0
 800564e:	4910      	ldr	r1, [pc, #64]	; (8005690 <__kernel_cos+0x170>)
 8005650:	e7db      	b.n	800560a <__kernel_cos+0xea>
 8005652:	bf00      	nop
 8005654:	f3af 8000 	nop.w
 8005658:	be8838d4 	.word	0xbe8838d4
 800565c:	bda8fae9 	.word	0xbda8fae9
 8005660:	bdb4b1c4 	.word	0xbdb4b1c4
 8005664:	3e21ee9e 	.word	0x3e21ee9e
 8005668:	809c52ad 	.word	0x809c52ad
 800566c:	3e927e4f 	.word	0x3e927e4f
 8005670:	19cb1590 	.word	0x19cb1590
 8005674:	3efa01a0 	.word	0x3efa01a0
 8005678:	16c15177 	.word	0x16c15177
 800567c:	3f56c16c 	.word	0x3f56c16c
 8005680:	5555554c 	.word	0x5555554c
 8005684:	3fa55555 	.word	0x3fa55555
 8005688:	3fe00000 	.word	0x3fe00000
 800568c:	3fd33332 	.word	0x3fd33332
 8005690:	3ff00000 	.word	0x3ff00000
 8005694:	3fe90000 	.word	0x3fe90000
 8005698:	3fd20000 	.word	0x3fd20000

0800569c <__kernel_rem_pio2>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	9104      	str	r1, [sp, #16]
 80056a8:	4bbf      	ldr	r3, [pc, #764]	; (80059a8 <__kernel_rem_pio2+0x30c>)
 80056aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80056ac:	1ed4      	subs	r4, r2, #3
 80056ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056b2:	2500      	movs	r5, #0
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	9008      	str	r0, [sp, #32]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	2318      	movs	r3, #24
 80056c0:	fb94 f4f3 	sdiv	r4, r4, r3
 80056c4:	f06f 0317 	mvn.w	r3, #23
 80056c8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80056cc:	fb04 3303 	mla	r3, r4, r3, r3
 80056d0:	eb03 0a02 	add.w	sl, r3, r2
 80056d4:	9a06      	ldr	r2, [sp, #24]
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	1aa7      	subs	r7, r4, r2
 80056da:	eb03 0802 	add.w	r8, r3, r2
 80056de:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80056e0:	2200      	movs	r2, #0
 80056e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056e6:	2300      	movs	r3, #0
 80056e8:	ae1e      	add	r6, sp, #120	; 0x78
 80056ea:	4545      	cmp	r5, r8
 80056ec:	dd14      	ble.n	8005718 <__kernel_rem_pio2+0x7c>
 80056ee:	2600      	movs	r6, #0
 80056f0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	429e      	cmp	r6, r3
 80056f8:	dc39      	bgt.n	800576e <__kernel_rem_pio2+0xd2>
 80056fa:	9b08      	ldr	r3, [sp, #32]
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	3b08      	subs	r3, #8
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	f04f 0900 	mov.w	r9, #0
 800570a:	199d      	adds	r5, r3, r6
 800570c:	ab20      	add	r3, sp, #128	; 0x80
 800570e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	2700      	movs	r7, #0
 8005716:	e023      	b.n	8005760 <__kernel_rem_pio2+0xc4>
 8005718:	42ef      	cmn	r7, r5
 800571a:	d40b      	bmi.n	8005734 <__kernel_rem_pio2+0x98>
 800571c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005720:	e9cd 2300 	strd	r2, r3, [sp]
 8005724:	f7fa feda 	bl	80004dc <__aeabi_i2d>
 8005728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800572c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8005730:	3501      	adds	r5, #1
 8005732:	e7da      	b.n	80056ea <__kernel_rem_pio2+0x4e>
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	e7f8      	b.n	800572c <__kernel_rem_pio2+0x90>
 800573a:	9905      	ldr	r1, [sp, #20]
 800573c:	9d00      	ldr	r5, [sp, #0]
 800573e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005742:	9105      	str	r1, [sp, #20]
 8005744:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005748:	9500      	str	r5, [sp, #0]
 800574a:	f7fa ff31 	bl	80005b0 <__aeabi_dmul>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fa fd75 	bl	8000244 <__adddf3>
 800575a:	4680      	mov	r8, r0
 800575c:	4689      	mov	r9, r1
 800575e:	3701      	adds	r7, #1
 8005760:	9b06      	ldr	r3, [sp, #24]
 8005762:	429f      	cmp	r7, r3
 8005764:	dde9      	ble.n	800573a <__kernel_rem_pio2+0x9e>
 8005766:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800576a:	3601      	adds	r6, #1
 800576c:	e7c2      	b.n	80056f4 <__kernel_rem_pio2+0x58>
 800576e:	9b02      	ldr	r3, [sp, #8]
 8005770:	aa0c      	add	r2, sp, #48	; 0x30
 8005772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005776:	930b      	str	r3, [sp, #44]	; 0x2c
 8005778:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800577a:	9f02      	ldr	r7, [sp, #8]
 800577c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005780:	930a      	str	r3, [sp, #40]	; 0x28
 8005782:	2600      	movs	r6, #0
 8005784:	ab98      	add	r3, sp, #608	; 0x260
 8005786:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800578a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800578e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005792:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005796:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800579a:	ab98      	add	r3, sp, #608	; 0x260
 800579c:	445b      	add	r3, fp
 800579e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80057a2:	1bbb      	subs	r3, r7, r6
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dc71      	bgt.n	800588c <__kernel_rem_pio2+0x1f0>
 80057a8:	4652      	mov	r2, sl
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f000 fdbf 	bl	8006330 <scalbn>
 80057b2:	2200      	movs	r2, #0
 80057b4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80057b8:	4604      	mov	r4, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	f7fa fef8 	bl	80005b0 <__aeabi_dmul>
 80057c0:	f000 fd32 	bl	8006228 <floor>
 80057c4:	2200      	movs	r2, #0
 80057c6:	4b79      	ldr	r3, [pc, #484]	; (80059ac <__kernel_rem_pio2+0x310>)
 80057c8:	f7fa fef2 	bl	80005b0 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4620      	mov	r0, r4
 80057d2:	4629      	mov	r1, r5
 80057d4:	f7fa fd34 	bl	8000240 <__aeabi_dsub>
 80057d8:	460d      	mov	r5, r1
 80057da:	4604      	mov	r4, r0
 80057dc:	f7fb f982 	bl	8000ae4 <__aeabi_d2iz>
 80057e0:	9005      	str	r0, [sp, #20]
 80057e2:	f7fa fe7b 	bl	80004dc <__aeabi_i2d>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fa fd27 	bl	8000240 <__aeabi_dsub>
 80057f2:	f1ba 0f00 	cmp.w	sl, #0
 80057f6:	4680      	mov	r8, r0
 80057f8:	4689      	mov	r9, r1
 80057fa:	dd6c      	ble.n	80058d6 <__kernel_rem_pio2+0x23a>
 80057fc:	1e7a      	subs	r2, r7, #1
 80057fe:	ab0c      	add	r3, sp, #48	; 0x30
 8005800:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005804:	f1ca 0118 	rsb	r1, sl, #24
 8005808:	9c05      	ldr	r4, [sp, #20]
 800580a:	fa40 f301 	asr.w	r3, r0, r1
 800580e:	441c      	add	r4, r3
 8005810:	408b      	lsls	r3, r1
 8005812:	1ac0      	subs	r0, r0, r3
 8005814:	ab0c      	add	r3, sp, #48	; 0x30
 8005816:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800581a:	f1ca 0317 	rsb	r3, sl, #23
 800581e:	9405      	str	r4, [sp, #20]
 8005820:	fa40 f303 	asr.w	r3, r0, r3
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	9b00      	ldr	r3, [sp, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dd62      	ble.n	80058f2 <__kernel_rem_pio2+0x256>
 800582c:	2200      	movs	r2, #0
 800582e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005832:	4614      	mov	r4, r2
 8005834:	9b05      	ldr	r3, [sp, #20]
 8005836:	3301      	adds	r3, #1
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	4297      	cmp	r7, r2
 800583c:	f300 809f 	bgt.w	800597e <__kernel_rem_pio2+0x2e2>
 8005840:	f1ba 0f00 	cmp.w	sl, #0
 8005844:	dd07      	ble.n	8005856 <__kernel_rem_pio2+0x1ba>
 8005846:	f1ba 0f01 	cmp.w	sl, #1
 800584a:	f000 80bb 	beq.w	80059c4 <__kernel_rem_pio2+0x328>
 800584e:	f1ba 0f02 	cmp.w	sl, #2
 8005852:	f000 80c1 	beq.w	80059d8 <__kernel_rem_pio2+0x33c>
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d14a      	bne.n	80058f2 <__kernel_rem_pio2+0x256>
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	2000      	movs	r0, #0
 8005862:	4953      	ldr	r1, [pc, #332]	; (80059b0 <__kernel_rem_pio2+0x314>)
 8005864:	f7fa fcec 	bl	8000240 <__aeabi_dsub>
 8005868:	4680      	mov	r8, r0
 800586a:	4689      	mov	r9, r1
 800586c:	2c00      	cmp	r4, #0
 800586e:	d040      	beq.n	80058f2 <__kernel_rem_pio2+0x256>
 8005870:	4652      	mov	r2, sl
 8005872:	2000      	movs	r0, #0
 8005874:	494e      	ldr	r1, [pc, #312]	; (80059b0 <__kernel_rem_pio2+0x314>)
 8005876:	f000 fd5b 	bl	8006330 <scalbn>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fcdd 	bl	8000240 <__aeabi_dsub>
 8005886:	4680      	mov	r8, r0
 8005888:	4689      	mov	r9, r1
 800588a:	e032      	b.n	80058f2 <__kernel_rem_pio2+0x256>
 800588c:	2200      	movs	r2, #0
 800588e:	4b49      	ldr	r3, [pc, #292]	; (80059b4 <__kernel_rem_pio2+0x318>)
 8005890:	4640      	mov	r0, r8
 8005892:	4649      	mov	r1, r9
 8005894:	f7fa fe8c 	bl	80005b0 <__aeabi_dmul>
 8005898:	f7fb f924 	bl	8000ae4 <__aeabi_d2iz>
 800589c:	f7fa fe1e 	bl	80004dc <__aeabi_i2d>
 80058a0:	2200      	movs	r2, #0
 80058a2:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <__kernel_rem_pio2+0x31c>)
 80058a4:	e9cd 0100 	strd	r0, r1, [sp]
 80058a8:	f7fa fe82 	bl	80005b0 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fcc4 	bl	8000240 <__aeabi_dsub>
 80058b8:	f7fb f914 	bl	8000ae4 <__aeabi_d2iz>
 80058bc:	ab0c      	add	r3, sp, #48	; 0x30
 80058be:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80058c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ca:	f7fa fcbb 	bl	8000244 <__adddf3>
 80058ce:	3601      	adds	r6, #1
 80058d0:	4680      	mov	r8, r0
 80058d2:	4689      	mov	r9, r1
 80058d4:	e765      	b.n	80057a2 <__kernel_rem_pio2+0x106>
 80058d6:	d105      	bne.n	80058e4 <__kernel_rem_pio2+0x248>
 80058d8:	1e7b      	subs	r3, r7, #1
 80058da:	aa0c      	add	r2, sp, #48	; 0x30
 80058dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058e0:	15c3      	asrs	r3, r0, #23
 80058e2:	e79f      	b.n	8005824 <__kernel_rem_pio2+0x188>
 80058e4:	2200      	movs	r2, #0
 80058e6:	4b35      	ldr	r3, [pc, #212]	; (80059bc <__kernel_rem_pio2+0x320>)
 80058e8:	f7fb f8e8 	bl	8000abc <__aeabi_dcmpge>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d143      	bne.n	8005978 <__kernel_rem_pio2+0x2dc>
 80058f0:	9000      	str	r0, [sp, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2300      	movs	r3, #0
 80058f6:	4640      	mov	r0, r8
 80058f8:	4649      	mov	r1, r9
 80058fa:	f7fb f8c1 	bl	8000a80 <__aeabi_dcmpeq>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f000 80c3 	beq.w	8005a8a <__kernel_rem_pio2+0x3ee>
 8005904:	1e7c      	subs	r4, r7, #1
 8005906:	4623      	mov	r3, r4
 8005908:	2200      	movs	r2, #0
 800590a:	9902      	ldr	r1, [sp, #8]
 800590c:	428b      	cmp	r3, r1
 800590e:	da6a      	bge.n	80059e6 <__kernel_rem_pio2+0x34a>
 8005910:	2a00      	cmp	r2, #0
 8005912:	f000 8084 	beq.w	8005a1e <__kernel_rem_pio2+0x382>
 8005916:	ab0c      	add	r3, sp, #48	; 0x30
 8005918:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800591c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80b0 	beq.w	8005a86 <__kernel_rem_pio2+0x3ea>
 8005926:	4652      	mov	r2, sl
 8005928:	2000      	movs	r0, #0
 800592a:	4921      	ldr	r1, [pc, #132]	; (80059b0 <__kernel_rem_pio2+0x314>)
 800592c:	f000 fd00 	bl	8006330 <scalbn>
 8005930:	4625      	mov	r5, r4
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	f04f 0a00 	mov.w	sl, #0
 800593a:	00e3      	lsls	r3, r4, #3
 800593c:	aa98      	add	r2, sp, #608	; 0x260
 800593e:	eb02 0803 	add.w	r8, r2, r3
 8005942:	f8df b070 	ldr.w	fp, [pc, #112]	; 80059b4 <__kernel_rem_pio2+0x318>
 8005946:	9306      	str	r3, [sp, #24]
 8005948:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800594c:	2d00      	cmp	r5, #0
 800594e:	f280 80d2 	bge.w	8005af6 <__kernel_rem_pio2+0x45a>
 8005952:	2500      	movs	r5, #0
 8005954:	9a06      	ldr	r2, [sp, #24]
 8005956:	ab98      	add	r3, sp, #608	; 0x260
 8005958:	189e      	adds	r6, r3, r2
 800595a:	3ea8      	subs	r6, #168	; 0xa8
 800595c:	1b63      	subs	r3, r4, r5
 800595e:	2b00      	cmp	r3, #0
 8005960:	f2c0 80f9 	blt.w	8005b56 <__kernel_rem_pio2+0x4ba>
 8005964:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80059c0 <__kernel_rem_pio2+0x324>
 8005968:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800596c:	f04f 0a00 	mov.w	sl, #0
 8005970:	f04f 0b00 	mov.w	fp, #0
 8005974:	2700      	movs	r7, #0
 8005976:	e0e2      	b.n	8005b3e <__kernel_rem_pio2+0x4a2>
 8005978:	2302      	movs	r3, #2
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	e756      	b.n	800582c <__kernel_rem_pio2+0x190>
 800597e:	ab0c      	add	r3, sp, #48	; 0x30
 8005980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005984:	b94c      	cbnz	r4, 800599a <__kernel_rem_pio2+0x2fe>
 8005986:	b12b      	cbz	r3, 8005994 <__kernel_rem_pio2+0x2f8>
 8005988:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800598c:	a80c      	add	r0, sp, #48	; 0x30
 800598e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005992:	2301      	movs	r3, #1
 8005994:	3201      	adds	r2, #1
 8005996:	461c      	mov	r4, r3
 8005998:	e74f      	b.n	800583a <__kernel_rem_pio2+0x19e>
 800599a:	1acb      	subs	r3, r1, r3
 800599c:	a80c      	add	r0, sp, #48	; 0x30
 800599e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80059a2:	4623      	mov	r3, r4
 80059a4:	e7f6      	b.n	8005994 <__kernel_rem_pio2+0x2f8>
 80059a6:	bf00      	nop
 80059a8:	08006ed0 	.word	0x08006ed0
 80059ac:	40200000 	.word	0x40200000
 80059b0:	3ff00000 	.word	0x3ff00000
 80059b4:	3e700000 	.word	0x3e700000
 80059b8:	41700000 	.word	0x41700000
 80059bc:	3fe00000 	.word	0x3fe00000
 80059c0:	08006e88 	.word	0x08006e88
 80059c4:	1e7a      	subs	r2, r7, #1
 80059c6:	ab0c      	add	r3, sp, #48	; 0x30
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059d0:	a90c      	add	r1, sp, #48	; 0x30
 80059d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059d6:	e73e      	b.n	8005856 <__kernel_rem_pio2+0x1ba>
 80059d8:	1e7a      	subs	r2, r7, #1
 80059da:	ab0c      	add	r3, sp, #48	; 0x30
 80059dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059e4:	e7f4      	b.n	80059d0 <__kernel_rem_pio2+0x334>
 80059e6:	a90c      	add	r1, sp, #48	; 0x30
 80059e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	430a      	orrs	r2, r1
 80059f0:	e78b      	b.n	800590a <__kernel_rem_pio2+0x26e>
 80059f2:	3401      	adds	r4, #1
 80059f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80059f8:	2a00      	cmp	r2, #0
 80059fa:	d0fa      	beq.n	80059f2 <__kernel_rem_pio2+0x356>
 80059fc:	ab98      	add	r3, sp, #608	; 0x260
 80059fe:	449b      	add	fp, r3
 8005a00:	9b07      	ldr	r3, [sp, #28]
 8005a02:	1c7e      	adds	r6, r7, #1
 8005a04:	19dd      	adds	r5, r3, r7
 8005a06:	ab98      	add	r3, sp, #608	; 0x260
 8005a08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005a0c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8005a10:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8005a14:	443c      	add	r4, r7
 8005a16:	42b4      	cmp	r4, r6
 8005a18:	da04      	bge.n	8005a24 <__kernel_rem_pio2+0x388>
 8005a1a:	4627      	mov	r7, r4
 8005a1c:	e6b1      	b.n	8005782 <__kernel_rem_pio2+0xe6>
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	2401      	movs	r4, #1
 8005a22:	e7e7      	b.n	80059f4 <__kernel_rem_pio2+0x358>
 8005a24:	f105 0308 	add.w	r3, r5, #8
 8005a28:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2c:	2700      	movs	r7, #0
 8005a2e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a32:	f7fa fd53 	bl	80004dc <__aeabi_i2d>
 8005a36:	f04f 0800 	mov.w	r8, #0
 8005a3a:	f04f 0900 	mov.w	r9, #0
 8005a3e:	9b08      	ldr	r3, [sp, #32]
 8005a40:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005a44:	3b08      	subs	r3, #8
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	f105 0310 	add.w	r3, r5, #16
 8005a4c:	9305      	str	r3, [sp, #20]
 8005a4e:	9b06      	ldr	r3, [sp, #24]
 8005a50:	429f      	cmp	r7, r3
 8005a52:	dd04      	ble.n	8005a5e <__kernel_rem_pio2+0x3c2>
 8005a54:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005a58:	3601      	adds	r6, #1
 8005a5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a5c:	e7db      	b.n	8005a16 <__kernel_rem_pio2+0x37a>
 8005a5e:	9905      	ldr	r1, [sp, #20]
 8005a60:	9d00      	ldr	r5, [sp, #0]
 8005a62:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005a66:	9105      	str	r1, [sp, #20]
 8005a68:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005a6c:	9500      	str	r5, [sp, #0]
 8005a6e:	f7fa fd9f 	bl	80005b0 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa fbe3 	bl	8000244 <__adddf3>
 8005a7e:	3701      	adds	r7, #1
 8005a80:	4680      	mov	r8, r0
 8005a82:	4689      	mov	r9, r1
 8005a84:	e7e3      	b.n	8005a4e <__kernel_rem_pio2+0x3b2>
 8005a86:	3c01      	subs	r4, #1
 8005a88:	e745      	b.n	8005916 <__kernel_rem_pio2+0x27a>
 8005a8a:	f1ca 0200 	rsb	r2, sl, #0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f000 fc4d 	bl	8006330 <scalbn>
 8005a96:	2200      	movs	r2, #0
 8005a98:	4ba3      	ldr	r3, [pc, #652]	; (8005d28 <__kernel_rem_pio2+0x68c>)
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	f7fb f80d 	bl	8000abc <__aeabi_dcmpge>
 8005aa2:	b1f8      	cbz	r0, 8005ae4 <__kernel_rem_pio2+0x448>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4ba1      	ldr	r3, [pc, #644]	; (8005d2c <__kernel_rem_pio2+0x690>)
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f7fa fd80 	bl	80005b0 <__aeabi_dmul>
 8005ab0:	f7fb f818 	bl	8000ae4 <__aeabi_d2iz>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	f7fa fd11 	bl	80004dc <__aeabi_i2d>
 8005aba:	2200      	movs	r2, #0
 8005abc:	4b9a      	ldr	r3, [pc, #616]	; (8005d28 <__kernel_rem_pio2+0x68c>)
 8005abe:	f7fa fd77 	bl	80005b0 <__aeabi_dmul>
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7fa fbb9 	bl	8000240 <__aeabi_dsub>
 8005ace:	f7fb f809 	bl	8000ae4 <__aeabi_d2iz>
 8005ad2:	1c7c      	adds	r4, r7, #1
 8005ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8005ad6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005ada:	f10a 0a18 	add.w	sl, sl, #24
 8005ade:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005ae2:	e720      	b.n	8005926 <__kernel_rem_pio2+0x28a>
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f7fa fffc 	bl	8000ae4 <__aeabi_d2iz>
 8005aec:	ab0c      	add	r3, sp, #48	; 0x30
 8005aee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005af2:	463c      	mov	r4, r7
 8005af4:	e717      	b.n	8005926 <__kernel_rem_pio2+0x28a>
 8005af6:	ab0c      	add	r3, sp, #48	; 0x30
 8005af8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005afc:	f7fa fcee 	bl	80004dc <__aeabi_i2d>
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	f7fa fd54 	bl	80005b0 <__aeabi_dmul>
 8005b08:	4652      	mov	r2, sl
 8005b0a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005b0e:	465b      	mov	r3, fp
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fd4c 	bl	80005b0 <__aeabi_dmul>
 8005b18:	3d01      	subs	r5, #1
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	460f      	mov	r7, r1
 8005b1e:	e715      	b.n	800594c <__kernel_rem_pio2+0x2b0>
 8005b20:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8005b24:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005b28:	f7fa fd42 	bl	80005b0 <__aeabi_dmul>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4650      	mov	r0, sl
 8005b32:	4659      	mov	r1, fp
 8005b34:	f7fa fb86 	bl	8000244 <__adddf3>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	3701      	adds	r7, #1
 8005b3e:	9b02      	ldr	r3, [sp, #8]
 8005b40:	429f      	cmp	r7, r3
 8005b42:	dc01      	bgt.n	8005b48 <__kernel_rem_pio2+0x4ac>
 8005b44:	42bd      	cmp	r5, r7
 8005b46:	daeb      	bge.n	8005b20 <__kernel_rem_pio2+0x484>
 8005b48:	ab48      	add	r3, sp, #288	; 0x120
 8005b4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005b4e:	e9c3 ab00 	strd	sl, fp, [r3]
 8005b52:	3501      	adds	r5, #1
 8005b54:	e702      	b.n	800595c <__kernel_rem_pio2+0x2c0>
 8005b56:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d86c      	bhi.n	8005c36 <__kernel_rem_pio2+0x59a>
 8005b5c:	e8df f003 	tbb	[pc, r3]
 8005b60:	022f2f59 	.word	0x022f2f59
 8005b64:	9a06      	ldr	r2, [sp, #24]
 8005b66:	ab48      	add	r3, sp, #288	; 0x120
 8005b68:	189d      	adds	r5, r3, r2
 8005b6a:	46aa      	mov	sl, r5
 8005b6c:	46a3      	mov	fp, r4
 8005b6e:	f1bb 0f00 	cmp.w	fp, #0
 8005b72:	f300 8087 	bgt.w	8005c84 <__kernel_rem_pio2+0x5e8>
 8005b76:	46a2      	mov	sl, r4
 8005b78:	f1ba 0f01 	cmp.w	sl, #1
 8005b7c:	f300 809f 	bgt.w	8005cbe <__kernel_rem_pio2+0x622>
 8005b80:	2700      	movs	r7, #0
 8005b82:	463e      	mov	r6, r7
 8005b84:	9d06      	ldr	r5, [sp, #24]
 8005b86:	ab48      	add	r3, sp, #288	; 0x120
 8005b88:	3508      	adds	r5, #8
 8005b8a:	441d      	add	r5, r3
 8005b8c:	2c01      	cmp	r4, #1
 8005b8e:	f300 80b3 	bgt.w	8005cf8 <__kernel_rem_pio2+0x65c>
 8005b92:	9b00      	ldr	r3, [sp, #0]
 8005b94:	9d48      	ldr	r5, [sp, #288]	; 0x120
 8005b96:	9849      	ldr	r0, [sp, #292]	; 0x124
 8005b98:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8005b9a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 80b5 	bne.w	8005d0c <__kernel_rem_pio2+0x670>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	9804      	ldr	r0, [sp, #16]
 8005ba8:	e9c0 2300 	strd	r2, r3, [r0]
 8005bac:	4622      	mov	r2, r4
 8005bae:	460b      	mov	r3, r1
 8005bb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005bb4:	463a      	mov	r2, r7
 8005bb6:	4633      	mov	r3, r6
 8005bb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005bbc:	e03b      	b.n	8005c36 <__kernel_rem_pio2+0x59a>
 8005bbe:	f04f 0c00 	mov.w	ip, #0
 8005bc2:	4626      	mov	r6, r4
 8005bc4:	4667      	mov	r7, ip
 8005bc6:	9d06      	ldr	r5, [sp, #24]
 8005bc8:	ab48      	add	r3, sp, #288	; 0x120
 8005bca:	3508      	adds	r5, #8
 8005bcc:	441d      	add	r5, r3
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	da42      	bge.n	8005c58 <__kernel_rem_pio2+0x5bc>
 8005bd2:	9b00      	ldr	r3, [sp, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d049      	beq.n	8005c6c <__kernel_rem_pio2+0x5d0>
 8005bd8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8005bdc:	4662      	mov	r2, ip
 8005bde:	460b      	mov	r3, r1
 8005be0:	9904      	ldr	r1, [sp, #16]
 8005be2:	2601      	movs	r6, #1
 8005be4:	e9c1 2300 	strd	r2, r3, [r1]
 8005be8:	a948      	add	r1, sp, #288	; 0x120
 8005bea:	463b      	mov	r3, r7
 8005bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf0:	f7fa fb26 	bl	8000240 <__aeabi_dsub>
 8005bf4:	4684      	mov	ip, r0
 8005bf6:	460f      	mov	r7, r1
 8005bf8:	ad48      	add	r5, sp, #288	; 0x120
 8005bfa:	42b4      	cmp	r4, r6
 8005bfc:	da38      	bge.n	8005c70 <__kernel_rem_pio2+0x5d4>
 8005bfe:	9b00      	ldr	r3, [sp, #0]
 8005c00:	b10b      	cbz	r3, 8005c06 <__kernel_rem_pio2+0x56a>
 8005c02:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005c06:	4662      	mov	r2, ip
 8005c08:	463b      	mov	r3, r7
 8005c0a:	9904      	ldr	r1, [sp, #16]
 8005c0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005c10:	e011      	b.n	8005c36 <__kernel_rem_pio2+0x59a>
 8005c12:	2700      	movs	r7, #0
 8005c14:	463d      	mov	r5, r7
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	aa98      	add	r2, sp, #608	; 0x260
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8005c20:	2c00      	cmp	r4, #0
 8005c22:	da0f      	bge.n	8005c44 <__kernel_rem_pio2+0x5a8>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	b10b      	cbz	r3, 8005c2c <__kernel_rem_pio2+0x590>
 8005c28:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	462b      	mov	r3, r5
 8005c30:	9904      	ldr	r1, [sp, #16]
 8005c32:	e9c1 2300 	strd	r2, r3, [r1]
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	f003 0007 	and.w	r0, r3, #7
 8005c3c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	4638      	mov	r0, r7
 8005c46:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	f7fa fafa 	bl	8000244 <__adddf3>
 8005c50:	3c01      	subs	r4, #1
 8005c52:	4607      	mov	r7, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	e7e3      	b.n	8005c20 <__kernel_rem_pio2+0x584>
 8005c58:	4660      	mov	r0, ip
 8005c5a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa faf0 	bl	8000244 <__adddf3>
 8005c64:	3e01      	subs	r6, #1
 8005c66:	4684      	mov	ip, r0
 8005c68:	460f      	mov	r7, r1
 8005c6a:	e7b0      	b.n	8005bce <__kernel_rem_pio2+0x532>
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	e7b5      	b.n	8005bdc <__kernel_rem_pio2+0x540>
 8005c70:	4660      	mov	r0, ip
 8005c72:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8005c76:	4639      	mov	r1, r7
 8005c78:	f7fa fae4 	bl	8000244 <__adddf3>
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	4684      	mov	ip, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	e7ba      	b.n	8005bfa <__kernel_rem_pio2+0x55e>
 8005c84:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8005c88:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4649      	mov	r1, r9
 8005c90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c94:	f7fa fad6 	bl	8000244 <__adddf3>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa facc 	bl	8000240 <__aeabi_dsub>
 8005ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cac:	f7fa faca 	bl	8000244 <__adddf3>
 8005cb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005cb8:	e9ca 6700 	strd	r6, r7, [sl]
 8005cbc:	e757      	b.n	8005b6e <__kernel_rem_pio2+0x4d2>
 8005cbe:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 8005cc2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	4639      	mov	r1, r7
 8005cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cce:	f7fa fab9 	bl	8000244 <__adddf3>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	4689      	mov	r9, r1
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa faaf 	bl	8000240 <__aeabi_dsub>
 8005ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce6:	f7fa faad 	bl	8000244 <__adddf3>
 8005cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005cf2:	e9c5 8900 	strd	r8, r9, [r5]
 8005cf6:	e73f      	b.n	8005b78 <__kernel_rem_pio2+0x4dc>
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005cfe:	4631      	mov	r1, r6
 8005d00:	f7fa faa0 	bl	8000244 <__adddf3>
 8005d04:	3c01      	subs	r4, #1
 8005d06:	4607      	mov	r7, r0
 8005d08:	460e      	mov	r6, r1
 8005d0a:	e73f      	b.n	8005b8c <__kernel_rem_pio2+0x4f0>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005d12:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005d16:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005d1a:	601d      	str	r5, [r3, #0]
 8005d1c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005d20:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005d24:	615e      	str	r6, [r3, #20]
 8005d26:	e786      	b.n	8005c36 <__kernel_rem_pio2+0x59a>
 8005d28:	41700000 	.word	0x41700000
 8005d2c:	3e700000 	.word	0x3e700000

08005d30 <__kernel_sin>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	e9cd 2300 	strd	r2, r3, [sp]
 8005d3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d42:	4682      	mov	sl, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005d48:	da03      	bge.n	8005d52 <__kernel_sin+0x22>
 8005d4a:	f7fa fecb 	bl	8000ae4 <__aeabi_d2iz>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d050      	beq.n	8005df4 <__kernel_sin+0xc4>
 8005d52:	4652      	mov	r2, sl
 8005d54:	4623      	mov	r3, r4
 8005d56:	4650      	mov	r0, sl
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7fa fc29 	bl	80005b0 <__aeabi_dmul>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460f      	mov	r7, r1
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4650      	mov	r0, sl
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f7fa fc21 	bl	80005b0 <__aeabi_dmul>
 8005d6e:	a33e      	add	r3, pc, #248	; (adr r3, 8005e68 <__kernel_sin+0x138>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	4680      	mov	r8, r0
 8005d76:	4689      	mov	r9, r1
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fc18 	bl	80005b0 <__aeabi_dmul>
 8005d80:	a33b      	add	r3, pc, #236	; (adr r3, 8005e70 <__kernel_sin+0x140>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fa5b 	bl	8000240 <__aeabi_dsub>
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	f7fa fc0f 	bl	80005b0 <__aeabi_dmul>
 8005d92:	a339      	add	r3, pc, #228	; (adr r3, 8005e78 <__kernel_sin+0x148>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fa54 	bl	8000244 <__adddf3>
 8005d9c:	4632      	mov	r2, r6
 8005d9e:	463b      	mov	r3, r7
 8005da0:	f7fa fc06 	bl	80005b0 <__aeabi_dmul>
 8005da4:	a336      	add	r3, pc, #216	; (adr r3, 8005e80 <__kernel_sin+0x150>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fa49 	bl	8000240 <__aeabi_dsub>
 8005dae:	4632      	mov	r2, r6
 8005db0:	463b      	mov	r3, r7
 8005db2:	f7fa fbfd 	bl	80005b0 <__aeabi_dmul>
 8005db6:	a334      	add	r3, pc, #208	; (adr r3, 8005e88 <__kernel_sin+0x158>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fa42 	bl	8000244 <__adddf3>
 8005dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc4:	b9dd      	cbnz	r5, 8005dfe <__kernel_sin+0xce>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4630      	mov	r0, r6
 8005dcc:	4639      	mov	r1, r7
 8005dce:	f7fa fbef 	bl	80005b0 <__aeabi_dmul>
 8005dd2:	a32f      	add	r3, pc, #188	; (adr r3, 8005e90 <__kernel_sin+0x160>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f7fa fa32 	bl	8000240 <__aeabi_dsub>
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	f7fa fbe6 	bl	80005b0 <__aeabi_dmul>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4650      	mov	r0, sl
 8005dea:	4621      	mov	r1, r4
 8005dec:	f7fa fa2a 	bl	8000244 <__adddf3>
 8005df0:	4682      	mov	sl, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	4650      	mov	r0, sl
 8005df6:	4621      	mov	r1, r4
 8005df8:	b006      	add	sp, #24
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	2200      	movs	r2, #0
 8005e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <__kernel_sin+0x168>)
 8005e06:	f7fa fbd3 	bl	80005b0 <__aeabi_dmul>
 8005e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e12:	4640      	mov	r0, r8
 8005e14:	4649      	mov	r1, r9
 8005e16:	f7fa fbcb 	bl	80005b0 <__aeabi_dmul>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e22:	f7fa fa0d 	bl	8000240 <__aeabi_dsub>
 8005e26:	4632      	mov	r2, r6
 8005e28:	463b      	mov	r3, r7
 8005e2a:	f7fa fbc1 	bl	80005b0 <__aeabi_dmul>
 8005e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e32:	f7fa fa05 	bl	8000240 <__aeabi_dsub>
 8005e36:	a316      	add	r3, pc, #88	; (adr r3, 8005e90 <__kernel_sin+0x160>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	460f      	mov	r7, r1
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa fbb4 	bl	80005b0 <__aeabi_dmul>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa f9f8 	bl	8000244 <__adddf3>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4650      	mov	r0, sl
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	f7fa f9f0 	bl	8000240 <__aeabi_dsub>
 8005e60:	e7c6      	b.n	8005df0 <__kernel_sin+0xc0>
 8005e62:	bf00      	nop
 8005e64:	f3af 8000 	nop.w
 8005e68:	5acfd57c 	.word	0x5acfd57c
 8005e6c:	3de5d93a 	.word	0x3de5d93a
 8005e70:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e74:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e78:	57b1fe7d 	.word	0x57b1fe7d
 8005e7c:	3ec71de3 	.word	0x3ec71de3
 8005e80:	19c161d5 	.word	0x19c161d5
 8005e84:	3f2a01a0 	.word	0x3f2a01a0
 8005e88:	1110f8a6 	.word	0x1110f8a6
 8005e8c:	3f811111 	.word	0x3f811111
 8005e90:	55555549 	.word	0x55555549
 8005e94:	3fc55555 	.word	0x3fc55555
 8005e98:	3fe00000 	.word	0x3fe00000
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <__kernel_tan>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	461f      	mov	r7, r3
 8005ea6:	4bda      	ldr	r3, [pc, #872]	; (8006210 <__kernel_tan+0x370>)
 8005ea8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005eac:	b089      	sub	sp, #36	; 0x24
 8005eae:	429e      	cmp	r6, r3
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	468b      	mov	fp, r1
 8005eb4:	4690      	mov	r8, r2
 8005eb6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8005eba:	9105      	str	r1, [sp, #20]
 8005ebc:	dc21      	bgt.n	8005f02 <__kernel_tan+0x62>
 8005ebe:	f7fa fe11 	bl	8000ae4 <__aeabi_d2iz>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d140      	bne.n	8005f48 <__kernel_tan+0xa8>
 8005ec6:	4652      	mov	r2, sl
 8005ec8:	f109 0301 	add.w	r3, r9, #1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	4333      	orrs	r3, r6
 8005ed0:	d110      	bne.n	8005ef4 <__kernel_tan+0x54>
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	4659      	mov	r1, fp
 8005ed6:	f000 f9a3 	bl	8006220 <fabs>
 8005eda:	4602      	mov	r2, r0
 8005edc:	2000      	movs	r0, #0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	49cc      	ldr	r1, [pc, #816]	; (8006214 <__kernel_tan+0x374>)
 8005ee2:	f7fa fc8f 	bl	8000804 <__aeabi_ddiv>
 8005ee6:	4682      	mov	sl, r0
 8005ee8:	468b      	mov	fp, r1
 8005eea:	4650      	mov	r0, sl
 8005eec:	4659      	mov	r1, fp
 8005eee:	b009      	add	sp, #36	; 0x24
 8005ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef4:	f1b9 0f01 	cmp.w	r9, #1
 8005ef8:	d0f7      	beq.n	8005eea <__kernel_tan+0x4a>
 8005efa:	465b      	mov	r3, fp
 8005efc:	2000      	movs	r0, #0
 8005efe:	49c6      	ldr	r1, [pc, #792]	; (8006218 <__kernel_tan+0x378>)
 8005f00:	e7ef      	b.n	8005ee2 <__kernel_tan+0x42>
 8005f02:	4bc6      	ldr	r3, [pc, #792]	; (800621c <__kernel_tan+0x37c>)
 8005f04:	429e      	cmp	r6, r3
 8005f06:	dd1f      	ble.n	8005f48 <__kernel_tan+0xa8>
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	da04      	bge.n	8005f16 <__kernel_tan+0x76>
 8005f0c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f10:	469b      	mov	fp, r3
 8005f12:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005f16:	4652      	mov	r2, sl
 8005f18:	a19f      	add	r1, pc, #636	; (adr r1, 8006198 <__kernel_tan+0x2f8>)
 8005f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1e:	465b      	mov	r3, fp
 8005f20:	f7fa f98e 	bl	8000240 <__aeabi_dsub>
 8005f24:	4604      	mov	r4, r0
 8005f26:	460d      	mov	r5, r1
 8005f28:	a19d      	add	r1, pc, #628	; (adr r1, 80061a0 <__kernel_tan+0x300>)
 8005f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f2e:	4642      	mov	r2, r8
 8005f30:	463b      	mov	r3, r7
 8005f32:	f7fa f985 	bl	8000240 <__aeabi_dsub>
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	f7fa f983 	bl	8000244 <__adddf3>
 8005f3e:	f04f 0800 	mov.w	r8, #0
 8005f42:	4682      	mov	sl, r0
 8005f44:	468b      	mov	fp, r1
 8005f46:	4647      	mov	r7, r8
 8005f48:	4652      	mov	r2, sl
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa fb2e 	bl	80005b0 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	e9cd 0100 	strd	r0, r1, [sp]
 8005f5c:	f7fa fb28 	bl	80005b0 <__aeabi_dmul>
 8005f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f64:	4604      	mov	r4, r0
 8005f66:	460d      	mov	r5, r1
 8005f68:	4650      	mov	r0, sl
 8005f6a:	4659      	mov	r1, fp
 8005f6c:	f7fa fb20 	bl	80005b0 <__aeabi_dmul>
 8005f70:	a38d      	add	r3, pc, #564	; (adr r3, 80061a8 <__kernel_tan+0x308>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f7fa fb17 	bl	80005b0 <__aeabi_dmul>
 8005f82:	a38b      	add	r3, pc, #556	; (adr r3, 80061b0 <__kernel_tan+0x310>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f95c 	bl	8000244 <__adddf3>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa fb0e 	bl	80005b0 <__aeabi_dmul>
 8005f94:	a388      	add	r3, pc, #544	; (adr r3, 80061b8 <__kernel_tan+0x318>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f953 	bl	8000244 <__adddf3>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa fb05 	bl	80005b0 <__aeabi_dmul>
 8005fa6:	a386      	add	r3, pc, #536	; (adr r3, 80061c0 <__kernel_tan+0x320>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa f94a 	bl	8000244 <__adddf3>
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f7fa fafc 	bl	80005b0 <__aeabi_dmul>
 8005fb8:	a383      	add	r3, pc, #524	; (adr r3, 80061c8 <__kernel_tan+0x328>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f941 	bl	8000244 <__adddf3>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa faf3 	bl	80005b0 <__aeabi_dmul>
 8005fca:	a381      	add	r3, pc, #516	; (adr r3, 80061d0 <__kernel_tan+0x330>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f938 	bl	8000244 <__adddf3>
 8005fd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fd8:	f7fa faea 	bl	80005b0 <__aeabi_dmul>
 8005fdc:	a37e      	add	r3, pc, #504	; (adr r3, 80061d8 <__kernel_tan+0x338>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa fae1 	bl	80005b0 <__aeabi_dmul>
 8005fee:	a37c      	add	r3, pc, #496	; (adr r3, 80061e0 <__kernel_tan+0x340>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa f926 	bl	8000244 <__adddf3>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	f7fa fad8 	bl	80005b0 <__aeabi_dmul>
 8006000:	a379      	add	r3, pc, #484	; (adr r3, 80061e8 <__kernel_tan+0x348>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f91d 	bl	8000244 <__adddf3>
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f7fa facf 	bl	80005b0 <__aeabi_dmul>
 8006012:	a377      	add	r3, pc, #476	; (adr r3, 80061f0 <__kernel_tan+0x350>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f914 	bl	8000244 <__adddf3>
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f7fa fac6 	bl	80005b0 <__aeabi_dmul>
 8006024:	a374      	add	r3, pc, #464	; (adr r3, 80061f8 <__kernel_tan+0x358>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa f90b 	bl	8000244 <__adddf3>
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	f7fa fabd 	bl	80005b0 <__aeabi_dmul>
 8006036:	a372      	add	r3, pc, #456	; (adr r3, 8006200 <__kernel_tan+0x360>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa f902 	bl	8000244 <__adddf3>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006048:	f7fa f8fc 	bl	8000244 <__adddf3>
 800604c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006050:	f7fa faae 	bl	80005b0 <__aeabi_dmul>
 8006054:	4642      	mov	r2, r8
 8006056:	463b      	mov	r3, r7
 8006058:	f7fa f8f4 	bl	8000244 <__adddf3>
 800605c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006060:	f7fa faa6 	bl	80005b0 <__aeabi_dmul>
 8006064:	4642      	mov	r2, r8
 8006066:	463b      	mov	r3, r7
 8006068:	f7fa f8ec 	bl	8000244 <__adddf3>
 800606c:	a366      	add	r3, pc, #408	; (adr r3, 8006208 <__kernel_tan+0x368>)
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	4604      	mov	r4, r0
 8006074:	460d      	mov	r5, r1
 8006076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607a:	f7fa fa99 	bl	80005b0 <__aeabi_dmul>
 800607e:	4622      	mov	r2, r4
 8006080:	462b      	mov	r3, r5
 8006082:	f7fa f8df 	bl	8000244 <__adddf3>
 8006086:	e9cd 0100 	strd	r0, r1, [sp]
 800608a:	460b      	mov	r3, r1
 800608c:	4602      	mov	r2, r0
 800608e:	4659      	mov	r1, fp
 8006090:	4650      	mov	r0, sl
 8006092:	f7fa f8d7 	bl	8000244 <__adddf3>
 8006096:	4b61      	ldr	r3, [pc, #388]	; (800621c <__kernel_tan+0x37c>)
 8006098:	4604      	mov	r4, r0
 800609a:	429e      	cmp	r6, r3
 800609c:	460d      	mov	r5, r1
 800609e:	dd3d      	ble.n	800611c <__kernel_tan+0x27c>
 80060a0:	4648      	mov	r0, r9
 80060a2:	f7fa fa1b 	bl	80004dc <__aeabi_i2d>
 80060a6:	4622      	mov	r2, r4
 80060a8:	4680      	mov	r8, r0
 80060aa:	4689      	mov	r9, r1
 80060ac:	462b      	mov	r3, r5
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7fa fa7d 	bl	80005b0 <__aeabi_dmul>
 80060b6:	4642      	mov	r2, r8
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	464b      	mov	r3, r9
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa f8bf 	bl	8000244 <__adddf3>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4630      	mov	r0, r6
 80060cc:	4639      	mov	r1, r7
 80060ce:	f7fa fb99 	bl	8000804 <__aeabi_ddiv>
 80060d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d6:	f7fa f8b3 	bl	8000240 <__aeabi_dsub>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4650      	mov	r0, sl
 80060e0:	4659      	mov	r1, fp
 80060e2:	f7fa f8ad 	bl	8000240 <__aeabi_dsub>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	f7fa f8ab 	bl	8000244 <__adddf3>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f8a3 	bl	8000240 <__aeabi_dsub>
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	4604      	mov	r4, r0
 80060fe:	1798      	asrs	r0, r3, #30
 8006100:	f000 0002 	and.w	r0, r0, #2
 8006104:	f1c0 0001 	rsb	r0, r0, #1
 8006108:	460d      	mov	r5, r1
 800610a:	f7fa f9e7 	bl	80004dc <__aeabi_i2d>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4620      	mov	r0, r4
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fa4b 	bl	80005b0 <__aeabi_dmul>
 800611a:	e6e4      	b.n	8005ee6 <__kernel_tan+0x46>
 800611c:	f1b9 0f01 	cmp.w	r9, #1
 8006120:	d036      	beq.n	8006190 <__kernel_tan+0x2f0>
 8006122:	460f      	mov	r7, r1
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	2000      	movs	r0, #0
 800612a:	493b      	ldr	r1, [pc, #236]	; (8006218 <__kernel_tan+0x378>)
 800612c:	f7fa fb6a 	bl	8000804 <__aeabi_ddiv>
 8006130:	2600      	movs	r6, #0
 8006132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006136:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800613a:	4652      	mov	r2, sl
 800613c:	465b      	mov	r3, fp
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa f87d 	bl	8000240 <__aeabi_dsub>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800614e:	f7fa f877 	bl	8000240 <__aeabi_dsub>
 8006152:	4632      	mov	r2, r6
 8006154:	462b      	mov	r3, r5
 8006156:	f7fa fa2b 	bl	80005b0 <__aeabi_dmul>
 800615a:	4632      	mov	r2, r6
 800615c:	4682      	mov	sl, r0
 800615e:	468b      	mov	fp, r1
 8006160:	462b      	mov	r3, r5
 8006162:	4630      	mov	r0, r6
 8006164:	4639      	mov	r1, r7
 8006166:	f7fa fa23 	bl	80005b0 <__aeabi_dmul>
 800616a:	2200      	movs	r2, #0
 800616c:	4b29      	ldr	r3, [pc, #164]	; (8006214 <__kernel_tan+0x374>)
 800616e:	f7fa f869 	bl	8000244 <__adddf3>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4650      	mov	r0, sl
 8006178:	4659      	mov	r1, fp
 800617a:	f7fa f863 	bl	8000244 <__adddf3>
 800617e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006182:	f7fa fa15 	bl	80005b0 <__aeabi_dmul>
 8006186:	4632      	mov	r2, r6
 8006188:	462b      	mov	r3, r5
 800618a:	f7fa f85b 	bl	8000244 <__adddf3>
 800618e:	e6aa      	b.n	8005ee6 <__kernel_tan+0x46>
 8006190:	4682      	mov	sl, r0
 8006192:	468b      	mov	fp, r1
 8006194:	e6a9      	b.n	8005eea <__kernel_tan+0x4a>
 8006196:	bf00      	nop
 8006198:	54442d18 	.word	0x54442d18
 800619c:	3fe921fb 	.word	0x3fe921fb
 80061a0:	33145c07 	.word	0x33145c07
 80061a4:	3c81a626 	.word	0x3c81a626
 80061a8:	74bf7ad4 	.word	0x74bf7ad4
 80061ac:	3efb2a70 	.word	0x3efb2a70
 80061b0:	32f0a7e9 	.word	0x32f0a7e9
 80061b4:	3f12b80f 	.word	0x3f12b80f
 80061b8:	1a8d1068 	.word	0x1a8d1068
 80061bc:	3f3026f7 	.word	0x3f3026f7
 80061c0:	fee08315 	.word	0xfee08315
 80061c4:	3f57dbc8 	.word	0x3f57dbc8
 80061c8:	e96e8493 	.word	0xe96e8493
 80061cc:	3f8226e3 	.word	0x3f8226e3
 80061d0:	1bb341fe 	.word	0x1bb341fe
 80061d4:	3faba1ba 	.word	0x3faba1ba
 80061d8:	db605373 	.word	0xdb605373
 80061dc:	bef375cb 	.word	0xbef375cb
 80061e0:	a03792a6 	.word	0xa03792a6
 80061e4:	3f147e88 	.word	0x3f147e88
 80061e8:	f2f26501 	.word	0xf2f26501
 80061ec:	3f4344d8 	.word	0x3f4344d8
 80061f0:	c9560328 	.word	0xc9560328
 80061f4:	3f6d6d22 	.word	0x3f6d6d22
 80061f8:	8406d637 	.word	0x8406d637
 80061fc:	3f9664f4 	.word	0x3f9664f4
 8006200:	1110fe7a 	.word	0x1110fe7a
 8006204:	3fc11111 	.word	0x3fc11111
 8006208:	55555563 	.word	0x55555563
 800620c:	3fd55555 	.word	0x3fd55555
 8006210:	3e2fffff 	.word	0x3e2fffff
 8006214:	3ff00000 	.word	0x3ff00000
 8006218:	bff00000 	.word	0xbff00000
 800621c:	3fe59427 	.word	0x3fe59427

08006220 <fabs>:
 8006220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006224:	4619      	mov	r1, r3
 8006226:	4770      	bx	lr

08006228 <floor>:
 8006228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800622c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006230:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006234:	2e13      	cmp	r6, #19
 8006236:	4607      	mov	r7, r0
 8006238:	460b      	mov	r3, r1
 800623a:	460c      	mov	r4, r1
 800623c:	4605      	mov	r5, r0
 800623e:	dc35      	bgt.n	80062ac <floor+0x84>
 8006240:	2e00      	cmp	r6, #0
 8006242:	da16      	bge.n	8006272 <floor+0x4a>
 8006244:	a336      	add	r3, pc, #216	; (adr r3, 8006320 <floor+0xf8>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7f9 fffb 	bl	8000244 <__adddf3>
 800624e:	2200      	movs	r2, #0
 8006250:	2300      	movs	r3, #0
 8006252:	f7fa fc3d 	bl	8000ad0 <__aeabi_dcmpgt>
 8006256:	b148      	cbz	r0, 800626c <floor+0x44>
 8006258:	2c00      	cmp	r4, #0
 800625a:	da5b      	bge.n	8006314 <floor+0xec>
 800625c:	2500      	movs	r5, #0
 800625e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006262:	4a31      	ldr	r2, [pc, #196]	; (8006328 <floor+0x100>)
 8006264:	433b      	orrs	r3, r7
 8006266:	42ab      	cmp	r3, r5
 8006268:	bf18      	it	ne
 800626a:	4614      	movne	r4, r2
 800626c:	4623      	mov	r3, r4
 800626e:	462f      	mov	r7, r5
 8006270:	e026      	b.n	80062c0 <floor+0x98>
 8006272:	4a2e      	ldr	r2, [pc, #184]	; (800632c <floor+0x104>)
 8006274:	fa42 f806 	asr.w	r8, r2, r6
 8006278:	ea01 0208 	and.w	r2, r1, r8
 800627c:	4302      	orrs	r2, r0
 800627e:	d01f      	beq.n	80062c0 <floor+0x98>
 8006280:	a327      	add	r3, pc, #156	; (adr r3, 8006320 <floor+0xf8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7f9 ffdd 	bl	8000244 <__adddf3>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	f7fa fc1f 	bl	8000ad0 <__aeabi_dcmpgt>
 8006292:	2800      	cmp	r0, #0
 8006294:	d0ea      	beq.n	800626c <floor+0x44>
 8006296:	2c00      	cmp	r4, #0
 8006298:	bfbe      	ittt	lt
 800629a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800629e:	fa43 f606 	asrlt.w	r6, r3, r6
 80062a2:	19a4      	addlt	r4, r4, r6
 80062a4:	ea24 0408 	bic.w	r4, r4, r8
 80062a8:	2500      	movs	r5, #0
 80062aa:	e7df      	b.n	800626c <floor+0x44>
 80062ac:	2e33      	cmp	r6, #51	; 0x33
 80062ae:	dd0b      	ble.n	80062c8 <floor+0xa0>
 80062b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80062b4:	d104      	bne.n	80062c0 <floor+0x98>
 80062b6:	4602      	mov	r2, r0
 80062b8:	f7f9 ffc4 	bl	8000244 <__adddf3>
 80062bc:	4607      	mov	r7, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4638      	mov	r0, r7
 80062c2:	4619      	mov	r1, r3
 80062c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80062d0:	fa22 f808 	lsr.w	r8, r2, r8
 80062d4:	ea18 0f00 	tst.w	r8, r0
 80062d8:	d0f2      	beq.n	80062c0 <floor+0x98>
 80062da:	a311      	add	r3, pc, #68	; (adr r3, 8006320 <floor+0xf8>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f7f9 ffb0 	bl	8000244 <__adddf3>
 80062e4:	2200      	movs	r2, #0
 80062e6:	2300      	movs	r3, #0
 80062e8:	f7fa fbf2 	bl	8000ad0 <__aeabi_dcmpgt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d0bd      	beq.n	800626c <floor+0x44>
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	da02      	bge.n	80062fa <floor+0xd2>
 80062f4:	2e14      	cmp	r6, #20
 80062f6:	d103      	bne.n	8006300 <floor+0xd8>
 80062f8:	3401      	adds	r4, #1
 80062fa:	ea25 0508 	bic.w	r5, r5, r8
 80062fe:	e7b5      	b.n	800626c <floor+0x44>
 8006300:	2301      	movs	r3, #1
 8006302:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006306:	fa03 f606 	lsl.w	r6, r3, r6
 800630a:	4435      	add	r5, r6
 800630c:	42bd      	cmp	r5, r7
 800630e:	bf38      	it	cc
 8006310:	18e4      	addcc	r4, r4, r3
 8006312:	e7f2      	b.n	80062fa <floor+0xd2>
 8006314:	2500      	movs	r5, #0
 8006316:	462c      	mov	r4, r5
 8006318:	e7a8      	b.n	800626c <floor+0x44>
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w
 8006320:	8800759c 	.word	0x8800759c
 8006324:	7e37e43c 	.word	0x7e37e43c
 8006328:	bff00000 	.word	0xbff00000
 800632c:	000fffff 	.word	0x000fffff

08006330 <scalbn>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	4616      	mov	r6, r2
 8006334:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006338:	4604      	mov	r4, r0
 800633a:	460d      	mov	r5, r1
 800633c:	460b      	mov	r3, r1
 800633e:	b982      	cbnz	r2, 8006362 <scalbn+0x32>
 8006340:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006344:	4303      	orrs	r3, r0
 8006346:	d034      	beq.n	80063b2 <scalbn+0x82>
 8006348:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <scalbn+0xd0>)
 800634a:	2200      	movs	r2, #0
 800634c:	f7fa f930 	bl	80005b0 <__aeabi_dmul>
 8006350:	4b2c      	ldr	r3, [pc, #176]	; (8006404 <scalbn+0xd4>)
 8006352:	4604      	mov	r4, r0
 8006354:	429e      	cmp	r6, r3
 8006356:	460d      	mov	r5, r1
 8006358:	da0d      	bge.n	8006376 <scalbn+0x46>
 800635a:	a325      	add	r3, pc, #148	; (adr r3, 80063f0 <scalbn+0xc0>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	e01c      	b.n	800639c <scalbn+0x6c>
 8006362:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006366:	42ba      	cmp	r2, r7
 8006368:	d109      	bne.n	800637e <scalbn+0x4e>
 800636a:	4602      	mov	r2, r0
 800636c:	f7f9 ff6a 	bl	8000244 <__adddf3>
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	e01d      	b.n	80063b2 <scalbn+0x82>
 8006376:	460b      	mov	r3, r1
 8006378:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800637c:	3a36      	subs	r2, #54	; 0x36
 800637e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006382:	4432      	add	r2, r6
 8006384:	428a      	cmp	r2, r1
 8006386:	dd0c      	ble.n	80063a2 <scalbn+0x72>
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	a11a      	add	r1, pc, #104	; (adr r1, 80063f8 <scalbn+0xc8>)
 800638e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006392:	f000 f83b 	bl	800640c <copysign>
 8006396:	a318      	add	r3, pc, #96	; (adr r3, 80063f8 <scalbn+0xc8>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fa f908 	bl	80005b0 <__aeabi_dmul>
 80063a0:	e7e6      	b.n	8006370 <scalbn+0x40>
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	dd08      	ble.n	80063b8 <scalbn+0x88>
 80063a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80063bc:	da0b      	bge.n	80063d6 <scalbn+0xa6>
 80063be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80063c2:	429e      	cmp	r6, r3
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	dce0      	bgt.n	800638c <scalbn+0x5c>
 80063ca:	a109      	add	r1, pc, #36	; (adr r1, 80063f0 <scalbn+0xc0>)
 80063cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d0:	f000 f81c 	bl	800640c <copysign>
 80063d4:	e7c1      	b.n	800635a <scalbn+0x2a>
 80063d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063da:	3236      	adds	r2, #54	; 0x36
 80063dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063e4:	4620      	mov	r0, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	2200      	movs	r2, #0
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <scalbn+0xd8>)
 80063ec:	e7d6      	b.n	800639c <scalbn+0x6c>
 80063ee:	bf00      	nop
 80063f0:	c2f8f359 	.word	0xc2f8f359
 80063f4:	01a56e1f 	.word	0x01a56e1f
 80063f8:	8800759c 	.word	0x8800759c
 80063fc:	7e37e43c 	.word	0x7e37e43c
 8006400:	43500000 	.word	0x43500000
 8006404:	ffff3cb0 	.word	0xffff3cb0
 8006408:	3c900000 	.word	0x3c900000

0800640c <copysign>:
 800640c:	b530      	push	{r4, r5, lr}
 800640e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006416:	ea42 0503 	orr.w	r5, r2, r3
 800641a:	4629      	mov	r1, r5
 800641c:	bd30      	pop	{r4, r5, pc}
	...

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
